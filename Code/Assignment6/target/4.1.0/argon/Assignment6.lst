
c:/Users/ksand/Desktop/Cheese/Assignment6/target/4.1.0/argon/Assignment6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004e94  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8eb0  000b8eb0  00008eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8ed4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  2003e58c  000b8ed8  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e4  2003e60c  2003e60c  0002e60c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8f58  000b8f58  00028f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8f80  000b8f80  00028f80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010ba68  00000000  00000000  00028f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011083  00000000  00000000  001349ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00037b4b  00000000  00000000  00145a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e70  00000000  00000000  0017d5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a068  00000000  00000000  0018042a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035404  00000000  00000000  0018a492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003793e  00000000  00000000  001bf896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131c63  00000000  00000000  001f71d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000084ac  00000000  00000000  00328e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 f92d 	bl	b828c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 f94f 	bl	b82dc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e58c 	.word	0x2003e58c
   b4048:	000b8ed8 	.word	0x000b8ed8
   b404c:	2003e60c 	.word	0x2003e60c
   b4050:	2003e60c 	.word	0x2003e60c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fa55 	bl	b750c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8e80 	.word	0x000b8e80
   b407c:	000b8ea4 	.word	0x000b8ea4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b942 	b.w	b4308 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f861 	bl	b414c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b9f5 	b.w	b747c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 be55 	b.w	b4d40 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 be53 	b.w	b4d40 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be59 	b.w	b4d50 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 fd96 	bl	b4bd8 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b48c5 	.word	0x000b48c5
   b40b4:	000b8630 	.word	0x000b8630

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d4:	4b0a      	ldr	r3, [pc, #40]	; (b4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40d6:	b510      	push	{r4, lr}
   b40d8:	4604      	mov	r4, r0
   b40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40dc:	f002 fb84 	bl	b67e8 <_ZN5spark10LogManager8instanceEv>
   b40e0:	4621      	mov	r1, r4
   b40e2:	f002 fdbc 	bl	b6c5e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40e6:	f003 fb1d 	bl	b7724 <_Z16_fetch_usbserialv>
   b40ea:	f003 fb0f 	bl	b770c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40ee:	4620      	mov	r0, r4
   b40f0:	4b04      	ldr	r3, [pc, #16]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f2:	f840 3b04 	str.w	r3, [r0], #4
   b40f6:	f002 fc4d 	bl	b6994 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}
   b40fe:	bf00      	nop
   b4100:	000b87b8 	.word	0x000b87b8
   b4104:	000b87a0 	.word	0x000b87a0

000b4108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4108:	b510      	push	{r4, lr}
   b410a:	4604      	mov	r4, r0
    }
   b410c:	f7ff ffe2 	bl	b40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4110:	4620      	mov	r0, r4
   b4112:	2124      	movs	r1, #36	; 0x24
   b4114:	f7ff ffc1 	bl	b409a <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b500      	push	{lr}
   b4120:	b08c      	sub	sp, #48	; 0x30
   b4122:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4124:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4128:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b412c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b412e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4132:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4134:	6801      	ldr	r1, [r0, #0]
   b4136:	aa04      	add	r2, sp, #16
   b4138:	201e      	movs	r0, #30
    attr.flags = 0;
   b413a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b413e:	f000 fd5b 	bl	b4bf8 <log_message_v>
}
   b4142:	b00c      	add	sp, #48	; 0x30
   b4144:	f85d eb04 	ldr.w	lr, [sp], #4
   b4148:	b003      	add	sp, #12
   b414a:	4770      	bx	lr

000b414c <loop>:
  pinMode(redPin, OUTPUT);

  configureBLE();
}

void loop() {
   b414c:	b590      	push	{r4, r7, lr}
   b414e:	b091      	sub	sp, #68	; 0x44
   b4150:	af00      	add	r7, sp, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4152:	f000 fbbf 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long currentMillis = millis();

    if (currentMillis - lastUpdate >= UPDATE_INTERVAL) {
   b4156:	4a33      	ldr	r2, [pc, #204]	; (b4224 <loop+0xd8>)
   b4158:	6813      	ldr	r3, [r2, #0]
   b415a:	f241 3187 	movw	r1, #4999	; 0x1387
   b415e:	1ac3      	subs	r3, r0, r3
   b4160:	428b      	cmp	r3, r1
   b4162:	d959      	bls.n	b4218 <loop+0xcc>
        lastUpdate = currentMillis;
   b4164:	6010      	str	r0, [r2, #0]

        if (BLE.connected()) {
   b4166:	f001 fb01 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b416a:	f001 fb59 	bl	b5820 <_ZNK8particle14BleLocalDevice9connectedEv>
   b416e:	2800      	cmp	r0, #0
   b4170:	d052      	beq.n	b4218 <loop+0xcc>
            String ledStatus;
   b4172:	492d      	ldr	r1, [pc, #180]	; (b4228 <loop+0xdc>)
   b4174:	4638      	mov	r0, r7
   b4176:	f000 fec8 	bl	b4f0a <_ZN6StringC1EPK19__FlashStringHelper>
            String colorStatus;
   b417a:	492b      	ldr	r1, [pc, #172]	; (b4228 <loop+0xdc>)
   b417c:	f107 0010 	add.w	r0, r7, #16
   b4180:	f000 fec3 	bl	b4f0a <_ZN6StringC1EPK19__FlashStringHelper>

            if (isLedOn) {
   b4184:	4b29      	ldr	r3, [pc, #164]	; (b422c <loop+0xe0>)
   b4186:	781b      	ldrb	r3, [r3, #0]

            uint8_t readData[statusStr.length() + 1]; 
            statusStr.toCharArray((char*)readData, statusStr.length() + 1);

            notifyStatusCharacteristic.setValue(readData, statusStr.length());
            Log.info("Updated Status and Color : %s", statusStr.c_str());
   b4188:	466c      	mov	r4, sp
            if (isLedOn) {
   b418a:	2b00      	cmp	r3, #0
   b418c:	d047      	beq.n	b421e <loop+0xd2>
                ledStatus = "ON";
   b418e:	4928      	ldr	r1, [pc, #160]	; (b4230 <loop+0xe4>)
                ledStatus = "OFF";
   b4190:	4638      	mov	r0, r7
   b4192:	f000 ff1c 	bl	b4fce <_ZN6StringaSEPKc>
                colorStatus = selectedColor;
   b4196:	4927      	ldr	r1, [pc, #156]	; (b4234 <loop+0xe8>)
   b4198:	f107 0010 	add.w	r0, r7, #16
   b419c:	f000 fefd 	bl	b4f9a <_ZN6StringaSERKS_>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41a0:	4639      	mov	r1, r7
   b41a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b41a6:	f000 ff07 	bl	b4fb8 <_ZN6StringC1ERKS_>
            String statusStr = ledStatus + ", " + colorStatus;
   b41aa:	4923      	ldr	r1, [pc, #140]	; (b4238 <loop+0xec>)
   b41ac:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b41b0:	f000 ff42 	bl	b5038 <_ZplRK15StringSumHelperPKc>
   b41b4:	f107 0110 	add.w	r1, r7, #16
   b41b8:	f000 ff32 	bl	b5020 <_ZplRK15StringSumHelperRK6String>
   b41bc:	4601      	mov	r1, r0
   b41be:	f107 0020 	add.w	r0, r7, #32
   b41c2:	f000 fef9 	bl	b4fb8 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   b41c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b41ca:	f000 fe53 	bl	b4e74 <_ZN6StringD1Ev>
            uint8_t readData[statusStr.length() + 1]; 
   b41ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   b41d0:	f102 0308 	add.w	r3, r2, #8
   b41d4:	f023 0307 	bic.w	r3, r3, #7
   b41d8:	ebad 0d03 	sub.w	sp, sp, r3
		{getBytes((unsigned char *)buf, bufsize, index);}
   b41dc:	4669      	mov	r1, sp
   b41de:	2300      	movs	r3, #0
   b41e0:	3201      	adds	r2, #1
   b41e2:	f107 0020 	add.w	r0, r7, #32
   b41e6:	f000 ff4e 	bl	b5086 <_ZNK6String8getBytesEPhjj>
            notifyStatusCharacteristic.setValue(readData, statusStr.length());
   b41ea:	2300      	movs	r3, #0
   b41ec:	4669      	mov	r1, sp
   b41ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   b41f0:	4812      	ldr	r0, [pc, #72]	; (b423c <loop+0xf0>)
   b41f2:	f001 f9ab 	bl	b554c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Log.info("Updated Status and Color : %s", statusStr.c_str());
   b41f6:	6a3a      	ldr	r2, [r7, #32]
   b41f8:	4911      	ldr	r1, [pc, #68]	; (b4240 <loop+0xf4>)
   b41fa:	4812      	ldr	r0, [pc, #72]	; (b4244 <loop+0xf8>)
   b41fc:	f7ff ff8e 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
            String statusStr = ledStatus + ", " + colorStatus;
   b4200:	f107 0020 	add.w	r0, r7, #32
   b4204:	f000 fe36 	bl	b4e74 <_ZN6StringD1Ev>
            String colorStatus;
   b4208:	f107 0010 	add.w	r0, r7, #16
   b420c:	f000 fe32 	bl	b4e74 <_ZN6StringD1Ev>
            String ledStatus;
   b4210:	4638      	mov	r0, r7
   b4212:	f000 fe2f 	bl	b4e74 <_ZN6StringD1Ev>
   b4216:	46a5      	mov	sp, r4
        }
    }
}
   b4218:	3744      	adds	r7, #68	; 0x44
   b421a:	46bd      	mov	sp, r7
   b421c:	bd90      	pop	{r4, r7, pc}
                ledStatus = "OFF";
   b421e:	490a      	ldr	r1, [pc, #40]	; (b4248 <loop+0xfc>)
   b4220:	e7b6      	b.n	b4190 <loop+0x44>
   b4222:	bf00      	nop
   b4224:	2003e628 	.word	0x2003e628
   b4228:	000b8a2c 	.word	0x000b8a2c
   b422c:	2003e624 	.word	0x2003e624
   b4230:	000b867c 	.word	0x000b867c
   b4234:	2003e660 	.word	0x2003e660
   b4238:	000b8645 	.word	0x000b8645
   b423c:	2003e650 	.word	0x2003e650
   b4240:	000b8648 	.word	0x000b8648
   b4244:	2003e6ac 	.word	0x2003e6ac
   b4248:	000b8686 	.word	0x000b8686

000b424c <_Z12configureBLEv>:

void configureBLE() {
   b424c:	b570      	push	{r4, r5, r6, lr}
   b424e:	b090      	sub	sp, #64	; 0x40
  BLE.on();
   b4250:	f001 fa8c 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4254:	f001 fad4 	bl	b5800 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(turnOnOffCharacteristic);
   b4258:	f001 fa88 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b425c:	4a26      	ldr	r2, [pc, #152]	; (b42f8 <_Z12configureBLEv+0xac>)
   b425e:	4c27      	ldr	r4, [pc, #156]	; (b42fc <_Z12configureBLEv+0xb0>)
   b4260:	4601      	mov	r1, r0
   b4262:	a80b      	add	r0, sp, #44	; 0x2c
   b4264:	f001 ffce 	bl	b6204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4268:	a80b      	add	r0, sp, #44	; 0x2c
   b426a:	f001 fb88 	bl	b597e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(selectColorCharacteristic);
   b426e:	f001 fa7d 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4272:	4a23      	ldr	r2, [pc, #140]	; (b4300 <_Z12configureBLEv+0xb4>)
   b4274:	4601      	mov	r1, r0
   b4276:	a80b      	add	r0, sp, #44	; 0x2c
   b4278:	f001 ffc4 	bl	b6204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b427c:	a80b      	add	r0, sp, #44	; 0x2c
   b427e:	f001 fb7e 	bl	b597e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(notifyStatusCharacteristic);
   b4282:	f001 fa73 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4286:	4a1f      	ldr	r2, [pc, #124]	; (b4304 <_Z12configureBLEv+0xb8>)
   b4288:	4601      	mov	r1, r0
   b428a:	a80b      	add	r0, sp, #44	; 0x2c
   b428c:	f001 ffba 	bl	b6204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4290:	a80b      	add	r0, sp, #44	; 0x2c
   b4292:	f001 fb74 	bl	b597e <_ZN8particle17BleCharacteristicD1Ev>



  BleAdvertisingData advData;
   b4296:	a803      	add	r0, sp, #12
   b4298:	f001 fca7 	bl	b5bea <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendServiceUUID(customServiceUuid);
   b429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b429e:	ad06      	add	r5, sp, #24
   b42a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b42a2:	ad06      	add	r5, sp, #24
   b42a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42a6:	6826      	ldr	r6, [r4, #0]
   b42a8:	ac0b      	add	r4, sp, #44	; 0x2c
   b42aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42ac:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b42ae:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42b0:	f001 f870 	bl	b5394 <_ZNK8particle7BleUuid4typeEv>
   b42b4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b42b6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b42b8:	b9b4      	cbnz	r4, b42e8 <_Z12configureBLEv+0x9c>
            uint16_t uuid16 = tempUUID.shorted();
   b42ba:	f001 f887 	bl	b53cc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42be:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b42c0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b42c4:	2302      	movs	r3, #2
   b42c6:	f10d 020a 	add.w	r2, sp, #10
   b42ca:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b42cc:	a803      	add	r0, sp, #12
   b42ce:	f001 fc81 	bl	b5bd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&advData);
   b42d2:	f001 fa4b 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42d6:	2200      	movs	r2, #0
   b42d8:	a903      	add	r1, sp, #12
   b42da:	f001 faf4 	bl	b58c6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b42de:	9803      	ldr	r0, [sp, #12]
   b42e0:	f000 fd36 	bl	b4d50 <free>
}
   b42e4:	b010      	add	sp, #64	; 0x40
   b42e6:	bd70      	pop	{r4, r5, r6, pc}
   b42e8:	f001 f872 	bl	b53d0 <_ZNK8particle7BleUuid8rawBytesEv>
   b42ec:	2300      	movs	r3, #0
   b42ee:	9300      	str	r3, [sp, #0]
   b42f0:	4602      	mov	r2, r0
   b42f2:	2310      	movs	r3, #16
   b42f4:	2107      	movs	r1, #7
   b42f6:	e7e9      	b.n	b42cc <_Z12configureBLEv+0x80>
   b42f8:	2003e670 	.word	0x2003e670
   b42fc:	2003e610 	.word	0x2003e610
   b4300:	2003e658 	.word	0x2003e658
   b4304:	2003e650 	.word	0x2003e650

000b4308 <setup>:
void setup() {
   b4308:	b508      	push	{r3, lr}
  pinMode(bluePin, OUTPUT);
   b430a:	4b09      	ldr	r3, [pc, #36]	; (b4330 <setup+0x28>)
   b430c:	2101      	movs	r1, #1
   b430e:	8818      	ldrh	r0, [r3, #0]
   b4310:	f003 fdda 	bl	b7ec8 <pinMode>
  pinMode(greenPin, OUTPUT);
   b4314:	4b07      	ldr	r3, [pc, #28]	; (b4334 <setup+0x2c>)
   b4316:	2101      	movs	r1, #1
   b4318:	8818      	ldrh	r0, [r3, #0]
   b431a:	f003 fdd5 	bl	b7ec8 <pinMode>
  pinMode(redPin, OUTPUT);
   b431e:	4b06      	ldr	r3, [pc, #24]	; (b4338 <setup+0x30>)
   b4320:	2101      	movs	r1, #1
   b4322:	8818      	ldrh	r0, [r3, #0]
   b4324:	f003 fdd0 	bl	b7ec8 <pinMode>
}
   b4328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  configureBLE();
   b432c:	f7ff bf8e 	b.w	b424c <_Z12configureBLEv>
   b4330:	2003e58c 	.word	0x2003e58c
   b4334:	2003e590 	.word	0x2003e590
   b4338:	2003e594 	.word	0x2003e594

000b433c <_Z15updateLedStatusv>:
  }

  updateLedStatus();
}

void updateLedStatus() {
   b433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (isLedOn) {
   b433e:	4b24      	ldr	r3, [pc, #144]	; (b43d0 <_Z15updateLedStatusv+0x94>)
   b4340:	7819      	ldrb	r1, [r3, #0]
   b4342:	2900      	cmp	r1, #0
   b4344:	d035      	beq.n	b43b2 <_Z15updateLedStatusv+0x76>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4346:	4923      	ldr	r1, [pc, #140]	; (b43d4 <_Z15updateLedStatusv+0x98>)
   b4348:	4823      	ldr	r0, [pc, #140]	; (b43d8 <_Z15updateLedStatusv+0x9c>)
   b434a:	f000 fe8a 	bl	b5062 <_ZNK6String6equalsEPKc>
    if (selectedColor == "RED") {
   b434e:	4605      	mov	r5, r0
   b4350:	b188      	cbz	r0, b4376 <_Z15updateLedStatusv+0x3a>
      digitalWrite(redPin, HIGH);
   b4352:	4b22      	ldr	r3, [pc, #136]	; (b43dc <_Z15updateLedStatusv+0xa0>)
   b4354:	2101      	movs	r1, #1
   b4356:	8818      	ldrh	r0, [r3, #0]
   b4358:	f003 fdc7 	bl	b7eea <digitalWrite>
      digitalWrite(greenPin, LOW);
   b435c:	2100      	movs	r1, #0
   b435e:	4b20      	ldr	r3, [pc, #128]	; (b43e0 <_Z15updateLedStatusv+0xa4>)
   b4360:	8818      	ldrh	r0, [r3, #0]
   b4362:	f003 fdc2 	bl	b7eea <digitalWrite>
      digitalWrite(bluePin, LOW);
   b4366:	2100      	movs	r1, #0
      digitalWrite(bluePin, HIGH);
    } 
  } else {
    digitalWrite(redPin, LOW);
    digitalWrite(greenPin, LOW);
    digitalWrite(bluePin, LOW);
   b4368:	4b1e      	ldr	r3, [pc, #120]	; (b43e4 <_Z15updateLedStatusv+0xa8>)
   b436a:	8818      	ldrh	r0, [r3, #0]
  }
}
   b436c:	b003      	add	sp, #12
   b436e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    digitalWrite(bluePin, LOW);
   b4372:	f003 bdba 	b.w	b7eea <digitalWrite>
   b4376:	491c      	ldr	r1, [pc, #112]	; (b43e8 <_Z15updateLedStatusv+0xac>)
   b4378:	4817      	ldr	r0, [pc, #92]	; (b43d8 <_Z15updateLedStatusv+0x9c>)
   b437a:	f000 fe72 	bl	b5062 <_ZNK6String6equalsEPKc>
    } else if (selectedColor == "GREEN") {
   b437e:	4604      	mov	r4, r0
   b4380:	b130      	cbz	r0, b4390 <_Z15updateLedStatusv+0x54>
      digitalWrite(redPin, LOW);
   b4382:	4b16      	ldr	r3, [pc, #88]	; (b43dc <_Z15updateLedStatusv+0xa0>)
   b4384:	4629      	mov	r1, r5
   b4386:	8818      	ldrh	r0, [r3, #0]
   b4388:	f003 fdaf 	bl	b7eea <digitalWrite>
      digitalWrite(greenPin, HIGH);
   b438c:	2101      	movs	r1, #1
   b438e:	e7e6      	b.n	b435e <_Z15updateLedStatusv+0x22>
   b4390:	4916      	ldr	r1, [pc, #88]	; (b43ec <_Z15updateLedStatusv+0xb0>)
   b4392:	4811      	ldr	r0, [pc, #68]	; (b43d8 <_Z15updateLedStatusv+0x9c>)
   b4394:	f000 fe65 	bl	b5062 <_ZNK6String6equalsEPKc>
    } else if (selectedColor == "BLUE") {
   b4398:	b1b8      	cbz	r0, b43ca <_Z15updateLedStatusv+0x8e>
      digitalWrite(redPin, LOW);
   b439a:	4b10      	ldr	r3, [pc, #64]	; (b43dc <_Z15updateLedStatusv+0xa0>)
   b439c:	4621      	mov	r1, r4
   b439e:	8818      	ldrh	r0, [r3, #0]
   b43a0:	f003 fda3 	bl	b7eea <digitalWrite>
      digitalWrite(greenPin, LOW);
   b43a4:	4b0e      	ldr	r3, [pc, #56]	; (b43e0 <_Z15updateLedStatusv+0xa4>)
   b43a6:	4621      	mov	r1, r4
   b43a8:	8818      	ldrh	r0, [r3, #0]
   b43aa:	f003 fd9e 	bl	b7eea <digitalWrite>
      digitalWrite(bluePin, HIGH);
   b43ae:	2101      	movs	r1, #1
   b43b0:	e7da      	b.n	b4368 <_Z15updateLedStatusv+0x2c>
    digitalWrite(redPin, LOW);
   b43b2:	4b0a      	ldr	r3, [pc, #40]	; (b43dc <_Z15updateLedStatusv+0xa0>)
   b43b4:	9101      	str	r1, [sp, #4]
   b43b6:	8818      	ldrh	r0, [r3, #0]
   b43b8:	f003 fd97 	bl	b7eea <digitalWrite>
    digitalWrite(greenPin, LOW);
   b43bc:	4b08      	ldr	r3, [pc, #32]	; (b43e0 <_Z15updateLedStatusv+0xa4>)
   b43be:	9901      	ldr	r1, [sp, #4]
   b43c0:	8818      	ldrh	r0, [r3, #0]
   b43c2:	f003 fd92 	bl	b7eea <digitalWrite>
    digitalWrite(bluePin, LOW);
   b43c6:	9901      	ldr	r1, [sp, #4]
   b43c8:	e7ce      	b.n	b4368 <_Z15updateLedStatusv+0x2c>
}
   b43ca:	b003      	add	sp, #12
   b43cc:	bd30      	pop	{r4, r5, pc}
   b43ce:	bf00      	nop
   b43d0:	2003e624 	.word	0x2003e624
   b43d4:	000b8666 	.word	0x000b8666
   b43d8:	2003e660 	.word	0x2003e660
   b43dc:	2003e594 	.word	0x2003e594
   b43e0:	2003e590 	.word	0x2003e590
   b43e4:	2003e58c 	.word	0x2003e58c
   b43e8:	000b866a 	.word	0x000b866a
   b43ec:	000b8670 	.word	0x000b8670

000b43f0 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv>:
void onTurnOnOffWrite(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b43f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b43f2:	460a      	mov	r2, r1
  String dataStr = String((char *)data, len);
   b43f4:	4601      	mov	r1, r0
   b43f6:	4668      	mov	r0, sp
   b43f8:	f000 fd9b 	bl	b4f32 <_ZN6StringC1EPKcj>
   b43fc:	4910      	ldr	r1, [pc, #64]	; (b4440 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   b43fe:	4668      	mov	r0, sp
   b4400:	f000 fe2f 	bl	b5062 <_ZNK6String6equalsEPKc>
  if (dataStr == "ON") {
   b4404:	4604      	mov	r4, r0
   b4406:	b158      	cbz	r0, b4420 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x30>
    isLedOn = true;
   b4408:	4b0e      	ldr	r3, [pc, #56]	; (b4444 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x54>)
    Log.info("LED IS ON");
   b440a:	490f      	ldr	r1, [pc, #60]	; (b4448 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   b440c:	480f      	ldr	r0, [pc, #60]	; (b444c <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x5c>)
    isLedOn = true;
   b440e:	2201      	movs	r2, #1
   b4410:	701a      	strb	r2, [r3, #0]
    Log.info("LED IS ON");
   b4412:	f7ff fe83 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
  String dataStr = String((char *)data, len);
   b4416:	4668      	mov	r0, sp
   b4418:	f000 fd2c 	bl	b4e74 <_ZN6StringD1Ev>
}
   b441c:	b004      	add	sp, #16
   b441e:	bd10      	pop	{r4, pc}
   b4420:	490b      	ldr	r1, [pc, #44]	; (b4450 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x60>)
   b4422:	4668      	mov	r0, sp
   b4424:	f000 fe1d 	bl	b5062 <_ZNK6String6equalsEPKc>
  } else if (dataStr == "OFF") {
   b4428:	2800      	cmp	r0, #0
   b442a:	d0f4      	beq.n	b4416 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x26>
    isLedOn = false;
   b442c:	4b05      	ldr	r3, [pc, #20]	; (b4444 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x54>)
    Log.info("LED IS OFF");
   b442e:	4909      	ldr	r1, [pc, #36]	; (b4454 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   b4430:	4806      	ldr	r0, [pc, #24]	; (b444c <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x5c>)
    isLedOn = false;
   b4432:	701c      	strb	r4, [r3, #0]
    Log.info("LED IS OFF");
   b4434:	f7ff fe72 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    updateLedStatus();
   b4438:	f7ff ff80 	bl	b433c <_Z15updateLedStatusv>
   b443c:	e7eb      	b.n	b4416 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv+0x26>
   b443e:	bf00      	nop
   b4440:	000b867c 	.word	0x000b867c
   b4444:	2003e624 	.word	0x2003e624
   b4448:	000b8675 	.word	0x000b8675
   b444c:	2003e6ac 	.word	0x2003e6ac
   b4450:	000b8686 	.word	0x000b8686
   b4454:	000b867f 	.word	0x000b867f

000b4458 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv>:
void onSelectColorWrite(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b4458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b445a:	460a      	mov	r2, r1
  String dataStr = String((char *)data, len);
   b445c:	4601      	mov	r1, r0
   b445e:	4668      	mov	r0, sp
   b4460:	f000 fd67 	bl	b4f32 <_ZN6StringC1EPKcj>
  Log.info("Received color: %s", dataStr.c_str());
   b4464:	4912      	ldr	r1, [pc, #72]	; (b44b0 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x58>)
   b4466:	4813      	ldr	r0, [pc, #76]	; (b44b4 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x5c>)
   b4468:	9a00      	ldr	r2, [sp, #0]
   b446a:	f7ff fe57 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
   b446e:	4912      	ldr	r1, [pc, #72]	; (b44b8 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x60>)
   b4470:	4668      	mov	r0, sp
   b4472:	f000 fdf6 	bl	b5062 <_ZNK6String6equalsEPKc>
  if (dataStr == "RED") {
   b4476:	b158      	cbz	r0, b4490 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x38>
    selectedColor = "RED";
   b4478:	490f      	ldr	r1, [pc, #60]	; (b44b8 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x60>)
    selectedColor = "OFF";
   b447a:	4810      	ldr	r0, [pc, #64]	; (b44bc <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   b447c:	f000 fda7 	bl	b4fce <_ZN6StringaSEPKc>
  updateLedStatus();
   b4480:	f7ff ff5c 	bl	b433c <_Z15updateLedStatusv>
  String dataStr = String((char *)data, len);
   b4484:	4668      	mov	r0, sp
   b4486:	f000 fcf5 	bl	b4e74 <_ZN6StringD1Ev>
}
   b448a:	b005      	add	sp, #20
   b448c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4490:	490b      	ldr	r1, [pc, #44]	; (b44c0 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   b4492:	4668      	mov	r0, sp
   b4494:	f000 fde5 	bl	b5062 <_ZNK6String6equalsEPKc>
  } else if (dataStr == "GREEN") {
   b4498:	b108      	cbz	r0, b449e <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x46>
    selectedColor = "GREEN";
   b449a:	4909      	ldr	r1, [pc, #36]	; (b44c0 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   b449c:	e7ed      	b.n	b447a <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x22>
   b449e:	4909      	ldr	r1, [pc, #36]	; (b44c4 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   b44a0:	4668      	mov	r0, sp
   b44a2:	f000 fdde 	bl	b5062 <_ZNK6String6equalsEPKc>
  } else if (dataStr == "BLUE") {
   b44a6:	b108      	cbz	r0, b44ac <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x54>
    selectedColor = "BLUE";
   b44a8:	4906      	ldr	r1, [pc, #24]	; (b44c4 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   b44aa:	e7e6      	b.n	b447a <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x22>
    selectedColor = "OFF";
   b44ac:	4906      	ldr	r1, [pc, #24]	; (b44c8 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   b44ae:	e7e4      	b.n	b447a <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv+0x22>
   b44b0:	000b868a 	.word	0x000b868a
   b44b4:	2003e6ac 	.word	0x2003e6ac
   b44b8:	000b8666 	.word	0x000b8666
   b44bc:	2003e660 	.word	0x2003e660
   b44c0:	000b866a 	.word	0x000b866a
   b44c4:	000b8670 	.word	0x000b8670
   b44c8:	000b8686 	.word	0x000b8686

000b44cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
{
   b44cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44d0:	4614      	mov	r4, r2
   b44d2:	b094      	sub	sp, #80	; 0x50
   b44d4:	4605      	mov	r5, r0
   b44d6:	460e      	mov	r6, r1
    Log.info("onDataReceived!!");
   b44d8:	483c      	ldr	r0, [pc, #240]	; (b45cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b44da:	493d      	ldr	r1, [pc, #244]	; (b45d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
{
   b44dc:	461f      	mov	r7, r3
    Log.info("onDataReceived!!");
   b44de:	f7ff fe1d 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b44e2:	4621      	mov	r1, r4
   b44e4:	a806      	add	r0, sp, #24
   b44e6:	f001 f8d7 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b44ea:	2100      	movs	r1, #0
   b44ec:	a806      	add	r0, sp, #24
   b44ee:	f000 fed9 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b44f2:	4621      	mov	r1, r4
   b44f4:	9005      	str	r0, [sp, #20]
   b44f6:	a808      	add	r0, sp, #32
   b44f8:	f001 f8ce 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b44fc:	2101      	movs	r1, #1
   b44fe:	a808      	add	r0, sp, #32
   b4500:	f000 fed0 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b4504:	4621      	mov	r1, r4
   b4506:	9004      	str	r0, [sp, #16]
   b4508:	a80a      	add	r0, sp, #40	; 0x28
   b450a:	f001 f8c5 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b450e:	2102      	movs	r1, #2
   b4510:	a80a      	add	r0, sp, #40	; 0x28
   b4512:	f000 fec7 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b4516:	4621      	mov	r1, r4
   b4518:	4680      	mov	r8, r0
   b451a:	a80c      	add	r0, sp, #48	; 0x30
   b451c:	f001 f8bc 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b4520:	2103      	movs	r1, #3
   b4522:	a80c      	add	r0, sp, #48	; 0x30
   b4524:	f000 febe 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b4528:	4621      	mov	r1, r4
   b452a:	4681      	mov	r9, r0
   b452c:	a80e      	add	r0, sp, #56	; 0x38
   b452e:	f001 f8b3 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b4532:	2104      	movs	r1, #4
   b4534:	a80e      	add	r0, sp, #56	; 0x38
   b4536:	f000 feb5 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b453a:	4621      	mov	r1, r4
   b453c:	4682      	mov	sl, r0
   b453e:	a810      	add	r0, sp, #64	; 0x40
   b4540:	f001 f8aa 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b4544:	2105      	movs	r1, #5
   b4546:	a810      	add	r0, sp, #64	; 0x40
   b4548:	f000 feac 	bl	b52a4 <_ZNK8particle10BleAddressixEh>
   b454c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4550:	e9cd a002 	strd	sl, r0, [sp, #8]
   b4554:	491f      	ldr	r1, [pc, #124]	; (b45d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   b4556:	481d      	ldr	r0, [pc, #116]	; (b45cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b4558:	e9cd 8900 	strd	r8, r9, [sp]
   b455c:	f7ff fdde 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
    String receivedData = String((char *)data, len);
   b4560:	4629      	mov	r1, r5
   b4562:	4632      	mov	r2, r6
   b4564:	a810      	add	r0, sp, #64	; 0x40
   b4566:	f000 fce4 	bl	b4f32 <_ZN6StringC1EPKcj>
   b456a:	491b      	ldr	r1, [pc, #108]	; (b45d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   b456c:	a810      	add	r0, sp, #64	; 0x40
   b456e:	f000 fd78 	bl	b5062 <_ZNK6String6equalsEPKc>
    if (receivedData == "ON" || receivedData == "OFF")
   b4572:	b1b0      	cbz	r0, b45a2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd6>
        onTurnOnOffWrite(data, len, peer, context); 
   b4574:	463b      	mov	r3, r7
   b4576:	4622      	mov	r2, r4
   b4578:	4631      	mov	r1, r6
   b457a:	4628      	mov	r0, r5
   b457c:	f7ff ff38 	bl	b43f0 <_Z16onTurnOnOffWritePKhjRKN8particle13BlePeerDeviceEPv>
   b4580:	4916      	ldr	r1, [pc, #88]	; (b45dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b4582:	a810      	add	r0, sp, #64	; 0x40
   b4584:	f000 fd6d 	bl	b5062 <_ZNK6String6equalsEPKc>
    if (receivedData == "RED" || receivedData == "GREEN" || receivedData == "BLUE")
   b4588:	b190      	cbz	r0, b45b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe4>
        onSelectColorWrite(data, len, peer, context); 
   b458a:	463b      	mov	r3, r7
   b458c:	4622      	mov	r2, r4
   b458e:	4631      	mov	r1, r6
   b4590:	4628      	mov	r0, r5
   b4592:	f7ff ff61 	bl	b4458 <_Z18onSelectColorWritePKhjRKN8particle13BlePeerDeviceEPv>
    String receivedData = String((char *)data, len);
   b4596:	a810      	add	r0, sp, #64	; 0x40
   b4598:	f000 fc6c 	bl	b4e74 <_ZN6StringD1Ev>
}
   b459c:	b014      	add	sp, #80	; 0x50
   b459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b45a2:	490f      	ldr	r1, [pc, #60]	; (b45e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>)
   b45a4:	a810      	add	r0, sp, #64	; 0x40
   b45a6:	f000 fd5c 	bl	b5062 <_ZNK6String6equalsEPKc>
    if (receivedData == "ON" || receivedData == "OFF")
   b45aa:	2800      	cmp	r0, #0
   b45ac:	d1e2      	bne.n	b4574 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
   b45ae:	e7e7      	b.n	b4580 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb4>
   b45b0:	490c      	ldr	r1, [pc, #48]	; (b45e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>)
   b45b2:	a810      	add	r0, sp, #64	; 0x40
   b45b4:	f000 fd55 	bl	b5062 <_ZNK6String6equalsEPKc>
    if (receivedData == "RED" || receivedData == "GREEN" || receivedData == "BLUE")
   b45b8:	2800      	cmp	r0, #0
   b45ba:	d1e6      	bne.n	b458a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbe>
   b45bc:	490a      	ldr	r1, [pc, #40]	; (b45e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x11c>)
   b45be:	a810      	add	r0, sp, #64	; 0x40
   b45c0:	f000 fd4f 	bl	b5062 <_ZNK6String6equalsEPKc>
   b45c4:	2800      	cmp	r0, #0
   b45c6:	d1e0      	bne.n	b458a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xbe>
   b45c8:	e7e5      	b.n	b4596 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xca>
   b45ca:	bf00      	nop
   b45cc:	2003e6ac 	.word	0x2003e6ac
   b45d0:	000b869d 	.word	0x000b869d
   b45d4:	000b86ae 	.word	0x000b86ae
   b45d8:	000b867c 	.word	0x000b867c
   b45dc:	000b8666 	.word	0x000b8666
   b45e0:	000b8686 	.word	0x000b8686
   b45e4:	000b866a 	.word	0x000b866a
   b45e8:	000b8670 	.word	0x000b8670

000b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b45ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b45ee:	e9d0 5300 	ldrd	r5, r3, [r0]
   b45f2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b45f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b45f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b45fa:	42ae      	cmp	r6, r5
   b45fc:	d004      	beq.n	b4608 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b45fe:	4628      	mov	r0, r5
   b4600:	f000 fc38 	bl	b4e74 <_ZN6StringD1Ev>
   b4604:	3514      	adds	r5, #20
   b4606:	e7f8      	b.n	b45fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4608:	6820      	ldr	r0, [r4, #0]
   b460a:	f000 fba1 	bl	b4d50 <free>
    AllocatorT::free(data_);
}
   b460e:	4620      	mov	r0, r4
   b4610:	bd70      	pop	{r4, r5, r6, pc}

000b4612 <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4616:	4690      	mov	r8, r2
   b4618:	b08e      	sub	sp, #56	; 0x38
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b461a:	2200      	movs	r2, #0
   b461c:	4606      	mov	r6, r0
      constexpr __shared_count() noexcept : _M_pi(0)
   b461e:	e9c0 2200 	strd	r2, r2, [r0]
   b4622:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4624:	a804      	add	r0, sp, #16
   b4626:	4619      	mov	r1, r3
        BleUuid sUuid(svcUuid);
   b4628:	ad14      	add	r5, sp, #80	; 0x50
        BleUuid cUuid(charUuid);
   b462a:	f000 ff51 	bl	b54d0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b462e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4630:	ac09      	add	r4, sp, #36	; 0x24
   b4632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4634:	682b      	ldr	r3, [r5, #0]
   b4636:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4638:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b463a:	9302      	str	r3, [sp, #8]
   b463c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b463e:	9301      	str	r3, [sp, #4]
   b4640:	ab09      	add	r3, sp, #36	; 0x24
   b4642:	9300      	str	r3, [sp, #0]
   b4644:	4630      	mov	r0, r6
   b4646:	ab04      	add	r3, sp, #16
   b4648:	4642      	mov	r2, r8
   b464a:	4639      	mov	r1, r7
   b464c:	f001 fcb0 	bl	b5fb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4650:	4630      	mov	r0, r6
   b4652:	b00e      	add	sp, #56	; 0x38
   b4654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4658:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b465a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b465c:	4604      	mov	r4, r0
   b465e:	460d      	mov	r5, r1
   b4660:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4662:	d916      	bls.n	b4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4664:	4290      	cmp	r0, r2
   b4666:	d215      	bcs.n	b4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4668:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b466c:	1a75      	subs	r5, r6, r1
   b466e:	f1a1 0714 	sub.w	r7, r1, #20
   b4672:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4674:	42b7      	cmp	r7, r6
   b4676:	d01c      	beq.n	b46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4678:	b12c      	cbz	r4, b4686 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b467a:	4631      	mov	r1, r6
   b467c:	4620      	mov	r0, r4
   b467e:	f000 fc81 	bl	b4f84 <_ZN6StringC1EOS_>
   b4682:	7c33      	ldrb	r3, [r6, #16]
   b4684:	7423      	strb	r3, [r4, #16]
   b4686:	4630      	mov	r0, r6
   b4688:	f000 fbf4 	bl	b4e74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b468c:	3e14      	subs	r6, #20
   b468e:	3c14      	subs	r4, #20
   b4690:	e7f0      	b.n	b4674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4692:	d00e      	beq.n	b46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4694:	42b5      	cmp	r5, r6
   b4696:	d00c      	beq.n	b46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4698:	b12c      	cbz	r4, b46a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b469a:	4629      	mov	r1, r5
   b469c:	4620      	mov	r0, r4
   b469e:	f000 fc71 	bl	b4f84 <_ZN6StringC1EOS_>
   b46a2:	7c2b      	ldrb	r3, [r5, #16]
   b46a4:	7423      	strb	r3, [r4, #16]
   b46a6:	4628      	mov	r0, r5
   b46a8:	f000 fbe4 	bl	b4e74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b46ac:	3514      	adds	r5, #20
   b46ae:	3414      	adds	r4, #20
   b46b0:	e7f0      	b.n	b4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b46b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b46b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b46b8:	2300      	movs	r3, #0
   b46ba:	e9c0 3300 	strd	r3, r3, [r0]
   b46be:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b46c0:	684f      	ldr	r7, [r1, #4]
   b46c2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b46c4:	4604      	mov	r4, r0
   b46c6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b46c8:	dd23      	ble.n	b4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b46ca:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b46ce:	fb08 f007 	mul.w	r0, r8, r7
   b46d2:	f000 fb35 	bl	b4d40 <malloc>
            if (!d) {
   b46d6:	4605      	mov	r5, r0
   b46d8:	b1d8      	cbz	r0, b4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b46da:	e9d4 1200 	ldrd	r1, r2, [r4]
   b46de:	fb08 1202 	mla	r2, r8, r2, r1
   b46e2:	f7ff ffb9 	bl	b4658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b46e6:	6820      	ldr	r0, [r4, #0]
   b46e8:	f000 fb32 	bl	b4d50 <free>
        data_ = d;
   b46ec:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b46ee:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b46f0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b46f4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b46f8:	45b8      	cmp	r8, r7
   b46fa:	d008      	beq.n	b470e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b46fc:	4639      	mov	r1, r7
   b46fe:	4628      	mov	r0, r5
   b4700:	f000 fc5a 	bl	b4fb8 <_ZN6StringC1ERKS_>
   b4704:	7c3b      	ldrb	r3, [r7, #16]
   b4706:	742b      	strb	r3, [r5, #16]
   b4708:	3714      	adds	r7, #20
   b470a:	3514      	adds	r5, #20
   b470c:	e7f4      	b.n	b46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b470e:	6873      	ldr	r3, [r6, #4]
   b4710:	6063      	str	r3, [r4, #4]
}
   b4712:	4620      	mov	r0, r4
   b4714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4718 <_GLOBAL__sub_I_logHandler>:
}
   b4718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b471c:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b471e:	2600      	movs	r6, #0
   b4720:	e9cd 6608 	strd	r6, r6, [sp, #32]
   b4724:	960a      	str	r6, [sp, #40]	; 0x28
            StreamLogHandler(Serial, level, filters) {
   b4726:	f002 fffd 	bl	b7724 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b472a:	4c3b      	ldr	r4, [pc, #236]	; (b4818 <_GLOBAL__sub_I_logHandler+0x100>)
BleCharacteristic turnOnOffCharacteristic("turnOnOff", BleCharacteristicProperty::WRITE_WO_RSP, "6E400003-B5A3-F393-E0A9-E50E24DCCA9E", customServiceUuid, onDataReceived, NULL);
   b472c:	f8df 9130 	ldr.w	r9, [pc, #304]	; b4860 <_GLOBAL__sub_I_logHandler+0x148>
   b4730:	4605      	mov	r5, r0
   b4732:	a908      	add	r1, sp, #32
   b4734:	a80b      	add	r0, sp, #44	; 0x2c
   b4736:	f7ff ffbd 	bl	b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b473a:	4627      	mov	r7, r4
        stream_(&stream) {
   b473c:	a90b      	add	r1, sp, #44	; 0x2c
   b473e:	a80e      	add	r0, sp, #56	; 0x38
   b4740:	f7ff ffb8 	bl	b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4744:	4b35      	ldr	r3, [pc, #212]	; (b481c <_GLOBAL__sub_I_logHandler+0x104>)
   b4746:	f847 3b04 	str.w	r3, [r7], #4
   b474a:	a90e      	add	r1, sp, #56	; 0x38
   b474c:	a811      	add	r0, sp, #68	; 0x44
   b474e:	f7ff ffb1 	bl	b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4752:	aa11      	add	r2, sp, #68	; 0x44
   b4754:	211e      	movs	r1, #30
   b4756:	4638      	mov	r0, r7
   b4758:	f002 fb64 	bl	b6e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b475c:	a811      	add	r0, sp, #68	; 0x44
   b475e:	f7ff ff45 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4762:	a80e      	add	r0, sp, #56	; 0x38
   b4764:	f7ff ff42 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4768:	4b2d      	ldr	r3, [pc, #180]	; (b4820 <_GLOBAL__sub_I_logHandler+0x108>)
   b476a:	6023      	str	r3, [r4, #0]
   b476c:	6225      	str	r5, [r4, #32]
   b476e:	a80b      	add	r0, sp, #44	; 0x2c
   b4770:	f7ff ff3c 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4774:	4b2b      	ldr	r3, [pc, #172]	; (b4824 <_GLOBAL__sub_I_logHandler+0x10c>)
   b4776:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4778:	f002 ffd4 	bl	b7724 <_Z16_fetch_usbserialv>
   b477c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4780:	f002 ffc0 	bl	b7704 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4784:	f002 f830 	bl	b67e8 <_ZN5spark10LogManager8instanceEv>
   b4788:	4621      	mov	r1, r4
   b478a:	f002 fa21 	bl	b6bd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b478e:	a808      	add	r0, sp, #32
   b4790:	f7ff ff2c 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED);
   b4794:	4631      	mov	r1, r6
   b4796:	2001      	movs	r0, #1
   b4798:	f000 fa4e 	bl	b4c38 <system_thread_set_state>
   b479c:	f000 f89a 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
BleUuid customServiceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b47a0:	4c21      	ldr	r4, [pc, #132]	; (b4828 <_GLOBAL__sub_I_logHandler+0x110>)
unsigned long currentMillis = millis();
   b47a2:	4b22      	ldr	r3, [pc, #136]	; (b482c <_GLOBAL__sub_I_logHandler+0x114>)
BleUuid customServiceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b47a4:	4922      	ldr	r1, [pc, #136]	; (b4830 <_GLOBAL__sub_I_logHandler+0x118>)
unsigned long currentMillis = millis();
   b47a6:	6018      	str	r0, [r3, #0]
BleUuid customServiceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b47a8:	4620      	mov	r0, r4
   b47aa:	f000 fe91 	bl	b54d0 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic turnOnOffCharacteristic("turnOnOff", BleCharacteristicProperty::WRITE_WO_RSP, "6E400003-B5A3-F393-E0A9-E50E24DCCA9E", customServiceUuid, onDataReceived, NULL);
   b47ae:	4625      	mov	r5, r4
   b47b0:	9606      	str	r6, [sp, #24]
   b47b2:	f8cd 9014 	str.w	r9, [sp, #20]
   b47b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b47b8:	466f      	mov	r7, sp
   b47ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b47bc:	f04f 0804 	mov.w	r8, #4
   b47c0:	682b      	ldr	r3, [r5, #0]
   b47c2:	603b      	str	r3, [r7, #0]
   b47c4:	4642      	mov	r2, r8
   b47c6:	4b1b      	ldr	r3, [pc, #108]	; (b4834 <_GLOBAL__sub_I_logHandler+0x11c>)
   b47c8:	491b      	ldr	r1, [pc, #108]	; (b4838 <_GLOBAL__sub_I_logHandler+0x120>)
   b47ca:	481c      	ldr	r0, [pc, #112]	; (b483c <_GLOBAL__sub_I_logHandler+0x124>)
   b47cc:	f7ff ff21 	bl	b4612 <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic selectColorCharacteristic("selectColor", BleCharacteristicProperty::WRITE_WO_RSP, "6E400002-B5A3-F393-E0A9-E50E24DCCA9E", customServiceUuid, onDataReceived, NULL);
   b47d0:	e9cd 9605 	strd	r9, r6, [sp, #20]
   b47d4:	46a4      	mov	ip, r4
   b47d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b47da:	466f      	mov	r7, sp
   b47dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b47de:	682b      	ldr	r3, [r5, #0]
   b47e0:	603b      	str	r3, [r7, #0]
   b47e2:	4642      	mov	r2, r8
   b47e4:	4b16      	ldr	r3, [pc, #88]	; (b4840 <_GLOBAL__sub_I_logHandler+0x128>)
   b47e6:	4917      	ldr	r1, [pc, #92]	; (b4844 <_GLOBAL__sub_I_logHandler+0x12c>)
   b47e8:	4817      	ldr	r0, [pc, #92]	; (b4848 <_GLOBAL__sub_I_logHandler+0x130>)
   b47ea:	f7ff ff12 	bl	b4612 <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic notifyStatusCharacteristic("notifyStatus", BleCharacteristicProperty::NOTIFY, "6E400004-B5A3-F393-E0A9-E50E24DCCA9E", customServiceUuid);
   b47ee:	e9cd 6605 	strd	r6, r6, [sp, #20]
   b47f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b47f4:	466e      	mov	r6, sp
   b47f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b47f8:	682b      	ldr	r3, [r5, #0]
   b47fa:	6033      	str	r3, [r6, #0]
   b47fc:	4913      	ldr	r1, [pc, #76]	; (b484c <_GLOBAL__sub_I_logHandler+0x134>)
   b47fe:	4b14      	ldr	r3, [pc, #80]	; (b4850 <_GLOBAL__sub_I_logHandler+0x138>)
   b4800:	4814      	ldr	r0, [pc, #80]	; (b4854 <_GLOBAL__sub_I_logHandler+0x13c>)
   b4802:	f04f 0210 	mov.w	r2, #16
   b4806:	f7ff ff04 	bl	b4612 <_ZN8particle17BleCharacteristicC1IPKcNS_7BleUuidEEES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
String selectedColor = "NONE";
   b480a:	4913      	ldr	r1, [pc, #76]	; (b4858 <_GLOBAL__sub_I_logHandler+0x140>)
   b480c:	4813      	ldr	r0, [pc, #76]	; (b485c <_GLOBAL__sub_I_logHandler+0x144>)
}
   b480e:	b015      	add	sp, #84	; 0x54
   b4810:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
String selectedColor = "NONE";
   b4814:	f000 bb79 	b.w	b4f0a <_ZN6StringC1EPK19__FlashStringHelper>
   b4818:	2003e62c 	.word	0x2003e62c
   b481c:	000b87a0 	.word	0x000b87a0
   b4820:	000b8a64 	.word	0x000b8a64
   b4824:	000b87b8 	.word	0x000b87b8
   b4828:	2003e610 	.word	0x2003e610
   b482c:	2003e60c 	.word	0x2003e60c
   b4830:	000b86e1 	.word	0x000b86e1
   b4834:	000b8706 	.word	0x000b8706
   b4838:	000b872b 	.word	0x000b872b
   b483c:	2003e670 	.word	0x2003e670
   b4840:	000b8735 	.word	0x000b8735
   b4844:	000b875a 	.word	0x000b875a
   b4848:	2003e658 	.word	0x2003e658
   b484c:	000b878b 	.word	0x000b878b
   b4850:	000b8766 	.word	0x000b8766
   b4854:	2003e650 	.word	0x2003e650
   b4858:	000b887f 	.word	0x000b887f
   b485c:	2003e660 	.word	0x2003e660
   b4860:	000b44cd 	.word	0x000b44cd

000b4864 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <netdb_freeaddrinfo+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	689b      	ldr	r3, [r3, #8]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030268 	.word	0x00030268

000b4874 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <netdb_getaddrinfo+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	68db      	ldr	r3, [r3, #12]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030268 	.word	0x00030268

000b4884 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <HAL_Pin_Mode+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	689b      	ldr	r3, [r3, #8]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	0003022c 	.word	0x0003022c

000b4894 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <HAL_Get_Pin_Mode+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	68db      	ldr	r3, [r3, #12]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	0003022c 	.word	0x0003022c

000b48a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <HAL_GPIO_Write+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	691b      	ldr	r3, [r3, #16]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	0003022c 	.word	0x0003022c

000b48b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <HAL_RNG_GetRandomNumber+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	685b      	ldr	r3, [r3, #4]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030218 	.word	0x00030218

000b48c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_Delay_Microseconds+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	68db      	ldr	r3, [r3, #12]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030218 	.word	0x00030218

000b48d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	695b      	ldr	r3, [r3, #20]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030218 	.word	0x00030218

000b48e4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <hal_ble_stack_init+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	689b      	ldr	r3, [r3, #8]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030278 	.word	0x00030278

000b48f4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <hal_ble_gap_set_advertising_data+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030278 	.word	0x00030278

000b4904 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <hal_ble_gap_set_scan_response_data+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030278 	.word	0x00030278

000b4914 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <hal_ble_gap_start_advertising+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030278 	.word	0x00030278

000b4924 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b03      	ldr	r3, [pc, #12]	; (b4934 <hal_ble_gap_disconnect+0x10>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b492e:	9301      	str	r3, [sp, #4]
   b4930:	bd08      	pop	{r3, pc}
   b4932:	0000      	.short	0x0000
   b4934:	00030278 	.word	0x00030278

000b4938 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b03      	ldr	r3, [pc, #12]	; (b4948 <hal_ble_gatt_server_add_service+0x10>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4942:	9301      	str	r3, [sp, #4]
   b4944:	bd08      	pop	{r3, pc}
   b4946:	0000      	.short	0x0000
   b4948:	00030278 	.word	0x00030278

000b494c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b03      	ldr	r3, [pc, #12]	; (b495c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4956:	9301      	str	r3, [sp, #4]
   b4958:	bd08      	pop	{r3, pc}
   b495a:	0000      	.short	0x0000
   b495c:	00030278 	.word	0x00030278

000b4960 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b03      	ldr	r3, [pc, #12]	; (b4970 <hal_ble_gatt_client_write_with_response+0x10>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b496a:	9301      	str	r3, [sp, #4]
   b496c:	bd08      	pop	{r3, pc}
   b496e:	0000      	.short	0x0000
   b4970:	00030278 	.word	0x00030278

000b4974 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b03      	ldr	r3, [pc, #12]	; (b4984 <hal_ble_gatt_client_write_without_response+0x10>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b497e:	9301      	str	r3, [sp, #4]
   b4980:	bd08      	pop	{r3, pc}
   b4982:	0000      	.short	0x0000
   b4984:	00030278 	.word	0x00030278

000b4988 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b03      	ldr	r3, [pc, #12]	; (b4998 <hal_ble_gatt_server_add_characteristic+0x10>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4992:	9301      	str	r3, [sp, #4]
   b4994:	bd08      	pop	{r3, pc}
   b4996:	0000      	.short	0x0000
   b4998:	00030278 	.word	0x00030278

000b499c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b03      	ldr	r3, [pc, #12]	; (b49ac <hal_ble_set_callback_on_periph_link_events+0x10>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b49a6:	9301      	str	r3, [sp, #4]
   b49a8:	bd08      	pop	{r3, pc}
   b49aa:	0000      	.short	0x0000
   b49ac:	00030278 	.word	0x00030278

000b49b0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b03      	ldr	r3, [pc, #12]	; (b49c0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b49ba:	9301      	str	r3, [sp, #4]
   b49bc:	bd08      	pop	{r3, pc}
   b49be:	0000      	.short	0x0000
   b49c0:	00030278 	.word	0x00030278

000b49c4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b03      	ldr	r3, [pc, #12]	; (b49d4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b49ce:	9301      	str	r3, [sp, #4]
   b49d0:	bd08      	pop	{r3, pc}
   b49d2:	0000      	.short	0x0000
   b49d4:	00030278 	.word	0x00030278

000b49d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <os_mutex_recursive_create+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030248 	.word	0x00030248

000b49e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <os_mutex_recursive_destroy+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030248 	.word	0x00030248

000b49f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <os_mutex_recursive_lock+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030248 	.word	0x00030248

000b4a08 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <os_mutex_recursive_unlock+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030248 	.word	0x00030248

000b4a18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <inet_inet_ntop+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	695b      	ldr	r3, [r3, #20]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030264 	.word	0x00030264

000b4a28 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <hal_usart_end+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	689b      	ldr	r3, [r3, #8]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	0003023c 	.word	0x0003023c

000b4a38 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <hal_usart_write+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	68db      	ldr	r3, [r3, #12]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	0003023c 	.word	0x0003023c

000b4a48 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_usart_available+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	691b      	ldr	r3, [r3, #16]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	0003023c 	.word	0x0003023c

000b4a58 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_usart_read+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	695b      	ldr	r3, [r3, #20]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	0003023c 	.word	0x0003023c

000b4a68 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_peek+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	699b      	ldr	r3, [r3, #24]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_flush+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	69db      	ldr	r3, [r3, #28]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_is_enabled+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6a1b      	ldr	r3, [r3, #32]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_available_data_for_write+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_usart_begin_config+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003023c 	.word	0x0003023c

000b4ab8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <hal_usart_init_ex+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003023c 	.word	0x0003023c

000b4ac8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <hal_i2c_write+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6a1b      	ldr	r3, [r3, #32]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	00030228 	.word	0x00030228

000b4ad8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <hal_i2c_available+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	00030228 	.word	0x00030228

000b4ae8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <hal_i2c_read+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	00030228 	.word	0x00030228

000b4af8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <hal_i2c_peek+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030228 	.word	0x00030228

000b4b08 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <hal_i2c_flush+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030228 	.word	0x00030228

000b4b18 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <hal_i2c_is_enabled+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030228 	.word	0x00030228

000b4b28 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <hal_i2c_init+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030228 	.word	0x00030228

000b4b38 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <hal_spi_init+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	69db      	ldr	r3, [r3, #28]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030230 	.word	0x00030230

000b4b48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <hal_spi_is_enabled+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6a1b      	ldr	r3, [r3, #32]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030230 	.word	0x00030230

000b4b58 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <HAL_USB_USART_Init+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	681b      	ldr	r3, [r3, #0]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	0003024c 	.word	0x0003024c

000b4b68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <HAL_USB_USART_Begin+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	685b      	ldr	r3, [r3, #4]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	0003024c 	.word	0x0003024c

000b4b78 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <HAL_USB_USART_End+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	689b      	ldr	r3, [r3, #8]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	0003024c 	.word	0x0003024c

000b4b88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <HAL_USB_USART_Available_Data+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	691b      	ldr	r3, [r3, #16]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	0003024c 	.word	0x0003024c

000b4b98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	695b      	ldr	r3, [r3, #20]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	0003024c 	.word	0x0003024c

000b4ba8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <HAL_USB_USART_Receive_Data+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	699b      	ldr	r3, [r3, #24]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	0003024c 	.word	0x0003024c

000b4bb8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <HAL_USB_USART_Send_Data+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	69db      	ldr	r3, [r3, #28]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003024c 	.word	0x0003024c

000b4bc8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <HAL_USB_USART_Flush_Data+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6a1b      	ldr	r3, [r3, #32]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	0003024c 	.word	0x0003024c

000b4bd8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <panic_+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030260 	.word	0x00030260

000b4be8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <log_message+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030260 	.word	0x00030260

000b4bf8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <log_message_v+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030260 	.word	0x00030260

000b4c08 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <log_level_name+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030260 	.word	0x00030260

000b4c18 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <log_set_callbacks+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030260 	.word	0x00030260

000b4c28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <set_system_mode+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	685b      	ldr	r3, [r3, #4]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030220 	.word	0x00030220

000b4c38 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <system_thread_set_state+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030220 	.word	0x00030220

000b4c48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b03      	ldr	r3, [pc, #12]	; (b4c58 <system_ctrl_set_app_request_handler+0x10>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c52:	9301      	str	r3, [sp, #4]
   b4c54:	bd08      	pop	{r3, pc}
   b4c56:	0000      	.short	0x0000
   b4c58:	00030220 	.word	0x00030220

000b4c5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b03      	ldr	r3, [pc, #12]	; (b4c6c <system_ctrl_set_result+0x10>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c66:	9301      	str	r3, [sp, #4]
   b4c68:	bd08      	pop	{r3, pc}
   b4c6a:	0000      	.short	0x0000
   b4c6c:	00030220 	.word	0x00030220

000b4c70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <network_connect+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	685b      	ldr	r3, [r3, #4]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030240 	.word	0x00030240

000b4c80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <network_connecting+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	689b      	ldr	r3, [r3, #8]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	00030240 	.word	0x00030240

000b4c90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <network_disconnect+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	68db      	ldr	r3, [r3, #12]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	00030240 	.word	0x00030240

000b4ca0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <network_ready+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	691b      	ldr	r3, [r3, #16]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	00030240 	.word	0x00030240

000b4cb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <network_on+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	695b      	ldr	r3, [r3, #20]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030240 	.word	0x00030240

000b4cc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <network_off+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	699b      	ldr	r3, [r3, #24]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030240 	.word	0x00030240

000b4cd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <network_listen+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	69db      	ldr	r3, [r3, #28]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030240 	.word	0x00030240

000b4ce0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <network_listening+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6a1b      	ldr	r3, [r3, #32]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030240 	.word	0x00030240

000b4cf0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <network_set_listen_timeout+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030240 	.word	0x00030240

000b4d00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <network_get_listen_timeout+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030240 	.word	0x00030240

000b4d10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <network_is_on+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030240 	.word	0x00030240

000b4d20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <network_is_off+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030240 	.word	0x00030240

000b4d30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030244 	.word	0x00030244

000b4d40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <malloc+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	681b      	ldr	r3, [r3, #0]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	0003021c 	.word	0x0003021c

000b4d50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <free+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	685b      	ldr	r3, [r3, #4]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	0003021c 	.word	0x0003021c

000b4d60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <realloc+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	689b      	ldr	r3, [r3, #8]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	0003021c 	.word	0x0003021c

000b4d70 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <vsnprintf+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	0003021c 	.word	0x0003021c

000b4d80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <abort+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	0003021c 	.word	0x0003021c

000b4d90 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <__errno+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	0003021c 	.word	0x0003021c

000b4da0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <__assert_func+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	0003021c 	.word	0x0003021c

000b4db0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <newlib_impure_ptr_callback+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	0003021c 	.word	0x0003021c

000b4dc0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4dc0:	2200      	movs	r2, #0
   b4dc2:	6840      	ldr	r0, [r0, #4]
   b4dc4:	4611      	mov	r1, r2
   b4dc6:	f7ff bf8b 	b.w	b4ce0 <network_listening>

000b4dca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dca:	2200      	movs	r2, #0
   b4dcc:	6840      	ldr	r0, [r0, #4]
   b4dce:	4611      	mov	r1, r2
   b4dd0:	f7ff bf96 	b.w	b4d00 <network_get_listen_timeout>

000b4dd4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4dd4:	6840      	ldr	r0, [r0, #4]
   b4dd6:	2200      	movs	r2, #0
   b4dd8:	f7ff bf8a 	b.w	b4cf0 <network_set_listen_timeout>

000b4ddc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ddc:	6840      	ldr	r0, [r0, #4]
   b4dde:	2200      	movs	r2, #0
   b4de0:	f081 0101 	eor.w	r1, r1, #1
   b4de4:	f7ff bf74 	b.w	b4cd0 <network_listen>

000b4de8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4de8:	2300      	movs	r3, #0
   b4dea:	6840      	ldr	r0, [r0, #4]
   b4dec:	461a      	mov	r2, r3
   b4dee:	4619      	mov	r1, r3
   b4df0:	f7ff bf66 	b.w	b4cc0 <network_off>

000b4df4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4df4:	2300      	movs	r3, #0
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	461a      	mov	r2, r3
   b4dfa:	4619      	mov	r1, r3
   b4dfc:	f7ff bf58 	b.w	b4cb0 <network_on>

000b4e00 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e00:	2200      	movs	r2, #0
   b4e02:	6840      	ldr	r0, [r0, #4]
   b4e04:	4611      	mov	r1, r2
   b4e06:	f7ff bf4b 	b.w	b4ca0 <network_ready>

000b4e0a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	6840      	ldr	r0, [r0, #4]
   b4e0e:	4611      	mov	r1, r2
   b4e10:	f7ff bf36 	b.w	b4c80 <network_connecting>

000b4e14 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	2200      	movs	r2, #0
   b4e18:	2102      	movs	r1, #2
   b4e1a:	f7ff bf39 	b.w	b4c90 <network_disconnect>

000b4e1e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e1e:	2300      	movs	r3, #0
   b4e20:	6840      	ldr	r0, [r0, #4]
   b4e22:	461a      	mov	r2, r3
   b4e24:	f7ff bf24 	b.w	b4c70 <network_connect>

000b4e28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e28:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e2a:	2203      	movs	r2, #3
   b4e2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e2e:	4a02      	ldr	r2, [pc, #8]	; (b4e38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e30:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e32:	4770      	bx	lr
   b4e34:	2003e678 	.word	0x2003e678
   b4e38:	000b87d0 	.word	0x000b87d0

000b4e3c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e3c:	b510      	push	{r4, lr}
   b4e3e:	4604      	mov	r4, r0
   b4e40:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e42:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e44:	f7ff fe78 	bl	b4b38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e48:	2300      	movs	r3, #0
   b4e4a:	6063      	str	r3, [r4, #4]
}
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	bd10      	pop	{r4, pc}

000b4e50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e50:	4b05      	ldr	r3, [pc, #20]	; (b4e68 <_GLOBAL__sub_I_System+0x18>)
   b4e52:	2202      	movs	r2, #2
   b4e54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e56:	4b05      	ldr	r3, [pc, #20]	; (b4e6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e58:	4a05      	ldr	r2, [pc, #20]	; (b4e70 <_GLOBAL__sub_I_System+0x20>)
   b4e5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e5c:	2000      	movs	r0, #0
   b4e5e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e62:	f7ff bee1 	b.w	b4c28 <set_system_mode>
   b4e66:	bf00      	nop
   b4e68:	2003e68c 	.word	0x2003e68c
   b4e6c:	2003e680 	.word	0x2003e680
   b4e70:	ffff0000 	.word	0xffff0000

000b4e74 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4e74:	b510      	push	{r4, lr}
   b4e76:	4604      	mov	r4, r0
{
	free(buffer);
   b4e78:	6800      	ldr	r0, [r0, #0]
   b4e7a:	f7ff ff69 	bl	b4d50 <free>
}
   b4e7e:	4620      	mov	r0, r4
   b4e80:	bd10      	pop	{r4, pc}

000b4e82 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4e82:	b510      	push	{r4, lr}
   b4e84:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4e86:	6800      	ldr	r0, [r0, #0]
   b4e88:	b108      	cbz	r0, b4e8e <_ZN6String10invalidateEv+0xc>
   b4e8a:	f7ff ff61 	bl	b4d50 <free>
	buffer = NULL;
   b4e8e:	2300      	movs	r3, #0
	capacity = len = 0;
   b4e90:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4e94:	6023      	str	r3, [r4, #0]
}
   b4e96:	bd10      	pop	{r4, pc}

000b4e98 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4e98:	b538      	push	{r3, r4, r5, lr}
   b4e9a:	4604      	mov	r4, r0
   b4e9c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4e9e:	6800      	ldr	r0, [r0, #0]
   b4ea0:	3101      	adds	r1, #1
   b4ea2:	f7ff ff5d 	bl	b4d60 <realloc>
	if (newbuffer) {
   b4ea6:	b110      	cbz	r0, b4eae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4ea8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4eac:	2001      	movs	r0, #1
	}
	return 0;
}
   b4eae:	bd38      	pop	{r3, r4, r5, pc}

000b4eb0 <_ZN6String7reserveEj>:
{
   b4eb0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4eb2:	6803      	ldr	r3, [r0, #0]
{
   b4eb4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4eb6:	b123      	cbz	r3, b4ec2 <_ZN6String7reserveEj+0x12>
   b4eb8:	6843      	ldr	r3, [r0, #4]
   b4eba:	428b      	cmp	r3, r1
   b4ebc:	d301      	bcc.n	b4ec2 <_ZN6String7reserveEj+0x12>
   b4ebe:	2001      	movs	r0, #1
}
   b4ec0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	f7ff ffe8 	bl	b4e98 <_ZN6String12changeBufferEj>
   b4ec8:	2800      	cmp	r0, #0
   b4eca:	d0f9      	beq.n	b4ec0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4ecc:	68a3      	ldr	r3, [r4, #8]
   b4ece:	2b00      	cmp	r3, #0
   b4ed0:	d1f5      	bne.n	b4ebe <_ZN6String7reserveEj+0xe>
   b4ed2:	6822      	ldr	r2, [r4, #0]
   b4ed4:	7013      	strb	r3, [r2, #0]
   b4ed6:	e7f2      	b.n	b4ebe <_ZN6String7reserveEj+0xe>

000b4ed8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4eda:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4edc:	4611      	mov	r1, r2
   b4ede:	9201      	str	r2, [sp, #4]
{
   b4ee0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4ee2:	f7ff ffe5 	bl	b4eb0 <_ZN6String7reserveEj>
   b4ee6:	9a01      	ldr	r2, [sp, #4]
   b4ee8:	b928      	cbnz	r0, b4ef6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4eea:	4620      	mov	r0, r4
   b4eec:	f7ff ffc9 	bl	b4e82 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	b003      	add	sp, #12
   b4ef4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4ef6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4ef8:	4629      	mov	r1, r5
   b4efa:	6820      	ldr	r0, [r4, #0]
   b4efc:	f003 f9c6 	bl	b828c <memcpy>
	buffer[len] = 0;
   b4f00:	6822      	ldr	r2, [r4, #0]
   b4f02:	68a3      	ldr	r3, [r4, #8]
   b4f04:	2100      	movs	r1, #0
   b4f06:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4f08:	e7f2      	b.n	b4ef0 <_ZN6String4copyEPKcj+0x18>

000b4f0a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4f0a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4f0c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4f0e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4f12:	4604      	mov	r4, r0
	len = 0;
   b4f14:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4f16:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4f18:	b141      	cbz	r1, b4f2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4f1a:	4608      	mov	r0, r1
   b4f1c:	9101      	str	r1, [sp, #4]
   b4f1e:	f003 fa3c 	bl	b839a <strlen>
   b4f22:	9901      	ldr	r1, [sp, #4]
   b4f24:	4602      	mov	r2, r0
   b4f26:	4620      	mov	r0, r4
   b4f28:	f7ff ffd6 	bl	b4ed8 <_ZN6String4copyEPKcj>
}
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	b002      	add	sp, #8
   b4f30:	bd10      	pop	{r4, pc}

000b4f32 <_ZN6StringC1EPKcj>:
	buffer = NULL;
   b4f32:	2300      	movs	r3, #0
String::String(const char *cstr, unsigned int length)
   b4f34:	b510      	push	{r4, lr}
	capacity = 0;
   b4f36:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr, unsigned int length)
   b4f3a:	4604      	mov	r4, r0
	len = 0;
   b4f3c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4f3e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, length);
   b4f40:	b109      	cbz	r1, b4f46 <_ZN6StringC1EPKcj+0x14>
   b4f42:	f7ff ffc9 	bl	b4ed8 <_ZN6String4copyEPKcj>
}
   b4f46:	4620      	mov	r0, r4
   b4f48:	bd10      	pop	{r4, pc}

000b4f4a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b4f4a:	b538      	push	{r3, r4, r5, lr}
   b4f4c:	4605      	mov	r5, r0
	if (buffer) {
   b4f4e:	6800      	ldr	r0, [r0, #0]
{
   b4f50:	460c      	mov	r4, r1
	if (buffer) {
   b4f52:	b168      	cbz	r0, b4f70 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b4f54:	686a      	ldr	r2, [r5, #4]
   b4f56:	688b      	ldr	r3, [r1, #8]
   b4f58:	429a      	cmp	r2, r3
   b4f5a:	d307      	bcc.n	b4f6c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b4f5c:	6809      	ldr	r1, [r1, #0]
   b4f5e:	f003 fa14 	bl	b838a <strcpy>
			len = rhs.len;
   b4f62:	68a3      	ldr	r3, [r4, #8]
   b4f64:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b4f66:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b4f68:	60a3      	str	r3, [r4, #8]
}
   b4f6a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b4f6c:	f7ff fef0 	bl	b4d50 <free>
	buffer = rhs.buffer;
   b4f70:	6823      	ldr	r3, [r4, #0]
   b4f72:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b4f74:	6863      	ldr	r3, [r4, #4]
   b4f76:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b4f78:	68a3      	ldr	r3, [r4, #8]
   b4f7a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b4f7c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b4f7e:	e9c4 3300 	strd	r3, r3, [r4]
   b4f82:	e7f1      	b.n	b4f68 <_ZN6String4moveERS_+0x1e>

000b4f84 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4f84:	b510      	push	{r4, lr}
	buffer = NULL;
   b4f86:	2300      	movs	r3, #0
	capacity = 0;
   b4f88:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b4f8c:	4604      	mov	r4, r0
	len = 0;
   b4f8e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4f90:	7303      	strb	r3, [r0, #12]
	move(rval);
   b4f92:	f7ff ffda 	bl	b4f4a <_ZN6String4moveERS_>
}
   b4f96:	4620      	mov	r0, r4
   b4f98:	bd10      	pop	{r4, pc}

000b4f9a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b4f9a:	4288      	cmp	r0, r1
{
   b4f9c:	b510      	push	{r4, lr}
   b4f9e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4fa0:	d005      	beq.n	b4fae <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4fa2:	680b      	ldr	r3, [r1, #0]
   b4fa4:	b12b      	cbz	r3, b4fb2 <_ZN6StringaSERKS_+0x18>
   b4fa6:	688a      	ldr	r2, [r1, #8]
   b4fa8:	4619      	mov	r1, r3
   b4faa:	f7ff ff95 	bl	b4ed8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4fae:	4620      	mov	r0, r4
   b4fb0:	bd10      	pop	{r4, pc}
	else invalidate();
   b4fb2:	f7ff ff66 	bl	b4e82 <_ZN6String10invalidateEv>
   b4fb6:	e7fa      	b.n	b4fae <_ZN6StringaSERKS_+0x14>

000b4fb8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4fb8:	b510      	push	{r4, lr}
	buffer = NULL;
   b4fba:	2300      	movs	r3, #0
String::String(const String &value)
   b4fbc:	4604      	mov	r4, r0
	capacity = 0;
   b4fbe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b4fc2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4fc4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4fc6:	f7ff ffe8 	bl	b4f9a <_ZN6StringaSERKS_>
}
   b4fca:	4620      	mov	r0, r4
   b4fcc:	bd10      	pop	{r4, pc}

000b4fce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4fce:	b513      	push	{r0, r1, r4, lr}
   b4fd0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4fd2:	b159      	cbz	r1, b4fec <_ZN6StringaSEPKc+0x1e>
   b4fd4:	4608      	mov	r0, r1
   b4fd6:	9101      	str	r1, [sp, #4]
   b4fd8:	f003 f9df 	bl	b839a <strlen>
   b4fdc:	9901      	ldr	r1, [sp, #4]
   b4fde:	4602      	mov	r2, r0
   b4fe0:	4620      	mov	r0, r4
   b4fe2:	f7ff ff79 	bl	b4ed8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	b002      	add	sp, #8
   b4fea:	bd10      	pop	{r4, pc}
	else invalidate();
   b4fec:	f7ff ff49 	bl	b4e82 <_ZN6String10invalidateEv>
   b4ff0:	e7f9      	b.n	b4fe6 <_ZN6StringaSEPKc+0x18>

000b4ff2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4ff2:	b570      	push	{r4, r5, r6, lr}
   b4ff4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4ff6:	460e      	mov	r6, r1
   b4ff8:	b909      	cbnz	r1, b4ffe <_ZN6String6concatEPKcj+0xc>
   b4ffa:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4ffc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4ffe:	b16a      	cbz	r2, b501c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5000:	6884      	ldr	r4, [r0, #8]
   b5002:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5004:	4621      	mov	r1, r4
   b5006:	f7ff ff53 	bl	b4eb0 <_ZN6String7reserveEj>
   b500a:	2800      	cmp	r0, #0
   b500c:	d0f5      	beq.n	b4ffa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b500e:	6828      	ldr	r0, [r5, #0]
   b5010:	68ab      	ldr	r3, [r5, #8]
   b5012:	4631      	mov	r1, r6
   b5014:	4418      	add	r0, r3
   b5016:	f003 f9b8 	bl	b838a <strcpy>
	len = newlen;
   b501a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b501c:	2001      	movs	r0, #1
   b501e:	e7ed      	b.n	b4ffc <_ZN6String6concatEPKcj+0xa>

000b5020 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5020:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5022:	688a      	ldr	r2, [r1, #8]
   b5024:	6809      	ldr	r1, [r1, #0]
{
   b5026:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5028:	f7ff ffe3 	bl	b4ff2 <_ZN6String6concatEPKcj>
   b502c:	b910      	cbnz	r0, b5034 <_ZplRK15StringSumHelperRK6String+0x14>
   b502e:	4620      	mov	r0, r4
   b5030:	f7ff ff27 	bl	b4e82 <_ZN6String10invalidateEv>
	return a;
}
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}

000b5038 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5038:	b513      	push	{r0, r1, r4, lr}
   b503a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b503c:	b929      	cbnz	r1, b504a <_ZplRK15StringSumHelperPKc+0x12>
   b503e:	4620      	mov	r0, r4
   b5040:	f7ff ff1f 	bl	b4e82 <_ZN6String10invalidateEv>
	return a;
}
   b5044:	4620      	mov	r0, r4
   b5046:	b002      	add	sp, #8
   b5048:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b504a:	4608      	mov	r0, r1
   b504c:	9101      	str	r1, [sp, #4]
   b504e:	f003 f9a4 	bl	b839a <strlen>
   b5052:	9901      	ldr	r1, [sp, #4]
   b5054:	4602      	mov	r2, r0
   b5056:	4620      	mov	r0, r4
   b5058:	f7ff ffcb 	bl	b4ff2 <_ZN6String6concatEPKcj>
   b505c:	2800      	cmp	r0, #0
   b505e:	d0ee      	beq.n	b503e <_ZplRK15StringSumHelperPKc+0x6>
   b5060:	e7f0      	b.n	b5044 <_ZplRK15StringSumHelperPKc+0xc>

000b5062 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b5062:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5064:	6882      	ldr	r2, [r0, #8]
   b5066:	b93a      	cbnz	r2, b5078 <_ZNK6String6equalsEPKc+0x16>
   b5068:	b121      	cbz	r1, b5074 <_ZNK6String6equalsEPKc+0x12>
   b506a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b506c:	fab0 f080 	clz	r0, r0
   b5070:	0940      	lsrs	r0, r0, #5
   b5072:	e000      	b.n	b5076 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5074:	2001      	movs	r0, #1
}
   b5076:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b5078:	6800      	ldr	r0, [r0, #0]
   b507a:	b909      	cbnz	r1, b5080 <_ZNK6String6equalsEPKc+0x1e>
   b507c:	7800      	ldrb	r0, [r0, #0]
   b507e:	e7f5      	b.n	b506c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b5080:	f003 f979 	bl	b8376 <strcmp>
   b5084:	e7f2      	b.n	b506c <_ZNK6String6equalsEPKc+0xa>

000b5086 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b5086:	b558      	push	{r3, r4, r6, lr}
   b5088:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b508a:	b12a      	cbz	r2, b5098 <_ZNK6String8getBytesEPhjj+0x12>
   b508c:	b121      	cbz	r1, b5098 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b508e:	6884      	ldr	r4, [r0, #8]
   b5090:	42a3      	cmp	r3, r4
   b5092:	d302      	bcc.n	b509a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b5094:	2300      	movs	r3, #0
   b5096:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b5098:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b509a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b509c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b509e:	6801      	ldr	r1, [r0, #0]
   b50a0:	4294      	cmp	r4, r2
   b50a2:	bf28      	it	cs
   b50a4:	4614      	movcs	r4, r2
   b50a6:	4419      	add	r1, r3
   b50a8:	4622      	mov	r2, r4
   b50aa:	4630      	mov	r0, r6
   b50ac:	f003 f991 	bl	b83d2 <strncpy>
	buf[n] = 0;
   b50b0:	2300      	movs	r3, #0
   b50b2:	5533      	strb	r3, [r6, r4]
   b50b4:	e7f0      	b.n	b5098 <_ZNK6String8getBytesEPhjj+0x12>

000b50b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b50b6:	4770      	bx	lr

000b50b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b50b8:	4770      	bx	lr

000b50ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b50ba:	4770      	bx	lr

000b50bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b50bc:	4770      	bx	lr
	...

000b50c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b50c0:	4b06      	ldr	r3, [pc, #24]	; (b50dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b50c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b50c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b50c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b50ca:	d005      	beq.n	b50d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b50cc:	4608      	mov	r0, r1
   b50ce:	f002 ffad 	bl	b802c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b50d2:	2800      	cmp	r0, #0
   b50d4:	bf08      	it	eq
   b50d6:	2400      	moveq	r4, #0
      }
   b50d8:	4620      	mov	r0, r4
   b50da:	bd10      	pop	{r4, pc}
   b50dc:	000b8994 	.word	0x000b8994

000b50e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b50e0:	4b06      	ldr	r3, [pc, #24]	; (b50fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b50e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b50e4:	b510      	push	{r4, lr}
   b50e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b50ea:	d005      	beq.n	b50f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b50ec:	4608      	mov	r0, r1
   b50ee:	f002 ff9d 	bl	b802c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b50f2:	2800      	cmp	r0, #0
   b50f4:	bf08      	it	eq
   b50f6:	2400      	moveq	r4, #0
      }
   b50f8:	4620      	mov	r0, r4
   b50fa:	bd10      	pop	{r4, pc}
   b50fc:	000b8994 	.word	0x000b8994

000b5100 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5100:	4b06      	ldr	r3, [pc, #24]	; (b511c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5102:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5104:	b510      	push	{r4, lr}
   b5106:	f100 040c 	add.w	r4, r0, #12
	    ||
   b510a:	d005      	beq.n	b5118 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b510c:	4608      	mov	r0, r1
   b510e:	f002 ff8d 	bl	b802c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5112:	2800      	cmp	r0, #0
   b5114:	bf08      	it	eq
   b5116:	2400      	moveq	r4, #0
      }
   b5118:	4620      	mov	r0, r4
   b511a:	bd10      	pop	{r4, pc}
   b511c:	000b8994 	.word	0x000b8994

000b5120 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5120:	b510      	push	{r4, lr}
   b5122:	2168      	movs	r1, #104	; 0x68
   b5124:	4604      	mov	r4, r0
   b5126:	f7fe ffb8 	bl	b409a <_ZdlPvj>
   b512a:	4620      	mov	r0, r4
   b512c:	bd10      	pop	{r4, pc}

000b512e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b512e:	b510      	push	{r4, lr}
   b5130:	2128      	movs	r1, #40	; 0x28
   b5132:	4604      	mov	r4, r0
   b5134:	f7fe ffb1 	bl	b409a <_ZdlPvj>
   b5138:	4620      	mov	r0, r4
   b513a:	bd10      	pop	{r4, pc}

000b513c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b513c:	b510      	push	{r4, lr}
   b513e:	2130      	movs	r1, #48	; 0x30
   b5140:	4604      	mov	r4, r0
   b5142:	f7fe ffaa 	bl	b409a <_ZdlPvj>
   b5146:	4620      	mov	r0, r4
   b5148:	bd10      	pop	{r4, pc}

000b514a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b514a:	2168      	movs	r1, #104	; 0x68
   b514c:	f7fe bfa5 	b.w	b409a <_ZdlPvj>

000b5150 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5150:	2128      	movs	r1, #40	; 0x28
   b5152:	f7fe bfa2 	b.w	b409a <_ZdlPvj>

000b5156 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5156:	2130      	movs	r1, #48	; 0x30
   b5158:	f7fe bf9f 	b.w	b409a <_ZdlPvj>

000b515c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b515c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b515e:	2500      	movs	r5, #0
   b5160:	1cec      	adds	r4, r5, #3
   b5162:	428c      	cmp	r4, r1
   b5164:	d80d      	bhi.n	b5182 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5166:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5168:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b516a:	5d87      	ldrb	r7, [r0, r6]
   b516c:	4297      	cmp	r7, r2
   b516e:	d105      	bne.n	b517c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5170:	4426      	add	r6, r4
   b5172:	42b1      	cmp	r1, r6
   b5174:	d305      	bcc.n	b5182 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5176:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5178:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b517c:	3401      	adds	r4, #1
   b517e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5180:	e7ee      	b.n	b5160 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5182:	2000      	movs	r0, #0
   b5184:	e7f9      	b.n	b517a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5188 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5188:	4a02      	ldr	r2, [pc, #8]	; (b5194 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b518a:	4903      	ldr	r1, [pc, #12]	; (b5198 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b518c:	200a      	movs	r0, #10
   b518e:	f7ff bd23 	b.w	b4bd8 <panic_>
   b5192:	bf00      	nop
   b5194:	000b48c5 	.word	0x000b48c5
   b5198:	000b8804 	.word	0x000b8804

000b519c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b519c:	b430      	push	{r4, r5}
   b519e:	460d      	mov	r5, r1
   b51a0:	4611      	mov	r1, r2
   b51a2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b51a4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b51a6:	6809      	ldr	r1, [r1, #0]
   b51a8:	6828      	ldr	r0, [r5, #0]
   b51aa:	e9d3 4300 	ldrd	r4, r3, [r3]
   b51ae:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b51b0:	bc30      	pop	{r4, r5}
   b51b2:	4760      	bx	ip

000b51b4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b51b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b51b6:	b538      	push	{r3, r4, r5, lr}
   b51b8:	4604      	mov	r4, r0
	switch (__op)
   b51ba:	d102      	bne.n	b51c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b51bc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b51be:	6023      	str	r3, [r4, #0]
	}
   b51c0:	e003      	b.n	b51ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b51c2:	2a02      	cmp	r2, #2
   b51c4:	d003      	beq.n	b51ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b51c6:	2a03      	cmp	r2, #3
   b51c8:	d00d      	beq.n	b51e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b51ca:	2000      	movs	r0, #0
   b51cc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b51ce:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b51d0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b51d2:	f7fe ff5e 	bl	b4092 <_Znwj>
   b51d6:	4603      	mov	r3, r0
   b51d8:	2800      	cmp	r0, #0
   b51da:	d0f0      	beq.n	b51be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b51dc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b51e0:	e883 0003 	stmia.w	r3, {r0, r1}
   b51e4:	e7eb      	b.n	b51be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b51e6:	6800      	ldr	r0, [r0, #0]
   b51e8:	2800      	cmp	r0, #0
   b51ea:	d0ee      	beq.n	b51ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b51ec:	2108      	movs	r1, #8
   b51ee:	f7fe ff54 	bl	b409a <_ZdlPvj>
   b51f2:	e7ea      	b.n	b51ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b51f4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b51f4:	b510      	push	{r4, lr}
      if (_M_manager)
   b51f6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b51f8:	4604      	mov	r4, r0
      if (_M_manager)
   b51fa:	b113      	cbz	r3, b5202 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b51fc:	2203      	movs	r2, #3
   b51fe:	4601      	mov	r1, r0
   b5200:	4798      	blx	r3
    }
   b5202:	4620      	mov	r0, r4
   b5204:	bd10      	pop	{r4, pc}

000b5206 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5206:	b510      	push	{r4, lr}
   b5208:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b520a:	3058      	adds	r0, #88	; 0x58
   b520c:	f7ff fff2 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5210:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5218:	f7ff be2c 	b.w	b4e74 <_ZN6StringD1Ev>

000b521c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b521c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b521e:	6843      	ldr	r3, [r0, #4]
   b5220:	3b01      	subs	r3, #1
    {
   b5222:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5224:	6043      	str	r3, [r0, #4]
   b5226:	b963      	cbnz	r3, b5242 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5228:	6803      	ldr	r3, [r0, #0]
   b522a:	689b      	ldr	r3, [r3, #8]
   b522c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b522e:	68a3      	ldr	r3, [r4, #8]
   b5230:	3b01      	subs	r3, #1
   b5232:	60a3      	str	r3, [r4, #8]
   b5234:	b92b      	cbnz	r3, b5242 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5236:	6823      	ldr	r3, [r4, #0]
   b5238:	4620      	mov	r0, r4
   b523a:	68db      	ldr	r3, [r3, #12]
    }
   b523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5240:	4718      	bx	r3
    }
   b5242:	bd10      	pop	{r4, pc}

000b5244 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5248:	b2da      	uxtb	r2, r3
   b524a:	2a09      	cmp	r2, #9
   b524c:	d801      	bhi.n	b5252 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b524e:	4618      	mov	r0, r3
   b5250:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5252:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5256:	2b05      	cmp	r3, #5
   b5258:	d801      	bhi.n	b525e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b525a:	3857      	subs	r0, #87	; 0x57
   b525c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b525e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5262:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5264:	bf94      	ite	ls
   b5266:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5268:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b526c:	4770      	bx	lr
	...

000b5270 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5270:	b510      	push	{r4, lr}
            locked_(false) {
   b5272:	2300      	movs	r3, #0
   b5274:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5276:	4b04      	ldr	r3, [pc, #16]	; (b5288 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5278:	4604      	mov	r4, r0
   b527a:	6818      	ldr	r0, [r3, #0]
   b527c:	f7ff fbbc 	bl	b49f8 <os_mutex_recursive_lock>
        locked_ = true;
   b5280:	2301      	movs	r3, #1
   b5282:	7023      	strb	r3, [r4, #0]
    }
   b5284:	4620      	mov	r0, r4
   b5286:	bd10      	pop	{r4, pc}
   b5288:	2003e698 	.word	0x2003e698

000b528c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b528c:	b510      	push	{r4, lr}
        if (locked_) {
   b528e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5290:	4604      	mov	r4, r0
        if (locked_) {
   b5292:	b11b      	cbz	r3, b529c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5294:	4b02      	ldr	r3, [pc, #8]	; (b52a0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5296:	6818      	ldr	r0, [r3, #0]
   b5298:	f7ff fbb6 	bl	b4a08 <os_mutex_recursive_unlock>
    }
   b529c:	4620      	mov	r0, r4
   b529e:	bd10      	pop	{r4, pc}
   b52a0:	2003e698 	.word	0x2003e698

000b52a4 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b52a4:	2905      	cmp	r1, #5
    return address_.addr[i];
   b52a6:	bf94      	ite	ls
   b52a8:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b52aa:	2000      	movhi	r0, #0
}
   b52ac:	4770      	bx	lr

000b52ae <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b52ae:	b082      	sub	sp, #8
   b52b0:	4603      	mov	r3, r0
    address_ = addr;
   b52b2:	6808      	ldr	r0, [r1, #0]
   b52b4:	6849      	ldr	r1, [r1, #4]
   b52b6:	466a      	mov	r2, sp
   b52b8:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b52ba:	466a      	mov	r2, sp
   b52bc:	ca03      	ldmia	r2!, {r0, r1}
   b52be:	6018      	str	r0, [r3, #0]
}
   b52c0:	4618      	mov	r0, r3
    address_ = addr.address_;
   b52c2:	6059      	str	r1, [r3, #4]
}
   b52c4:	b002      	add	sp, #8
   b52c6:	4770      	bx	lr

000b52c8 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b52c8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b52ca:	7982      	ldrb	r2, [r0, #6]
   b52cc:	798b      	ldrb	r3, [r1, #6]
   b52ce:	429a      	cmp	r2, r3
   b52d0:	d106      	bne.n	b52e0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b52d2:	2206      	movs	r2, #6
   b52d4:	f002 ffca 	bl	b826c <memcmp>
   b52d8:	fab0 f080 	clz	r0, r0
   b52dc:	0940      	lsrs	r0, r0, #5
}
   b52de:	bd08      	pop	{r3, pc}
    return false;
   b52e0:	2000      	movs	r0, #0
   b52e2:	e7fc      	b.n	b52de <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b52e4 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b52e4:	f04f 33ff 	mov.w	r3, #4294967295
   b52e8:	6003      	str	r3, [r0, #0]
   b52ea:	8083      	strh	r3, [r0, #4]
}
   b52ec:	2000      	movs	r0, #0
   b52ee:	4770      	bx	lr

000b52f0 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4602      	mov	r2, r0
        : address_{} {
   b52f4:	2100      	movs	r1, #0
   b52f6:	6001      	str	r1, [r0, #0]
   b52f8:	6041      	str	r1, [r0, #4]
    clear();
   b52fa:	f7ff fff3 	bl	b52e4 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b52fe:	7191      	strb	r1, [r2, #6]
}
   b5300:	4610      	mov	r0, r2
   b5302:	bd08      	pop	{r3, pc}

000b5304 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5304:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5306:	2301      	movs	r3, #1
   b5308:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b530a:	4b05      	ldr	r3, [pc, #20]	; (b5320 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b530c:	4602      	mov	r2, r0
   b530e:	f103 0110 	add.w	r1, r3, #16
   b5312:	f853 4b04 	ldr.w	r4, [r3], #4
   b5316:	f842 4b04 	str.w	r4, [r2], #4
   b531a:	428b      	cmp	r3, r1
   b531c:	d1f9      	bne.n	b5312 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b531e:	bd10      	pop	{r4, pc}
   b5320:	000b89a2 	.word	0x000b89a2

000b5324 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5324:	b510      	push	{r4, lr}
    if (uuid128) {
   b5326:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5328:	4604      	mov	r4, r0
    if (uuid128) {
   b532a:	b1b1      	cbz	r1, b535a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b532c:	2a01      	cmp	r2, #1
   b532e:	f101 0210 	add.w	r2, r1, #16
   b5332:	d10a      	bne.n	b534a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5334:	4601      	mov	r1, r0
   b5336:	f853 0b04 	ldr.w	r0, [r3], #4
   b533a:	f841 0b04 	str.w	r0, [r1], #4
   b533e:	4293      	cmp	r3, r2
   b5340:	d1f9      	bne.n	b5336 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5342:	2301      	movs	r3, #1
   b5344:	6123      	str	r3, [r4, #16]
}
   b5346:	4620      	mov	r0, r4
   b5348:	bd10      	pop	{r4, pc}
   b534a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b534c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5350:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5354:	429a      	cmp	r2, r3
   b5356:	d1f9      	bne.n	b534c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5358:	e7f3      	b.n	b5342 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b535a:	2210      	movs	r2, #16
   b535c:	f002 ffbe 	bl	b82dc <memset>
   b5360:	e7f1      	b.n	b5346 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5362 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5362:	b538      	push	{r3, r4, r5, lr}
   b5364:	4604      	mov	r4, r0
   b5366:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5368:	461a      	mov	r2, r3
   b536a:	f7ff ffdb 	bl	b5324 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b536e:	81a5      	strh	r5, [r4, #12]
}
   b5370:	4620      	mov	r0, r4
   b5372:	bd38      	pop	{r3, r4, r5, pc}

000b5374 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5374:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5376:	6902      	ldr	r2, [r0, #16]
   b5378:	b922      	cbnz	r2, b5384 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b537a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b537c:	3800      	subs	r0, #0
   b537e:	bf18      	it	ne
   b5380:	2001      	movne	r0, #1
}
   b5382:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5384:	4902      	ldr	r1, [pc, #8]	; (b5390 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5386:	2210      	movs	r2, #16
   b5388:	f002 ff70 	bl	b826c <memcmp>
   b538c:	e7f6      	b.n	b537c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b538e:	bf00      	nop
   b5390:	000b89c2 	.word	0x000b89c2

000b5394 <_ZNK8particle7BleUuid4typeEv>:
}
   b5394:	6900      	ldr	r0, [r0, #16]
   b5396:	4770      	bx	lr

000b5398 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5398:	b538      	push	{r3, r4, r5, lr}
   b539a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b539c:	2214      	movs	r2, #20
   b539e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b53a0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b53a2:	f002 ff9b 	bl	b82dc <memset>
    if (type_ == BleUuidType::SHORT) {
   b53a6:	6923      	ldr	r3, [r4, #16]
   b53a8:	b91b      	cbnz	r3, b53b2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b53aa:	89a3      	ldrh	r3, [r4, #12]
   b53ac:	802b      	strh	r3, [r5, #0]
}
   b53ae:	4628      	mov	r0, r5
   b53b0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b53b2:	2301      	movs	r3, #1
   b53b4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b53b6:	4621      	mov	r1, r4
   b53b8:	462b      	mov	r3, r5
   b53ba:	f104 0210 	add.w	r2, r4, #16
   b53be:	f851 0b04 	ldr.w	r0, [r1], #4
   b53c2:	f843 0b04 	str.w	r0, [r3], #4
   b53c6:	4291      	cmp	r1, r2
   b53c8:	d1f9      	bne.n	b53be <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b53ca:	e7f0      	b.n	b53ae <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b53cc <_ZNK8particle7BleUuid7shortedEv>:
}
   b53cc:	8980      	ldrh	r0, [r0, #12]
   b53ce:	4770      	bx	lr

000b53d0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b53d0:	4770      	bx	lr

000b53d2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b53d2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b53d4:	6902      	ldr	r2, [r0, #16]
   b53d6:	690b      	ldr	r3, [r1, #16]
   b53d8:	429a      	cmp	r2, r3
   b53da:	d106      	bne.n	b53ea <_ZNK8particle7BleUuideqERKS0_+0x18>
   b53dc:	2210      	movs	r2, #16
   b53de:	f002 ff45 	bl	b826c <memcmp>
   b53e2:	fab0 f080 	clz	r0, r0
   b53e6:	0940      	lsrs	r0, r0, #5
}
   b53e8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b53ea:	2000      	movs	r0, #0
   b53ec:	e7fc      	b.n	b53e8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b53f0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b53f0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b53f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b53f6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b53f8:	4b34      	ldr	r3, [pc, #208]	; (b54cc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b53fa:	460c      	mov	r4, r1
   b53fc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b53fe:	4602      	mov	r2, r0
   b5400:	f103 0110 	add.w	r1, r3, #16
   b5404:	f853 0b04 	ldr.w	r0, [r3], #4
   b5408:	f842 0b04 	str.w	r0, [r2], #4
   b540c:	428b      	cmp	r3, r1
   b540e:	d1f9      	bne.n	b5404 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b5410:	b344      	cbz	r4, b5464 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b5412:	2124      	movs	r1, #36	; 0x24
   b5414:	4620      	mov	r0, r4
   b5416:	f002 ffef 	bl	b83f8 <strnlen>
   b541a:	2804      	cmp	r0, #4
   b541c:	f04f 0500 	mov.w	r5, #0
   b5420:	d123      	bne.n	b546a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b5422:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5426:	af01      	add	r7, sp, #4
   b5428:	1ca5      	adds	r5, r4, #2
   b542a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b542c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5430:	f7ff ff08 	bl	b5244 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5434:	f1b0 0800 	subs.w	r8, r0, #0
   b5438:	db12      	blt.n	b5460 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b543a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b543e:	f7ff ff01 	bl	b5244 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b5442:	2800      	cmp	r0, #0
   b5444:	db0c      	blt.n	b5460 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5446:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5448:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b544c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b544e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b5452:	d1eb      	bne.n	b542c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b5454:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5458:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b545a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b545e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5460:	2300      	movs	r3, #0
   b5462:	6133      	str	r3, [r6, #16]
}
   b5464:	b002      	add	sp, #8
   b5466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b546a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b546e:	2124      	movs	r1, #36	; 0x24
   b5470:	4620      	mov	r0, r4
   b5472:	f002 ffc1 	bl	b83f8 <strnlen>
   b5476:	42a8      	cmp	r0, r5
   b5478:	d807      	bhi.n	b548a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b547a:	4642      	mov	r2, r8
   b547c:	2100      	movs	r1, #0
   b547e:	4630      	mov	r0, r6
}
   b5480:	b002      	add	sp, #8
   b5482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5486:	f002 bf29 	b.w	b82dc <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b548a:	f1b8 0f00 	cmp.w	r8, #0
   b548e:	d0e9      	beq.n	b5464 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5490:	5d60      	ldrb	r0, [r4, r5]
   b5492:	f7ff fed7 	bl	b5244 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5496:	0603      	lsls	r3, r0, #24
   b5498:	d415      	bmi.n	b54c6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b549a:	0100      	lsls	r0, r0, #4
   b549c:	f108 38ff 	add.w	r8, r8, #4294967295
   b54a0:	b2c7      	uxtb	r7, r0
   b54a2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b54a6:	2124      	movs	r1, #36	; 0x24
   b54a8:	4620      	mov	r0, r4
   b54aa:	f002 ffa5 	bl	b83f8 <strnlen>
   b54ae:	3501      	adds	r5, #1
   b54b0:	42a8      	cmp	r0, r5
   b54b2:	d908      	bls.n	b54c6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b54b4:	5d60      	ldrb	r0, [r4, r5]
   b54b6:	f7ff fec5 	bl	b5244 <_ZN8particle11hexToNibbleEc>
   b54ba:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b54bc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b54be:	bfa4      	itt	ge
   b54c0:	4338      	orrge	r0, r7
   b54c2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b54c6:	3501      	adds	r5, #1
   b54c8:	e7d1      	b.n	b546e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b54ca:	bf00      	nop
   b54cc:	000b89a2 	.word	0x000b89a2

000b54d0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b54d0:	b513      	push	{r0, r1, r4, lr}
   b54d2:	4604      	mov	r4, r0
   b54d4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b54d6:	f7ff ff15 	bl	b5304 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b54da:	4620      	mov	r0, r4
   b54dc:	9901      	ldr	r1, [sp, #4]
   b54de:	f7ff ff87 	bl	b53f0 <_ZN8particle7BleUuid9constructEPKc>
}
   b54e2:	4620      	mov	r0, r4
   b54e4:	b002      	add	sp, #8
   b54e6:	bd10      	pop	{r4, pc}

000b54e8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b54e8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b54ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b54ee:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b54f0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b54f2:	8043      	strh	r3, [r0, #2]
   b54f4:	220e      	movs	r2, #14
   b54f6:	4629      	mov	r1, r5
   b54f8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b54fa:	7105      	strb	r5, [r0, #4]
   b54fc:	3006      	adds	r0, #6
   b54fe:	f002 feed 	bl	b82dc <memset>
   b5502:	f104 0014 	add.w	r0, r4, #20
   b5506:	f7ff fefd 	bl	b5304 <_ZN8particle7BleUuidC1Ev>
   b550a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b550e:	f7ff fef9 	bl	b5304 <_ZN8particle7BleUuidC1Ev>
   b5512:	4904      	ldr	r1, [pc, #16]	; (b5524 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5514:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5518:	f7ff fcf7 	bl	b4f0a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b551c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b551e:	4620      	mov	r0, r4
   b5520:	bd38      	pop	{r3, r4, r5, pc}
   b5522:	bf00      	nop
   b5524:	000b8a2c 	.word	0x000b8a2c

000b5528 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5528:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b552a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b552e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5532:	4293      	cmp	r3, r2
   b5534:	4618      	mov	r0, r3
   b5536:	d006      	beq.n	b5546 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5538:	6804      	ldr	r4, [r0, #0]
   b553a:	8824      	ldrh	r4, [r4, #0]
   b553c:	428c      	cmp	r4, r1
   b553e:	f103 0308 	add.w	r3, r3, #8
   b5542:	d1f6      	bne.n	b5532 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5544:	bd10      	pop	{r4, pc}
        return nullptr;
   b5546:	2000      	movs	r0, #0
   b5548:	e7fc      	b.n	b5544 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b554c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b554c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b554e:	4606      	mov	r6, r0
   b5550:	b085      	sub	sp, #20
   b5552:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b5554:	460d      	mov	r5, r1
   b5556:	2900      	cmp	r1, #0
   b5558:	d050      	beq.n	b55fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b555a:	2a00      	cmp	r2, #0
   b555c:	d04e      	beq.n	b55fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b555e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b5560:	7823      	ldrb	r3, [r4, #0]
   b5562:	2af4      	cmp	r2, #244	; 0xf4
   b5564:	bf28      	it	cs
   b5566:	22f4      	movcs	r2, #244	; 0xf4
   b5568:	b343      	cbz	r3, b55bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b556a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b556c:	0798      	lsls	r0, r3, #30
   b556e:	d509      	bpl.n	b5584 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5570:	89a0      	ldrh	r0, [r4, #12]
   b5572:	9203      	str	r2, [sp, #12]
   b5574:	2300      	movs	r3, #0
   b5576:	f7ff f9e9 	bl	b494c <hal_ble_gatt_server_set_characteristic_value>
   b557a:	2800      	cmp	r0, #0
   b557c:	9a03      	ldr	r2, [sp, #12]
   b557e:	da03      	bge.n	b5588 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b5580:	b005      	add	sp, #20
   b5582:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b5584:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5588:	6834      	ldr	r4, [r6, #0]
   b558a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b558c:	06d9      	lsls	r1, r3, #27
   b558e:	d509      	bpl.n	b55a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b5590:	2f01      	cmp	r7, #1
   b5592:	d007      	beq.n	b55a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5594:	89a0      	ldrh	r0, [r4, #12]
   b5596:	2300      	movs	r3, #0
   b5598:	4629      	mov	r1, r5
}
   b559a:	b005      	add	sp, #20
   b559c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55a0:	f7ff ba06 	b.w	b49b0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b55a4:	069b      	lsls	r3, r3, #26
   b55a6:	d5eb      	bpl.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b55a8:	2f02      	cmp	r7, #2
   b55aa:	d0e9      	beq.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55ac:	89a0      	ldrh	r0, [r4, #12]
   b55ae:	2300      	movs	r3, #0
   b55b0:	4629      	mov	r1, r5
}
   b55b2:	b005      	add	sp, #20
   b55b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55b8:	f7ff ba04 	b.w	b49c4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b55bc:	8860      	ldrh	r0, [r4, #2]
   b55be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b55c2:	4288      	cmp	r0, r1
   b55c4:	d01c      	beq.n	b5600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b55c6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b55c8:	074e      	lsls	r6, r1, #29
   b55ca:	d501      	bpl.n	b55d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b55cc:	2f01      	cmp	r7, #1
   b55ce:	d104      	bne.n	b55da <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b55d0:	070b      	lsls	r3, r1, #28
   b55d2:	d409      	bmi.n	b55e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b55d4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b55d8:	e7d2      	b.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b55da:	89a1      	ldrh	r1, [r4, #12]
   b55dc:	9300      	str	r3, [sp, #0]
   b55de:	4613      	mov	r3, r2
   b55e0:	462a      	mov	r2, r5
   b55e2:	f7ff f9c7 	bl	b4974 <hal_ble_gatt_client_write_without_response>
   b55e6:	e7cb      	b.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b55e8:	2f02      	cmp	r7, #2
   b55ea:	d0f3      	beq.n	b55d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b55ec:	2300      	movs	r3, #0
   b55ee:	89a1      	ldrh	r1, [r4, #12]
   b55f0:	9300      	str	r3, [sp, #0]
   b55f2:	4613      	mov	r3, r2
   b55f4:	462a      	mov	r2, r5
   b55f6:	f7ff f9b3 	bl	b4960 <hal_ble_gatt_client_write_with_response>
   b55fa:	e7c1      	b.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b55fc:	4802      	ldr	r0, [pc, #8]	; (b5608 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b55fe:	e7bf      	b.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5600:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5604:	e7bc      	b.n	b5580 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5606:	bf00      	nop
   b5608:	fffffef2 	.word	0xfffffef2

000b560c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5610:	2600      	movs	r6, #0
   b5612:	6006      	str	r6, [r0, #0]
   b5614:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5616:	2028      	movs	r0, #40	; 0x28
   b5618:	460c      	mov	r4, r1
   b561a:	f7fe fd3a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b561e:	1e05      	subs	r5, r0, #0
   b5620:	f105 080c 	add.w	r8, r5, #12
   b5624:	d00f      	beq.n	b5646 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b5626:	2301      	movs	r3, #1
   b5628:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b562c:	4b08      	ldr	r3, [pc, #32]	; (b5650 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b562e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5630:	4640      	mov	r0, r8
   b5632:	f7ff fe67 	bl	b5304 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5638:	622e      	str	r6, [r5, #32]
   b563a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b563e:	4646      	mov	r6, r8
   b5640:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5642:	6823      	ldr	r3, [r4, #0]
   b5644:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5646:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b564a:	4638      	mov	r0, r7
   b564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5650:	000b8964 	.word	0x000b8964

000b5654 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5654:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5656:	2500      	movs	r5, #0
   b5658:	6005      	str	r5, [r0, #0]
   b565a:	4606      	mov	r6, r0
   b565c:	2030      	movs	r0, #48	; 0x30
   b565e:	f7fe fd18 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5662:	4604      	mov	r4, r0
   b5664:	b188      	cbz	r0, b568a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5666:	2301      	movs	r3, #1
   b5668:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b566c:	4b09      	ldr	r3, [pc, #36]	; (b5694 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b566e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5670:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5674:	8183      	strh	r3, [r0, #12]
   b5676:	300e      	adds	r0, #14
   b5678:	f7ff fe3a 	bl	b52f0 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b567c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5680:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5684:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5688:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b568a:	6074      	str	r4, [r6, #4]
   b568c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b568e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5690:	4630      	mov	r0, r6
   b5692:	bd70      	pop	{r4, r5, r6, pc}
   b5694:	000b8980 	.word	0x000b8980

000b5698 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5698:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b569a:	460d      	mov	r5, r1
   b569c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b569e:	a801      	add	r0, sp, #4
   b56a0:	f7ff fde6 	bl	b5270 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b56a4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b56a6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b56aa:	6023      	str	r3, [r4, #0]
   b56ac:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b56b0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b56b2:	a801      	add	r0, sp, #4
   b56b4:	f7ff fdea 	bl	b528c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b56b8:	4620      	mov	r0, r4
   b56ba:	b003      	add	sp, #12
   b56bc:	bd30      	pop	{r4, r5, pc}

000b56be <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b56be:	b530      	push	{r4, r5, lr}
   b56c0:	4605      	mov	r5, r0
   b56c2:	b087      	sub	sp, #28
   b56c4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b56c6:	a801      	add	r0, sp, #4
   b56c8:	f7ff fdd2 	bl	b5270 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b56cc:	682a      	ldr	r2, [r5, #0]
   b56ce:	6823      	ldr	r3, [r4, #0]
   b56d0:	8812      	ldrh	r2, [r2, #0]
   b56d2:	881b      	ldrh	r3, [r3, #0]
   b56d4:	429a      	cmp	r2, r3
   b56d6:	d10d      	bne.n	b56f4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b56d8:	4629      	mov	r1, r5
   b56da:	a802      	add	r0, sp, #8
   b56dc:	f7ff ffdc 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b56e0:	4621      	mov	r1, r4
   b56e2:	a804      	add	r0, sp, #16
   b56e4:	f7ff ffd8 	bl	b5698 <_ZNK8particle13BlePeerDevice7addressEv>
   b56e8:	a904      	add	r1, sp, #16
   b56ea:	a802      	add	r0, sp, #8
   b56ec:	f7ff fdec 	bl	b52c8 <_ZNK8particle10BleAddresseqERKS0_>
   b56f0:	4604      	mov	r4, r0
   b56f2:	b900      	cbnz	r0, b56f6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b56f4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b56f6:	a801      	add	r0, sp, #4
   b56f8:	f7ff fdc8 	bl	b528c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b56fc:	4620      	mov	r0, r4
   b56fe:	b007      	add	sp, #28
   b5700:	bd30      	pop	{r4, r5, pc}
	...

000b5704 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5704:	b510      	push	{r4, lr}
   b5706:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5708:	2064      	movs	r0, #100	; 0x64
   b570a:	f7fe fcc2 	bl	b4092 <_Znwj>
   b570e:	b168      	cbz	r0, b572c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5710:	2300      	movs	r3, #0
   b5712:	e9c0 3300 	strd	r3, r3, [r0]
   b5716:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b571a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b571e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5722:	6203      	str	r3, [r0, #32]
   b5724:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5726:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5728:	64c3      	str	r3, [r0, #76]	; 0x4c
   b572a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b572c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b572e:	b920      	cbnz	r0, b573a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5730:	4a0a      	ldr	r2, [pc, #40]	; (b575c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5732:	490b      	ldr	r1, [pc, #44]	; (b5760 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5734:	200a      	movs	r0, #10
   b5736:	f7ff fa4f 	bl	b4bd8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b573a:	2000      	movs	r0, #0
   b573c:	f7ff f8d2 	bl	b48e4 <hal_ble_stack_init>
   b5740:	b120      	cbz	r0, b574c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5742:	4a06      	ldr	r2, [pc, #24]	; (b575c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5744:	4907      	ldr	r1, [pc, #28]	; (b5764 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5746:	200a      	movs	r0, #10
   b5748:	f7ff fa46 	bl	b4bd8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b574c:	6821      	ldr	r1, [r4, #0]
   b574e:	4806      	ldr	r0, [pc, #24]	; (b5768 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5750:	2200      	movs	r2, #0
   b5752:	f7ff f923 	bl	b499c <hal_ble_set_callback_on_periph_link_events>
}
   b5756:	4620      	mov	r0, r4
   b5758:	bd10      	pop	{r4, pc}
   b575a:	bf00      	nop
   b575c:	000b48c5 	.word	0x000b48c5
   b5760:	000b8804 	.word	0x000b8804
   b5764:	000b8842 	.word	0x000b8842
   b5768:	000b5d1d 	.word	0x000b5d1d

000b576c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b576c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b576e:	4c0a      	ldr	r4, [pc, #40]	; (b5798 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5770:	7823      	ldrb	r3, [r4, #0]
   b5772:	f3bf 8f5b 	dmb	ish
   b5776:	07db      	lsls	r3, r3, #31
   b5778:	d40c      	bmi.n	b5794 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b577a:	4620      	mov	r0, r4
   b577c:	f7fe fc9c 	bl	b40b8 <__cxa_guard_acquire>
   b5780:	b140      	cbz	r0, b5794 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5782:	4806      	ldr	r0, [pc, #24]	; (b579c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5784:	f7ff ffbe 	bl	b5704 <_ZN8particle14BleLocalDeviceC1Ev>
   b5788:	4620      	mov	r0, r4
   b578a:	f7fe fc9a 	bl	b40c2 <__cxa_guard_release>
   b578e:	4804      	ldr	r0, [pc, #16]	; (b57a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5790:	f002 fd5e 	bl	b8250 <atexit>
    return instance;
}
   b5794:	4801      	ldr	r0, [pc, #4]	; (b579c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5796:	bd10      	pop	{r4, pc}
   b5798:	2003e690 	.word	0x2003e690
   b579c:	2003e69c 	.word	0x2003e69c
   b57a0:	000b59e9 	.word	0x000b59e9

000b57a4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b57a4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b57a6:	6803      	ldr	r3, [r0, #0]
   b57a8:	3b09      	subs	r3, #9
   b57aa:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b57ac:	b08d      	sub	sp, #52	; 0x34
   b57ae:	4604      	mov	r4, r0
   b57b0:	460d      	mov	r5, r1
    switch (event->type) {
   b57b2:	d811      	bhi.n	b57d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b57b4:	f7ff ffda 	bl	b576c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57b8:	88a1      	ldrh	r1, [r4, #4]
   b57ba:	6800      	ldr	r0, [r0, #0]
   b57bc:	f7ff feb4 	bl	b5528 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b57c0:	4603      	mov	r3, r0
   b57c2:	b958      	cbnz	r0, b57dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b57c4:	2220      	movs	r2, #32
   b57c6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b57ca:	4a0b      	ldr	r2, [pc, #44]	; (b57f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b57cc:	9200      	str	r2, [sp, #0]
   b57ce:	490b      	ldr	r1, [pc, #44]	; (b57fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b57d0:	aa04      	add	r2, sp, #16
   b57d2:	2032      	movs	r0, #50	; 0x32
   b57d4:	f7ff fa08 	bl	b4be8 <log_message>
}
   b57d8:	b00d      	add	sp, #52	; 0x34
   b57da:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b57dc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b57de:	2a00      	cmp	r2, #0
   b57e0:	d0fa      	beq.n	b57d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b57e2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57e6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b57ea:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b57ee:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b57f0:	aa04      	add	r2, sp, #16
   b57f2:	a903      	add	r1, sp, #12
   b57f4:	47a0      	blx	r4
}
   b57f6:	e7ef      	b.n	b57d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b57f8:	000b8884 	.word	0x000b8884
   b57fc:	000b881b 	.word	0x000b881b

000b5800 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5800:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5802:	2000      	movs	r0, #0
   b5804:	f7ff f86e 	bl	b48e4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5808:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b580c:	bd08      	pop	{r3, pc}

000b580e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b580e:	b919      	cbnz	r1, b5818 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5810:	460a      	mov	r2, r1
   b5812:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5814:	f7ff b86e 	b.w	b48f4 <hal_ble_gap_set_advertising_data>
   b5818:	e9d1 0100 	ldrd	r0, r1, [r1]
   b581c:	2200      	movs	r2, #0
   b581e:	e7f9      	b.n	b5814 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5820 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b5820:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b5822:	69d8      	ldr	r0, [r3, #28]
}
   b5824:	2800      	cmp	r0, #0
   b5826:	bfd4      	ite	le
   b5828:	2000      	movle	r0, #0
   b582a:	2001      	movgt	r0, #1
   b582c:	4770      	bx	lr

000b582e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b582e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5830:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5834:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5836:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b583a:	42ae      	cmp	r6, r5
   b583c:	d004      	beq.n	b5848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b583e:	4628      	mov	r0, r5
   b5840:	f7ff fb18 	bl	b4e74 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5844:	3510      	adds	r5, #16
   b5846:	e7f8      	b.n	b583a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5848:	6820      	ldr	r0, [r4, #0]
   b584a:	f7ff fa81 	bl	b4d50 <free>
}
   b584e:	4620      	mov	r0, r4
   b5850:	bd70      	pop	{r4, r5, r6, pc}

000b5852 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5852:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5854:	1e14      	subs	r4, r2, #0
   b5856:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5858:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b585a:	db02      	blt.n	b5862 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b585c:	1862      	adds	r2, r4, r1
   b585e:	429a      	cmp	r2, r3
   b5860:	dd00      	ble.n	b5864 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5862:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5864:	682a      	ldr	r2, [r5, #0]
   b5866:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5868:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b586a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b586c:	1a52      	subs	r2, r2, r1
   b586e:	f002 fd1b 	bl	b82a8 <memmove>
    size_ -= n;
   b5872:	686a      	ldr	r2, [r5, #4]
   b5874:	1b12      	subs	r2, r2, r4
   b5876:	606a      	str	r2, [r5, #4]
}
   b5878:	bd38      	pop	{r3, r4, r5, pc}

000b587a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b587a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b587c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b587e:	4604      	mov	r4, r0
   b5880:	460d      	mov	r5, r1
   b5882:	ab01      	add	r3, sp, #4
   b5884:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5888:	f7ff fc68 	bl	b515c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b588c:	4602      	mov	r2, r0
   b588e:	b138      	cbz	r0, b58a0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5890:	9901      	ldr	r1, [sp, #4]
   b5892:	4620      	mov	r0, r4
   b5894:	f7ff ffdd 	bl	b5852 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5898:	4629      	mov	r1, r5
   b589a:	4620      	mov	r0, r4
   b589c:	f7ff ffed 	bl	b587a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b58a0:	b003      	add	sp, #12
   b58a2:	bd30      	pop	{r4, r5, pc}

000b58a4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b58a4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b58a6:	460c      	mov	r4, r1
   b58a8:	b929      	cbnz	r1, b58b6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b58aa:	460a      	mov	r2, r1
   b58ac:	4608      	mov	r0, r1
}
   b58ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b58b2:	f7ff b827 	b.w	b4904 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b58b6:	2101      	movs	r1, #1
   b58b8:	4620      	mov	r0, r4
   b58ba:	f7ff ffde 	bl	b587a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b58be:	e9d4 0100 	ldrd	r0, r1, [r4]
   b58c2:	2200      	movs	r2, #0
   b58c4:	e7f3      	b.n	b58ae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b58c6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b58c6:	b538      	push	{r3, r4, r5, lr}
   b58c8:	4604      	mov	r4, r0
   b58ca:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b58cc:	f7ff ff9f 	bl	b580e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b58d0:	2800      	cmp	r0, #0
   b58d2:	db0a      	blt.n	b58ea <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b58d4:	4629      	mov	r1, r5
   b58d6:	4620      	mov	r0, r4
   b58d8:	f7ff ffe4 	bl	b58a4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b58dc:	2800      	cmp	r0, #0
   b58de:	db04      	blt.n	b58ea <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b58e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b58e4:	2000      	movs	r0, #0
   b58e6:	f7ff b815 	b.w	b4914 <hal_ble_gap_start_advertising>
}
   b58ea:	bd38      	pop	{r3, r4, r5, pc}

000b58ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b58ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b58ee:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b58f0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b58f2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58f4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b58f6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58f8:	f7fe fbcb 	bl	b4092 <_Znwj>
   b58fc:	b118      	cbz	r0, b5906 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b58fe:	682b      	ldr	r3, [r5, #0]
   b5900:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5902:	686b      	ldr	r3, [r5, #4]
   b5904:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5906:	4b03      	ldr	r3, [pc, #12]	; (b5914 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5908:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b590a:	4b03      	ldr	r3, [pc, #12]	; (b5918 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b590c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b590e:	60a3      	str	r3, [r4, #8]
      }
   b5910:	4620      	mov	r0, r4
   b5912:	bd38      	pop	{r3, r4, r5, pc}
   b5914:	000b519d 	.word	0x000b519d
   b5918:	000b51b5 	.word	0x000b51b5

000b591c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b591c:	680b      	ldr	r3, [r1, #0]
   b591e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5920:	b113      	cbz	r3, b5928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5922:	685a      	ldr	r2, [r3, #4]
   b5924:	3201      	adds	r2, #1
   b5926:	605a      	str	r2, [r3, #4]
      }
   b5928:	4770      	bx	lr

000b592a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b592a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b592c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5930:	4604      	mov	r4, r0
   b5932:	f840 3b04 	str.w	r3, [r0], #4
   b5936:	f7ff fff1 	bl	b591c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b593a:	6823      	ldr	r3, [r4, #0]
   b593c:	b90b      	cbnz	r3, b5942 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b593e:	f7ff fc23 	bl	b5188 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5942:	4620      	mov	r0, r4
   b5944:	bd10      	pop	{r4, pc}

000b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5946:	b510      	push	{r4, lr}
   b5948:	f851 3b04 	ldr.w	r3, [r1], #4
   b594c:	4604      	mov	r4, r0
   b594e:	f840 3b04 	str.w	r3, [r0], #4
   b5952:	f7ff ffe3 	bl	b591c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5956:	4620      	mov	r0, r4
   b5958:	bd10      	pop	{r4, pc}

000b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b595a:	b510      	push	{r4, lr}
   b595c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5960:	4604      	mov	r4, r0
   b5962:	f840 3b04 	str.w	r3, [r0], #4
   b5966:	f7ff ffd9 	bl	b591c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b596a:	4620      	mov	r0, r4
   b596c:	bd10      	pop	{r4, pc}

000b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b596e:	b510      	push	{r4, lr}
   b5970:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5972:	6800      	ldr	r0, [r0, #0]
   b5974:	b108      	cbz	r0, b597a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5976:	f7ff fc51 	bl	b521c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b597a:	4620      	mov	r0, r4
   b597c:	bd10      	pop	{r4, pc}

000b597e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b597e:	b510      	push	{r4, lr}
   b5980:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5982:	3004      	adds	r0, #4
   b5984:	f7ff fff3 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5988:	4620      	mov	r0, r4
   b598a:	bd10      	pop	{r4, pc}

000b598c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b598c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b598e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5992:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5994:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5998:	42ae      	cmp	r6, r5
   b599a:	d004      	beq.n	b59a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b599c:	1d28      	adds	r0, r5, #4
   b599e:	f7ff ffe6 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b59a2:	3508      	adds	r5, #8
   b59a4:	e7f8      	b.n	b5998 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b59a6:	6820      	ldr	r0, [r4, #0]
   b59a8:	f7ff f9d2 	bl	b4d50 <free>
}
   b59ac:	4620      	mov	r0, r4
   b59ae:	bd70      	pop	{r4, r5, r6, pc}

000b59b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b59b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b59b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b59b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b59b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b59bc:	42ae      	cmp	r6, r5
   b59be:	d004      	beq.n	b59ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b59c0:	1d28      	adds	r0, r5, #4
   b59c2:	f7ff ffd4 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b59c6:	3508      	adds	r5, #8
   b59c8:	e7f8      	b.n	b59bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b59ca:	6820      	ldr	r0, [r4, #0]
   b59cc:	f7ff f9c0 	bl	b4d50 <free>
}
   b59d0:	4620      	mov	r0, r4
   b59d2:	bd70      	pop	{r4, r5, r6, pc}

000b59d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b59d4:	b510      	push	{r4, lr}
   b59d6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b59d8:	3024      	adds	r0, #36	; 0x24
   b59da:	f7ff ffe9 	bl	b59b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b59de:	f104 0018 	add.w	r0, r4, #24
   b59e2:	f7ff ffd3 	bl	b598c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b59e6:	bd10      	pop	{r4, pc}

000b59e8 <__tcf_0>:
    static BleLocalDevice instance;
   b59e8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b59ea:	4b17      	ldr	r3, [pc, #92]	; (b5a48 <__tcf_0+0x60>)
   b59ec:	681c      	ldr	r4, [r3, #0]
   b59ee:	b354      	cbz	r4, b5a46 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b59f0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b59f4:	f7ff fbfe 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
   b59f8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b59fc:	f7ff fbfa 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
   b5a00:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5a04:	f7ff fbf6 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
   b5a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5a0c:	f7ff fbf2 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5a10:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5a14:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5a18:	42ae      	cmp	r6, r5
   b5a1a:	d004      	beq.n	b5a26 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5a1c:	1d28      	adds	r0, r5, #4
   b5a1e:	f7ff ffa6 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a22:	3508      	adds	r5, #8
   b5a24:	e7f8      	b.n	b5a18 <__tcf_0+0x30>
    ::free(ptr);
   b5a26:	69a0      	ldr	r0, [r4, #24]
   b5a28:	f7ff f992 	bl	b4d50 <free>
    ~BleLocalDeviceImpl() = default;
   b5a2c:	f104 000c 	add.w	r0, r4, #12
   b5a30:	f7ff ffbe 	bl	b59b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7ff ffa9 	bl	b598c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5a42:	f7fe bb2a 	b.w	b409a <_ZdlPvj>
   b5a46:	bd70      	pop	{r4, r5, r6, pc}
   b5a48:	2003e69c 	.word	0x2003e69c

000b5a4c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5a4c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5a4e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5a50:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5a54:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5a58:	6803      	ldr	r3, [r0, #0]
   b5a5a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a5c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5a5e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5a60:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5a62:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5a64:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5a66:	f7ff ff82 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5a6a:	b002      	add	sp, #8
   b5a6c:	bd10      	pop	{r4, pc}

000b5a6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5a6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5a70:	b510      	push	{r4, lr}
      if (_M_empty())
   b5a72:	b90a      	cbnz	r2, b5a78 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5a74:	f002 fad6 	bl	b8024 <_ZSt25__throw_bad_function_callv>
    }
   b5a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5a7c:	68c3      	ldr	r3, [r0, #12]
   b5a7e:	4718      	bx	r3

000b5a80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5a80:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5a82:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5a84:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5a86:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5a88:	dd03      	ble.n	b5a92 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5a8a:	f7ff f969 	bl	b4d60 <realloc>
            if (!d) {
   b5a8e:	b918      	cbnz	r0, b5a98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5a90:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5a92:	f7ff f95d 	bl	b4d50 <free>
        T* d = nullptr;
   b5a96:	2000      	movs	r0, #0
        data_ = d;
   b5a98:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5a9a:	60a5      	str	r5, [r4, #8]
        return true;
   b5a9c:	2001      	movs	r0, #1
   b5a9e:	e7f7      	b.n	b5a90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5aa0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5aa2:	6883      	ldr	r3, [r0, #8]
   b5aa4:	428b      	cmp	r3, r1
   b5aa6:	da02      	bge.n	b5aae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5aa8:	f7ff ffea 	bl	b5a80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5aac:	bd08      	pop	{r3, pc}
    return true;
   b5aae:	2001      	movs	r0, #1
   b5ab0:	e7fc      	b.n	b5aac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5ab2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ab6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ab8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5aba:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5abc:	4419      	add	r1, r3
   b5abe:	6883      	ldr	r3, [r0, #8]
   b5ac0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ac2:	4604      	mov	r4, r0
   b5ac4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ac6:	dc12      	bgt.n	b5aee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5ac8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5aca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5acc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5ace:	1bd2      	subs	r2, r2, r7
   b5ad0:	4631      	mov	r1, r6
   b5ad2:	1970      	adds	r0, r6, r5
   b5ad4:	f002 fbe8 	bl	b82a8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5ad8:	462a      	mov	r2, r5
   b5ada:	4641      	mov	r1, r8
   b5adc:	4630      	mov	r0, r6
   b5ade:	f002 fbd5 	bl	b828c <memcpy>
    size_ += n;
   b5ae2:	6863      	ldr	r3, [r4, #4]
   b5ae4:	442b      	add	r3, r5
   b5ae6:	6063      	str	r3, [r4, #4]
    return true;
   b5ae8:	2001      	movs	r0, #1
}
   b5aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5aee:	f7ff ffc7 	bl	b5a80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5af2:	2800      	cmp	r0, #0
   b5af4:	d1e8      	bne.n	b5ac8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5af6:	e7f8      	b.n	b5aea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5af8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5afa:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5afc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5b00:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5b02:	4604      	mov	r4, r0
   b5b04:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b06:	da0b      	bge.n	b5b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5b08:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b0a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b0c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b0e:	1b52      	subs	r2, r2, r5
   b5b10:	1c48      	adds	r0, r1, #1
   b5b12:	f002 fbc9 	bl	b82a8 <memmove>
    new(p) T(std::move(value));
   b5b16:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5b18:	6863      	ldr	r3, [r4, #4]
   b5b1a:	3301      	adds	r3, #1
   b5b1c:	6063      	str	r3, [r4, #4]
}
   b5b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b20:	3101      	adds	r1, #1
   b5b22:	f7ff ffad 	bl	b5a80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5b26:	2800      	cmp	r0, #0
   b5b28:	d1ee      	bne.n	b5b08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5b2a:	e7f8      	b.n	b5b1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5b2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b2c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5b2e:	6841      	ldr	r1, [r0, #4]
   b5b30:	f7ff bfe2 	b.w	b5af8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5b34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5b38:	4604      	mov	r4, r0
   b5b3a:	461d      	mov	r5, r3
   b5b3c:	460f      	mov	r7, r1
   b5b3e:	ab01      	add	r3, sp, #4
   b5b40:	4690      	mov	r8, r2
   b5b42:	460a      	mov	r2, r1
   b5b44:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5b48:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5b4c:	f7ff fb06 	bl	b515c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5b50:	1cae      	adds	r6, r5, #2
   b5b52:	6863      	ldr	r3, [r4, #4]
   b5b54:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5b56:	f1b9 0f00 	cmp.w	r9, #0
   b5b5a:	d126      	bne.n	b5baa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5b5c:	b328      	cbz	r0, b5baa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5b5e:	4433      	add	r3, r6
   b5b60:	1a1b      	subs	r3, r3, r0
   b5b62:	2bff      	cmp	r3, #255	; 0xff
   b5b64:	d809      	bhi.n	b5b7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5b66:	9901      	ldr	r1, [sp, #4]
   b5b68:	4620      	mov	r0, r4
   b5b6a:	f7ff fe72 	bl	b5852 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5b6e:	6861      	ldr	r1, [r4, #4]
   b5b70:	4620      	mov	r0, r4
   b5b72:	4431      	add	r1, r6
   b5b74:	f7ff ff94 	bl	b5aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5b78:	b918      	cbnz	r0, b5b82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5b7a:	6860      	ldr	r0, [r4, #4]
}
   b5b7c:	b003      	add	sp, #12
   b5b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5b82:	1c6a      	adds	r2, r5, #1
   b5b84:	9901      	ldr	r1, [sp, #4]
   b5b86:	b2d2      	uxtb	r2, r2
   b5b88:	4620      	mov	r0, r4
   b5b8a:	f7ff ffb5 	bl	b5af8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5b8e:	9901      	ldr	r1, [sp, #4]
   b5b90:	463a      	mov	r2, r7
   b5b92:	3101      	adds	r1, #1
   b5b94:	4620      	mov	r0, r4
   b5b96:	f7ff ffaf 	bl	b5af8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5b9a:	9901      	ldr	r1, [sp, #4]
   b5b9c:	462b      	mov	r3, r5
   b5b9e:	4642      	mov	r2, r8
   b5ba0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5ba2:	4620      	mov	r0, r4
   b5ba4:	f7ff ff85 	bl	b5ab2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5ba8:	e7e7      	b.n	b5b7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5baa:	18f1      	adds	r1, r6, r3
   b5bac:	29ff      	cmp	r1, #255	; 0xff
   b5bae:	d8e4      	bhi.n	b5b7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f7ff ff75 	bl	b5aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5bb6:	2800      	cmp	r0, #0
   b5bb8:	d0df      	beq.n	b5b7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5bba:	1c69      	adds	r1, r5, #1
   b5bbc:	b2c9      	uxtb	r1, r1
   b5bbe:	4620      	mov	r0, r4
   b5bc0:	f7ff ffb4 	bl	b5b2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5bc4:	4639      	mov	r1, r7
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7ff ffb0 	bl	b5b2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5bcc:	6861      	ldr	r1, [r4, #4]
   b5bce:	462b      	mov	r3, r5
   b5bd0:	4642      	mov	r2, r8
   b5bd2:	e7e6      	b.n	b5ba2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5bd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5bd4:	b430      	push	{r4, r5}
   b5bd6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5bda:	b11a      	cbz	r2, b5be4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5bdc:	9502      	str	r5, [sp, #8]
}
   b5bde:	bc30      	pop	{r4, r5}
   b5be0:	f7ff bfa8 	b.w	b5b34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5be4:	6840      	ldr	r0, [r0, #4]
}
   b5be6:	bc30      	pop	{r4, r5}
   b5be8:	4770      	bx	lr

000b5bea <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5bea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5bec:	2300      	movs	r3, #0
   b5bee:	e9c0 3300 	strd	r3, r3, [r0]
   b5bf2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5bf4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5bf6:	9300      	str	r3, [sp, #0]
   b5bf8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5bfa:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5bfe:	4619      	mov	r1, r3
   b5c00:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5c04:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5c06:	f7ff ffe5 	bl	b5bd4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	b004      	add	sp, #16
   b5c0e:	bd10      	pop	{r4, pc}

000b5c10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5c10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c14:	4604      	mov	r4, r0
   b5c16:	460d      	mov	r5, r1
   b5c18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5c1a:	d914      	bls.n	b5c46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5c1c:	4290      	cmp	r0, r2
   b5c1e:	d213      	bcs.n	b5c48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5c20:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5c24:	1a75      	subs	r5, r6, r1
   b5c26:	f1a1 0708 	sub.w	r7, r1, #8
   b5c2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5c2c:	42b7      	cmp	r7, r6
   b5c2e:	d018      	beq.n	b5c62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5c30:	b11c      	cbz	r4, b5c3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5c32:	4631      	mov	r1, r6
   b5c34:	4620      	mov	r0, r4
   b5c36:	f7ff fe90 	bl	b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5c3a:	1d30      	adds	r0, r6, #4
   b5c3c:	f7ff fe97 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5c40:	3e08      	subs	r6, #8
   b5c42:	3c08      	subs	r4, #8
   b5c44:	e7f2      	b.n	b5c2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5c46:	d00c      	beq.n	b5c62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5c48:	42b5      	cmp	r5, r6
   b5c4a:	d00a      	beq.n	b5c62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5c4c:	b11c      	cbz	r4, b5c56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5c4e:	4629      	mov	r1, r5
   b5c50:	4620      	mov	r0, r4
   b5c52:	f7ff fe82 	bl	b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c56:	1d28      	adds	r0, r5, #4
   b5c58:	f7ff fe89 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5c5c:	3508      	adds	r5, #8
   b5c5e:	3408      	adds	r4, #8
   b5c60:	e7f2      	b.n	b5c48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c66:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5c68:	6846      	ldr	r6, [r0, #4]
   b5c6a:	4668      	mov	r0, sp
   b5c6c:	f7ff fe75 	bl	b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c70:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5c74:	429f      	cmp	r7, r3
   b5c76:	db12      	blt.n	b5c9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5c78:	3701      	adds	r7, #1
        if (n > 0) {
   b5c7a:	2f00      	cmp	r7, #0
   b5c7c:	dd29      	ble.n	b5cd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5c7e:	00f8      	lsls	r0, r7, #3
   b5c80:	f7ff f85e 	bl	b4d40 <malloc>
            if (!d) {
   b5c84:	4605      	mov	r5, r0
   b5c86:	b1f0      	cbz	r0, b5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5c88:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5c8c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5c90:	f7ff ffbe 	bl	b5c10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5c94:	6820      	ldr	r0, [r4, #0]
   b5c96:	f7ff f85b 	bl	b4d50 <free>
        data_ = d;
   b5c9a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5c9c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5c9e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5ca0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5ca2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5ca6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5caa:	4631      	mov	r1, r6
   b5cac:	f106 0008 	add.w	r0, r6, #8
   b5cb0:	f7ff ffae 	bl	b5c10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5cb4:	b11e      	cbz	r6, b5cbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5cb6:	4669      	mov	r1, sp
   b5cb8:	4630      	mov	r0, r6
   b5cba:	f7ff fe4e 	bl	b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5cbe:	6863      	ldr	r3, [r4, #4]
   b5cc0:	3301      	adds	r3, #1
   b5cc2:	6063      	str	r3, [r4, #4]
    return true;
   b5cc4:	2501      	movs	r5, #1
   b5cc6:	a801      	add	r0, sp, #4
   b5cc8:	f7ff fe51 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ccc:	4628      	mov	r0, r5
   b5cce:	b003      	add	sp, #12
   b5cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5cd2:	2500      	movs	r5, #0
   b5cd4:	e7de      	b.n	b5c94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5cd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5cd8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5cdc:	4605      	mov	r5, r0
   b5cde:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5ce0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5ce4:	42a6      	cmp	r6, r4
   b5ce6:	d005      	beq.n	b5cf4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5ce8:	4639      	mov	r1, r7
   b5cea:	4620      	mov	r0, r4
   b5cec:	f7ff fce7 	bl	b56be <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5cf0:	b108      	cbz	r0, b5cf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5cf2:	b914      	cbnz	r4, b5cfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5cf6:	3408      	adds	r4, #8
   b5cf8:	e7f4      	b.n	b5ce4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5cfa:	1d20      	adds	r0, r4, #4
   b5cfc:	f7ff fe37 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5d00:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5d04:	f104 0108 	add.w	r1, r4, #8
   b5d08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7ff ff7f 	bl	b5c10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5d12:	686b      	ldr	r3, [r5, #4]
   b5d14:	3b01      	subs	r3, #1
   b5d16:	606b      	str	r3, [r5, #4]
    return true;
   b5d18:	e7ec      	b.n	b5cf4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5d1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d20:	4605      	mov	r5, r0
   b5d22:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5d24:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5d26:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5d28:	f7ff faa2 	bl	b5270 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5d2c:	682e      	ldr	r6, [r5, #0]
   b5d2e:	1ef3      	subs	r3, r6, #3
   b5d30:	2b0d      	cmp	r3, #13
   b5d32:	d83c      	bhi.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5d34:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5d38:	0053000e 	.word	0x0053000e
   b5d3c:	00d1003b 	.word	0x00d1003b
   b5d40:	003b003b 	.word	0x003b003b
   b5d44:	003b003b 	.word	0x003b003b
   b5d48:	009b003b 	.word	0x009b003b
   b5d4c:	009b009b 	.word	0x009b009b
   b5d50:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b5d54:	a804      	add	r0, sp, #16
   b5d56:	f7ff fc7d 	bl	b5654 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5d5a:	9b04      	ldr	r3, [sp, #16]
   b5d5c:	89aa      	ldrh	r2, [r5, #12]
   b5d5e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5d60:	6869      	ldr	r1, [r5, #4]
   b5d62:	9804      	ldr	r0, [sp, #16]
   b5d64:	3108      	adds	r1, #8
   b5d66:	3002      	adds	r0, #2
   b5d68:	f7ff faa1 	bl	b52ae <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5d6c:	a904      	add	r1, sp, #16
   b5d6e:	a806      	add	r0, sp, #24
   b5d70:	f7ff fdf3 	bl	b595a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5d74:	a906      	add	r1, sp, #24
   b5d76:	f104 0018 	add.w	r0, r4, #24
   b5d7a:	f7ff ff73 	bl	b5c64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5d7e:	4605      	mov	r5, r0
   b5d80:	a807      	add	r0, sp, #28
   b5d82:	f7ff fdf4 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d86:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5d88:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5d8a:	b9b5      	cbnz	r5, b5dba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5d8c:	4b5d      	ldr	r3, [pc, #372]	; (b5f04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b5d8e:	495e      	ldr	r1, [pc, #376]	; (b5f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5d90:	9300      	str	r3, [sp, #0]
   b5d92:	2032      	movs	r0, #50	; 0x32
   b5d94:	462b      	mov	r3, r5
   b5d96:	aa06      	add	r2, sp, #24
   b5d98:	9507      	str	r5, [sp, #28]
   b5d9a:	f7fe ff25 	bl	b4be8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5d9e:	9b04      	ldr	r3, [sp, #16]
   b5da0:	4629      	mov	r1, r5
   b5da2:	8818      	ldrh	r0, [r3, #0]
   b5da4:	f7fe fdbe 	bl	b4924 <hal_ble_gap_disconnect>
   b5da8:	a805      	add	r0, sp, #20
   b5daa:	f7ff fde0 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5dae:	a803      	add	r0, sp, #12
   b5db0:	f7ff fa6c 	bl	b528c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5db4:	b00e      	add	sp, #56	; 0x38
   b5db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b5dba:	4a54      	ldr	r2, [pc, #336]	; (b5f0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5dbc:	9200      	str	r2, [sp, #0]
   b5dbe:	2300      	movs	r3, #0
   b5dc0:	4951      	ldr	r1, [pc, #324]	; (b5f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5dc2:	9307      	str	r3, [sp, #28]
   b5dc4:	aa06      	add	r2, sp, #24
   b5dc6:	2001      	movs	r0, #1
   b5dc8:	f7fe ff0e 	bl	b4be8 <log_message>
                if (impl->connectedCallback_) {
   b5dcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5dce:	2b00      	cmp	r3, #0
   b5dd0:	d0ea      	beq.n	b5da8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b5dd2:	a904      	add	r1, sp, #16
   b5dd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5dd8:	f7ff fe49 	bl	b5a6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5ddc:	e7e4      	b.n	b5da8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5dde:	89a9      	ldrh	r1, [r5, #12]
   b5de0:	4620      	mov	r0, r4
   b5de2:	f7ff fba1 	bl	b5528 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5de6:	4606      	mov	r6, r0
   b5de8:	2800      	cmp	r0, #0
   b5dea:	d0e0      	beq.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5dec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5dee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5df2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5df6:	8029      	strh	r1, [r5, #0]
   b5df8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5dfc:	429a      	cmp	r2, r3
   b5dfe:	d003      	beq.n	b5e08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b5e00:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5e04:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5e06:	e7f9      	b.n	b5dfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b5e08:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5e0c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5e10:	45b8      	cmp	r8, r7
   b5e12:	d004      	beq.n	b5e1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b5e14:	1d38      	adds	r0, r7, #4
   b5e16:	f7ff fdaa 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e1a:	3708      	adds	r7, #8
   b5e1c:	e7f8      	b.n	b5e10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b5e1e:	2300      	movs	r3, #0
   b5e20:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5e22:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5e26:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5e2a:	45b8      	cmp	r8, r7
   b5e2c:	d004      	beq.n	b5e38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b5e2e:	1d38      	adds	r0, r7, #4
   b5e30:	f7ff fd9d 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e34:	3708      	adds	r7, #8
   b5e36:	e7f8      	b.n	b5e2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b5e38:	2300      	movs	r3, #0
   b5e3a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5e3c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b5e3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5e40:	b123      	cbz	r3, b5e4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                            impl->disconnectedCallback_(*peer);
   b5e42:	4631      	mov	r1, r6
   b5e44:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5e48:	f7ff fe11 	bl	b5a6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        impl->peers_.removeOne(*peer);
   b5e4c:	4631      	mov	r1, r6
   b5e4e:	f104 0018 	add.w	r0, r4, #24
   b5e52:	f7ff ff40 	bl	b5cd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b5e56:	2220      	movs	r2, #32
   b5e58:	2300      	movs	r3, #0
   b5e5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5e5e:	4a2c      	ldr	r2, [pc, #176]	; (b5f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b5e60:	9200      	str	r2, [sp, #0]
   b5e62:	4929      	ldr	r1, [pc, #164]	; (b5f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5e64:	aa06      	add	r2, sp, #24
   b5e66:	2001      	movs	r0, #1
   b5e68:	f7fe febe 	bl	b4be8 <log_message>
   b5e6c:	e79f      	b.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5e6e:	89a9      	ldrh	r1, [r5, #12]
   b5e70:	4620      	mov	r0, r4
   b5e72:	f7ff fb59 	bl	b5528 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5e76:	2800      	cmp	r0, #0
   b5e78:	d099      	beq.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b5e7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5e7c:	2b00      	cmp	r3, #0
   b5e7e:	d096      	beq.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5e80:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5e82:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5e84:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5e88:	d001      	beq.n	b5e8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b5e8a:	2e10      	cmp	r6, #16
   b5e8c:	d117      	bne.n	b5ebe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b5e8e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5e90:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5e92:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5e94:	2506      	movs	r5, #6
                        };
   b5e96:	f88d 3015 	strb.w	r3, [sp, #21]
   b5e9a:	9104      	str	r1, [sp, #16]
   b5e9c:	f88d 2014 	strb.w	r2, [sp, #20]
   b5ea0:	9006      	str	r0, [sp, #24]
   b5ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5ea6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5ea8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5eac:	9508      	str	r5, [sp, #32]
   b5eae:	e883 0003 	stmia.w	r3, {r0, r1}
   b5eb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5eb4:	a906      	add	r1, sp, #24
   b5eb6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5eba:	4798      	blx	r3
   b5ebc:	e777      	b.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5ebe:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5ec0:	bf01      	itttt	eq
   b5ec2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5ec4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5ec6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5eca:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5ecc:	bf0f      	iteee	eq
   b5ece:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5ed2:	461a      	movne	r2, r3
   b5ed4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5ed6:	461d      	movne	r5, r3
   b5ed8:	e7dd      	b.n	b5e96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5eda:	89a9      	ldrh	r1, [r5, #12]
   b5edc:	4620      	mov	r0, r4
   b5ede:	f7ff fb23 	bl	b5528 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5ee2:	4601      	mov	r1, r0
   b5ee4:	2800      	cmp	r0, #0
   b5ee6:	f43f af62 	beq.w	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5eea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5eec:	2b00      	cmp	r3, #0
   b5eee:	f43f af5e 	beq.w	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5ef2:	686b      	ldr	r3, [r5, #4]
   b5ef4:	9306      	str	r3, [sp, #24]
   b5ef6:	aa06      	add	r2, sp, #24
   b5ef8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b5efa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5efe:	4798      	blx	r3
   b5f00:	e755      	b.n	b5dae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5f02:	bf00      	nop
   b5f04:	000b889c 	.word	0x000b889c
   b5f08:	000b881b 	.word	0x000b881b
   b5f0c:	000b88c2 	.word	0x000b88c2
   b5f10:	000b88df 	.word	0x000b88df

000b5f14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5f14:	b513      	push	{r0, r1, r4, lr}
   b5f16:	460b      	mov	r3, r1
   b5f18:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f1a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5f1e:	466c      	mov	r4, sp
   b5f20:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5f24:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5f28:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5f2c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5f30:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5f34:	b002      	add	sp, #8
   b5f36:	bd10      	pop	{r4, pc}

000b5f38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5f38:	b538      	push	{r3, r4, r5, lr}
   b5f3a:	4605      	mov	r5, r0
   b5f3c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5f3e:	f7ff ffe9 	bl	b5f14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f42:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5f44:	68a2      	ldr	r2, [r4, #8]
   b5f46:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f48:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f4a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5f4c:	68e2      	ldr	r2, [r4, #12]
   b5f4e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f50:	60e3      	str	r3, [r4, #12]
      }
   b5f52:	bd38      	pop	{r3, r4, r5, pc}

000b5f54 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5f54:	b570      	push	{r4, r5, r6, lr}
   b5f56:	4604      	mov	r4, r0
   b5f58:	b08c      	sub	sp, #48	; 0x30
   b5f5a:	460e      	mov	r6, r1
   b5f5c:	9201      	str	r2, [sp, #4]
   b5f5e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5f60:	f7ff fac2 	bl	b54e8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5f64:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b5f66:	9901      	ldr	r1, [sp, #4]
   b5f68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5f6c:	f7ff f82f 	bl	b4fce <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5f70:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5f74:	b1cd      	cbz	r5, b5faa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b5f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5f78:	9502      	str	r5, [sp, #8]
   b5f7a:	a902      	add	r1, sp, #8
   b5f7c:	a804      	add	r0, sp, #16
   b5f7e:	9303      	str	r3, [sp, #12]
   b5f80:	f7ff fcb4 	bl	b58ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5f84:	2300      	movs	r3, #0
	__x.swap(*this);
   b5f86:	a908      	add	r1, sp, #32
   b5f88:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b5f8a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b5f8c:	f7ff ffd4 	bl	b5f38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5f90:	4631      	mov	r1, r6
   b5f92:	a808      	add	r0, sp, #32
   b5f94:	f7ff ffd0 	bl	b5f38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5f98:	a808      	add	r0, sp, #32
   b5f9a:	f7ff f92b 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
   b5f9e:	a804      	add	r0, sp, #16
   b5fa0:	f7ff f928 	bl	b51f4 <_ZNSt14_Function_baseD1Ev>
    }
   b5fa4:	4620      	mov	r0, r4
   b5fa6:	b00c      	add	sp, #48	; 0x30
   b5fa8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b5faa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5fac:	e7ea      	b.n	b5f84 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5fb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fb4:	b087      	sub	sp, #28
   b5fb6:	461d      	mov	r5, r3
   b5fb8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b5fbc:	4680      	mov	r8, r0
   b5fbe:	468b      	mov	fp, r1
   b5fc0:	4692      	mov	sl, r2
   b5fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5fc4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5fc6:	2200      	movs	r2, #0
   b5fc8:	2068      	movs	r0, #104	; 0x68
   b5fca:	9102      	str	r1, [sp, #8]
   b5fcc:	9204      	str	r2, [sp, #16]
   b5fce:	f7fe f860 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5fd2:	1e06      	subs	r6, r0, #0
   b5fd4:	f106 090c 	add.w	r9, r6, #12
   b5fd8:	d018      	beq.n	b600c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b5fda:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5fdc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5fde:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5fe2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b5fe4:	4a15      	ldr	r2, [pc, #84]	; (b603c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b5fe6:	f847 2b20 	str.w	r2, [r7], #32
   b5fea:	9b03      	ldr	r3, [sp, #12]
   b5fec:	9100      	str	r1, [sp, #0]
   b5fee:	465a      	mov	r2, fp
   b5ff0:	4651      	mov	r1, sl
   b5ff2:	4648      	mov	r0, r9
   b5ff4:	f7ff ffae 	bl	b5f54 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b5ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ffa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5ffc:	682b      	ldr	r3, [r5, #0]
   b5ffe:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6002:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6008:	6823      	ldr	r3, [r4, #0]
   b600a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b600c:	a904      	add	r1, sp, #16
   b600e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6010:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6014:	f7ff fd1a 	bl	b5a4c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6018:	a805      	add	r0, sp, #20
   b601a:	f7ff fca8 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b601e:	f8d8 3000 	ldr.w	r3, [r8]
   b6022:	b93b      	cbnz	r3, b6034 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6024:	4a06      	ldr	r2, [pc, #24]	; (b6040 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6026:	4907      	ldr	r1, [pc, #28]	; (b6044 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6028:	200a      	movs	r0, #10
}
   b602a:	b007      	add	sp, #28
   b602c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6030:	f7fe bdd2 	b.w	b4bd8 <panic_>
}
   b6034:	b007      	add	sp, #28
   b6036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b603a:	bf00      	nop
   b603c:	000b8948 	.word	0x000b8948
   b6040:	000b48c5 	.word	0x000b48c5
   b6044:	000b8804 	.word	0x000b8804

000b6048 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6048:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b604a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b604c:	4604      	mov	r4, r0
   b604e:	460d      	mov	r5, r1
   b6050:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6052:	d914      	bls.n	b607e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6054:	4290      	cmp	r0, r2
   b6056:	d213      	bcs.n	b6080 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6058:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b605c:	1a75      	subs	r5, r6, r1
   b605e:	f1a1 0708 	sub.w	r7, r1, #8
   b6062:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6064:	42b7      	cmp	r7, r6
   b6066:	d018      	beq.n	b609a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6068:	b11c      	cbz	r4, b6072 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b606a:	4631      	mov	r1, r6
   b606c:	4620      	mov	r0, r4
   b606e:	f7ff fc6a 	bl	b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6072:	1d30      	adds	r0, r6, #4
   b6074:	f7ff fc7b 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6078:	3e08      	subs	r6, #8
   b607a:	3c08      	subs	r4, #8
   b607c:	e7f2      	b.n	b6064 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b607e:	d00c      	beq.n	b609a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6080:	42b5      	cmp	r5, r6
   b6082:	d00a      	beq.n	b609a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6084:	b11c      	cbz	r4, b608e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6086:	4629      	mov	r1, r5
   b6088:	4620      	mov	r0, r4
   b608a:	f7ff fc5c 	bl	b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b608e:	1d28      	adds	r0, r5, #4
   b6090:	f7ff fc6d 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6094:	3508      	adds	r5, #8
   b6096:	3408      	adds	r4, #8
   b6098:	e7f2      	b.n	b6080 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b609c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b609c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b609e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b60a0:	4605      	mov	r5, r0
        if (n > 0) {
   b60a2:	dd11      	ble.n	b60c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b60a4:	00f0      	lsls	r0, r6, #3
   b60a6:	f7fe fe4b 	bl	b4d40 <malloc>
            if (!d) {
   b60aa:	4604      	mov	r4, r0
   b60ac:	b158      	cbz	r0, b60c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b60ae:	e9d5 1200 	ldrd	r1, r2, [r5]
   b60b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b60b6:	f7ff ffc7 	bl	b6048 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b60ba:	6828      	ldr	r0, [r5, #0]
   b60bc:	f7fe fe48 	bl	b4d50 <free>
        data_ = d;
   b60c0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b60c2:	60ae      	str	r6, [r5, #8]
        return true;
   b60c4:	2001      	movs	r0, #1
    }
   b60c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b60c8:	2400      	movs	r4, #0
   b60ca:	e7f6      	b.n	b60ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b60cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b60cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60ce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b60d0:	6845      	ldr	r5, [r0, #4]
   b60d2:	4668      	mov	r0, sp
   b60d4:	f7ff fc37 	bl	b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b60d8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b60dc:	4299      	cmp	r1, r3
   b60de:	da10      	bge.n	b6102 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b60e0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b60e2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b60e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b60e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b60ec:	4629      	mov	r1, r5
   b60ee:	f105 0008 	add.w	r0, r5, #8
   b60f2:	f7ff ffa9 	bl	b6048 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b60f6:	b98d      	cbnz	r5, b611c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b60f8:	6863      	ldr	r3, [r4, #4]
   b60fa:	3301      	adds	r3, #1
   b60fc:	6063      	str	r3, [r4, #4]
    return true;
   b60fe:	2601      	movs	r6, #1
   b6100:	e006      	b.n	b6110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6102:	3101      	adds	r1, #1
   b6104:	4620      	mov	r0, r4
   b6106:	f7ff ffc9 	bl	b609c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b610a:	4606      	mov	r6, r0
   b610c:	2800      	cmp	r0, #0
   b610e:	d1e7      	bne.n	b60e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6110:	a801      	add	r0, sp, #4
   b6112:	f7ff fc2c 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6116:	4630      	mov	r0, r6
   b6118:	b002      	add	sp, #8
   b611a:	bd70      	pop	{r4, r5, r6, pc}
   b611c:	4669      	mov	r1, sp
   b611e:	4628      	mov	r0, r5
   b6120:	f7ff fc11 	bl	b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6124:	e7e8      	b.n	b60f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6126 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6126:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b612a:	4604      	mov	r4, r0
   b612c:	460d      	mov	r5, r1
   b612e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6130:	d914      	bls.n	b615c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6132:	4290      	cmp	r0, r2
   b6134:	d213      	bcs.n	b615e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6136:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b613a:	1a75      	subs	r5, r6, r1
   b613c:	f1a1 0708 	sub.w	r7, r1, #8
   b6140:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6142:	42b7      	cmp	r7, r6
   b6144:	d018      	beq.n	b6178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6146:	b11c      	cbz	r4, b6150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6148:	4631      	mov	r1, r6
   b614a:	4620      	mov	r0, r4
   b614c:	f7ff fbed 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6150:	1d30      	adds	r0, r6, #4
   b6152:	f7ff fc0c 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6156:	3e08      	subs	r6, #8
   b6158:	3c08      	subs	r4, #8
   b615a:	e7f2      	b.n	b6142 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b615c:	d00c      	beq.n	b6178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b615e:	42b5      	cmp	r5, r6
   b6160:	d00a      	beq.n	b6178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6162:	b11c      	cbz	r4, b616c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6164:	4629      	mov	r1, r5
   b6166:	4620      	mov	r0, r4
   b6168:	f7ff fbdf 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b616c:	1d28      	adds	r0, r5, #4
   b616e:	f7ff fbfe 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6172:	3508      	adds	r5, #8
   b6174:	3408      	adds	r4, #8
   b6176:	e7f2      	b.n	b615e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b617a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b617a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b617c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b617e:	4605      	mov	r5, r0
        if (n > 0) {
   b6180:	dd11      	ble.n	b61a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6182:	00f0      	lsls	r0, r6, #3
   b6184:	f7fe fddc 	bl	b4d40 <malloc>
            if (!d) {
   b6188:	4604      	mov	r4, r0
   b618a:	b158      	cbz	r0, b61a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b618c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6190:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6194:	f7ff ffc7 	bl	b6126 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6198:	6828      	ldr	r0, [r5, #0]
   b619a:	f7fe fdd9 	bl	b4d50 <free>
        data_ = d;
   b619e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b61a0:	60ae      	str	r6, [r5, #8]
        return true;
   b61a2:	2001      	movs	r0, #1
    }
   b61a4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b61a6:	2400      	movs	r4, #0
   b61a8:	e7f6      	b.n	b6198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b61aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b61aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b61ac:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b61ae:	6845      	ldr	r5, [r0, #4]
   b61b0:	4668      	mov	r0, sp
   b61b2:	f7ff fbba 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61b6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b61ba:	4299      	cmp	r1, r3
   b61bc:	da10      	bge.n	b61e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b61be:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b61c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b61c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b61c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b61ca:	4629      	mov	r1, r5
   b61cc:	f105 0008 	add.w	r0, r5, #8
   b61d0:	f7ff ffa9 	bl	b6126 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b61d4:	b98d      	cbnz	r5, b61fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b61d6:	6863      	ldr	r3, [r4, #4]
   b61d8:	3301      	adds	r3, #1
   b61da:	6063      	str	r3, [r4, #4]
    return true;
   b61dc:	2601      	movs	r6, #1
   b61de:	e006      	b.n	b61ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61e0:	3101      	adds	r1, #1
   b61e2:	4620      	mov	r0, r4
   b61e4:	f7ff ffc9 	bl	b617a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b61e8:	4606      	mov	r6, r0
   b61ea:	2800      	cmp	r0, #0
   b61ec:	d1e7      	bne.n	b61be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b61ee:	a801      	add	r0, sp, #4
   b61f0:	f7ff fbbd 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61f4:	4630      	mov	r0, r6
   b61f6:	b002      	add	sp, #8
   b61f8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b61fa:	4669      	mov	r1, sp
   b61fc:	4628      	mov	r0, r5
   b61fe:	f7ff fb94 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6202:	e7e8      	b.n	b61d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6208:	4617      	mov	r7, r2
   b620a:	b0a1      	sub	sp, #132	; 0x84
   b620c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b620e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6210:	460e      	mov	r6, r1
    WiringBleLock lk;
   b6212:	f7ff f82d 	bl	b5270 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6216:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6218:	7923      	ldrb	r3, [r4, #4]
   b621a:	b953      	cbnz	r3, b6232 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b621c:	4639      	mov	r1, r7
   b621e:	4640      	mov	r0, r8
   b6220:	f7ff fb83 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6224:	a80a      	add	r0, sp, #40	; 0x28
   b6226:	f7ff f831 	bl	b528c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b622a:	4640      	mov	r0, r8
   b622c:	b021      	add	sp, #132	; 0x84
   b622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6232:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6234:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6238:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b623c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b623e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b6242:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6246:	9b03      	ldr	r3, [sp, #12]
   b6248:	429d      	cmp	r5, r3
   b624a:	d021      	beq.n	b6290 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b624c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6250:	4658      	mov	r0, fp
   b6252:	f109 0114 	add.w	r1, r9, #20
   b6256:	f7ff f8bc 	bl	b53d2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b625a:	b1b8      	cbz	r0, b628c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b625c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6260:	4650      	mov	r0, sl
   b6262:	f7ff f8b6 	bl	b53d2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6266:	b188      	cbz	r0, b628c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6268:	6823      	ldr	r3, [r4, #0]
   b626a:	f8d9 2000 	ldr.w	r2, [r9]
   b626e:	4053      	eors	r3, r2
   b6270:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6274:	d10a      	bne.n	b628c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6276:	2220      	movs	r2, #32
   b6278:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b627c:	4a5e      	ldr	r2, [pc, #376]	; (b63f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b627e:	9200      	str	r2, [sp, #0]
   b6280:	aa15      	add	r2, sp, #84	; 0x54
   b6282:	495e      	ldr	r1, [pc, #376]	; (b63fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6284:	2032      	movs	r0, #50	; 0x32
   b6286:	f7fe fcaf 	bl	b4be8 <log_message>
   b628a:	e7c7      	b.n	b621c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b628c:	3508      	adds	r5, #8
   b628e:	e7da      	b.n	b6246 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6290:	4650      	mov	r0, sl
   b6292:	f7ff f86f 	bl	b5374 <_ZNK8particle7BleUuid7isValidEv>
   b6296:	b960      	cbnz	r0, b62b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b6298:	4959      	ldr	r1, [pc, #356]	; (b6400 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b629a:	2201      	movs	r2, #1
   b629c:	a815      	add	r0, sp, #84	; 0x54
   b629e:	ad15      	add	r5, sp, #84	; 0x54
   b62a0:	f7ff f840 	bl	b5324 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b62a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62a6:	46d4      	mov	ip, sl
   b62a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62ac:	682b      	ldr	r3, [r5, #0]
   b62ae:	f8cc 3000 	str.w	r3, [ip]
   b62b2:	6833      	ldr	r3, [r6, #0]
   b62b4:	e9d3 5300 	ldrd	r5, r3, [r3]
   b62b8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b62bc:	455d      	cmp	r5, fp
   b62be:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b62c0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b62c2:	d06e      	beq.n	b63a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b62c4:	f855 0b08 	ldr.w	r0, [r5], #8
   b62c8:	f7ff f883 	bl	b53d2 <_ZNK8particle7BleUuideqERKS0_>
   b62cc:	2800      	cmp	r0, #0
   b62ce:	d0f5      	beq.n	b62bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b62d0:	f104 0a14 	add.w	sl, r4, #20
   b62d4:	4650      	mov	r0, sl
   b62d6:	f7ff f84d 	bl	b5374 <_ZNK8particle7BleUuid7isValidEv>
   b62da:	b988      	cbnz	r0, b6300 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b62dc:	4b49      	ldr	r3, [pc, #292]	; (b6404 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b62de:	4948      	ldr	r1, [pc, #288]	; (b6400 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b62e0:	881a      	ldrh	r2, [r3, #0]
   b62e2:	3201      	adds	r2, #1
   b62e4:	b292      	uxth	r2, r2
   b62e6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b62e8:	a815      	add	r0, sp, #84	; 0x54
   b62ea:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b62ec:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b62ee:	f7ff f838 	bl	b5362 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b62f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62f4:	46d4      	mov	ip, sl
   b62f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62fa:	682b      	ldr	r3, [r5, #0]
   b62fc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6300:	4b41      	ldr	r3, [pc, #260]	; (b6408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b6302:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b6304:	2228      	movs	r2, #40	; 0x28
   b6306:	2100      	movs	r1, #0
   b6308:	a816      	add	r0, sp, #88	; 0x58
   b630a:	f001 ffe7 	bl	b82dc <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b630e:	4651      	mov	r1, sl
   b6310:	a804      	add	r0, sp, #16
   b6312:	f7ff f841 	bl	b5398 <_ZN8particle7BleUuid7halUUIDEv>
   b6316:	ab04      	add	r3, sp, #16
   b6318:	aa18      	add	r2, sp, #96	; 0x60
   b631a:	f10d 0c20 	add.w	ip, sp, #32
   b631e:	6818      	ldr	r0, [r3, #0]
   b6320:	6859      	ldr	r1, [r3, #4]
   b6322:	4615      	mov	r5, r2
   b6324:	c503      	stmia	r5!, {r0, r1}
   b6326:	3308      	adds	r3, #8
   b6328:	4563      	cmp	r3, ip
   b632a:	462a      	mov	r2, r5
   b632c:	d1f7      	bne.n	b631e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b632e:	6818      	ldr	r0, [r3, #0]
   b6330:	6028      	str	r0, [r5, #0]
    return value_;
   b6332:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b6334:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6338:	f8d9 3000 	ldr.w	r3, [r9]
   b633c:	8a9b      	ldrh	r3, [r3, #20]
   b633e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b6342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6344:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b6346:	4b31      	ldr	r3, [pc, #196]	; (b640c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6348:	2200      	movs	r2, #0
   b634a:	1da1      	adds	r1, r4, #6
   b634c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b634e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6352:	f7fe fb19 	bl	b4988 <hal_ble_gatt_server_add_characteristic>
   b6356:	2800      	cmp	r0, #0
   b6358:	f47f af60 	bne.w	b621c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b635c:	2301      	movs	r3, #1
   b635e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6360:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b6362:	4639      	mov	r1, r7
        return characteristics_;
   b6364:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6366:	a80d      	add	r0, sp, #52	; 0x34
   b6368:	f7ff fadf 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b636c:	4620      	mov	r0, r4
   b636e:	a90d      	add	r1, sp, #52	; 0x34
   b6370:	f7ff ff1b 	bl	b61aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6374:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6376:	a80e      	add	r0, sp, #56	; 0x38
   b6378:	f7ff faf9 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b637c:	2c00      	cmp	r4, #0
   b637e:	f47f af4d 	bne.w	b621c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b6382:	2320      	movs	r3, #32
   b6384:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6388:	4b21      	ldr	r3, [pc, #132]	; (b6410 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b638a:	9300      	str	r3, [sp, #0]
   b638c:	aa0d      	add	r2, sp, #52	; 0x34
   b638e:	4623      	mov	r3, r4
   b6390:	e777      	b.n	b6282 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b6392:	4639      	mov	r1, r7
   b6394:	4640      	mov	r0, r8
   b6396:	f7ff fac8 	bl	b592a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b639a:	a80c      	add	r0, sp, #48	; 0x30
   b639c:	f7ff fae7 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63a0:	e740      	b.n	b6224 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b63a2:	a80b      	add	r0, sp, #44	; 0x2c
   b63a4:	f7ff f932 	bl	b560c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b63a8:	4651      	mov	r1, sl
   b63aa:	a815      	add	r0, sp, #84	; 0x54
   b63ac:	f7fe fff4 	bl	b5398 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b63b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b63b2:	2300      	movs	r3, #0
   b63b4:	3214      	adds	r2, #20
   b63b6:	a915      	add	r1, sp, #84	; 0x54
   b63b8:	2001      	movs	r0, #1
   b63ba:	f7fe fabd 	bl	b4938 <hal_ble_gatt_server_add_service>
   b63be:	2800      	cmp	r0, #0
   b63c0:	d1e7      	bne.n	b6392 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b63c2:	6835      	ldr	r5, [r6, #0]
   b63c4:	a90b      	add	r1, sp, #44	; 0x2c
   b63c6:	a80d      	add	r0, sp, #52	; 0x34
   b63c8:	f7ff fabd 	bl	b5946 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b63cc:	4628      	mov	r0, r5
   b63ce:	a90d      	add	r1, sp, #52	; 0x34
   b63d0:	f7ff fe7c 	bl	b60cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b63d4:	4605      	mov	r5, r0
   b63d6:	a80e      	add	r0, sp, #56	; 0x38
   b63d8:	f7ff fac9 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63dc:	2d00      	cmp	r5, #0
   b63de:	d0d8      	beq.n	b6392 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b63e0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b63e2:	6853      	ldr	r3, [r2, #4]
   b63e4:	6812      	ldr	r2, [r2, #0]
   b63e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b63ea:	3b01      	subs	r3, #1
   b63ec:	a80c      	add	r0, sp, #48	; 0x30
   b63ee:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b63f2:	f7ff fabc 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63f6:	e76b      	b.n	b62d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b63f8:	000b88ec 	.word	0x000b88ec
   b63fc:	000b881b 	.word	0x000b881b
   b6400:	000b89b2 	.word	0x000b89b2
   b6404:	2003e694 	.word	0x2003e694
   b6408:	002c0003 	.word	0x002c0003
   b640c:	000b57a5 	.word	0x000b57a5
   b6410:	000b8917 	.word	0x000b8917

000b6414 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6414:	4802      	ldr	r0, [pc, #8]	; (b6420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6416:	2300      	movs	r3, #0
   b6418:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b641a:	f7fe badd 	b.w	b49d8 <os_mutex_recursive_create>
   b641e:	bf00      	nop
   b6420:	2003e698 	.word	0x2003e698

000b6424 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6426:	4606      	mov	r6, r0
   b6428:	460d      	mov	r5, r1
  size_t n = 0;
   b642a:	188f      	adds	r7, r1, r2
   b642c:	2400      	movs	r4, #0
  while (size--) {
   b642e:	42bd      	cmp	r5, r7
   b6430:	d00c      	beq.n	b644c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6432:	6833      	ldr	r3, [r6, #0]
   b6434:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6438:	689b      	ldr	r3, [r3, #8]
   b643a:	4630      	mov	r0, r6
   b643c:	4798      	blx	r3
     if (chunk>=0)
   b643e:	1e03      	subs	r3, r0, #0
   b6440:	db01      	blt.n	b6446 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6442:	441c      	add	r4, r3
  while (size--) {
   b6444:	e7f3      	b.n	b642e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6446:	2c00      	cmp	r4, #0
   b6448:	bf08      	it	eq
   b644a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b644c:	4620      	mov	r0, r4
   b644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6450 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6450:	b513      	push	{r0, r1, r4, lr}
   b6452:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6454:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6456:	b159      	cbz	r1, b6470 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6458:	9101      	str	r1, [sp, #4]
   b645a:	f001 ff9e 	bl	b839a <strlen>
   b645e:	6823      	ldr	r3, [r4, #0]
   b6460:	9901      	ldr	r1, [sp, #4]
   b6462:	68db      	ldr	r3, [r3, #12]
   b6464:	4602      	mov	r2, r0
   b6466:	4620      	mov	r0, r4
    }
   b6468:	b002      	add	sp, #8
   b646a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b646e:	4718      	bx	r3
    }
   b6470:	b002      	add	sp, #8
   b6472:	bd10      	pop	{r4, pc}

000b6474 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6474:	6803      	ldr	r3, [r0, #0]
   b6476:	689b      	ldr	r3, [r3, #8]
   b6478:	4718      	bx	r3

000b647a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b647a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b647c:	210d      	movs	r1, #13
{
   b647e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6480:	f7ff fff8 	bl	b6474 <_ZN5Print5printEc>
  n += print('\n');
   b6484:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6486:	4604      	mov	r4, r0
  n += print('\n');
   b6488:	4628      	mov	r0, r5
   b648a:	f7ff fff3 	bl	b6474 <_ZN5Print5printEc>
  return n;
}
   b648e:	4420      	add	r0, r4
   b6490:	bd38      	pop	{r3, r4, r5, pc}

000b6492 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6492:	b530      	push	{r4, r5, lr}
   b6494:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6496:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6498:	2a01      	cmp	r2, #1
  *str = '\0';
   b649a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b649e:	bf98      	it	ls
   b64a0:	220a      	movls	r2, #10
   b64a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b64a4:	460d      	mov	r5, r1
   b64a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b64aa:	fb01 5312 	mls	r3, r1, r2, r5
   b64ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64b2:	2b09      	cmp	r3, #9
   b64b4:	bf94      	ite	ls
   b64b6:	3330      	addls	r3, #48	; 0x30
   b64b8:	3337      	addhi	r3, #55	; 0x37
   b64ba:	b2db      	uxtb	r3, r3
  } while(n);
   b64bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b64c2:	d9ef      	bls.n	b64a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b64c4:	4621      	mov	r1, r4
   b64c6:	f7ff ffc3 	bl	b6450 <_ZN5Print5writeEPKc>
}
   b64ca:	b00b      	add	sp, #44	; 0x2c
   b64cc:	bd30      	pop	{r4, r5, pc}

000b64ce <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b64ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64d2:	b086      	sub	sp, #24
   b64d4:	af00      	add	r7, sp, #0
   b64d6:	4605      	mov	r5, r0
   b64d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b64da:	1d38      	adds	r0, r7, #4
   b64dc:	2114      	movs	r1, #20
{
   b64de:	4614      	mov	r4, r2
    va_copy(args2, args);
   b64e0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b64e2:	f7fe fc45 	bl	b4d70 <vsnprintf>

    if (n<bufsize)
   b64e6:	2813      	cmp	r0, #19
   b64e8:	d80e      	bhi.n	b6508 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b64ea:	1d39      	adds	r1, r7, #4
   b64ec:	4628      	mov	r0, r5
   b64ee:	f7ff ffaf 	bl	b6450 <_ZN5Print5writeEPKc>
   b64f2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b64f4:	b11e      	cbz	r6, b64fe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b64f6:	4628      	mov	r0, r5
   b64f8:	f7ff ffbf 	bl	b647a <_ZN5Print7printlnEv>
   b64fc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b64fe:	4620      	mov	r0, r4
   b6500:	3718      	adds	r7, #24
   b6502:	46bd      	mov	sp, r7
   b6504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6508:	f100 0308 	add.w	r3, r0, #8
   b650c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6510:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6512:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6516:	4622      	mov	r2, r4
   b6518:	1c41      	adds	r1, r0, #1
   b651a:	683b      	ldr	r3, [r7, #0]
   b651c:	4668      	mov	r0, sp
   b651e:	f7fe fc27 	bl	b4d70 <vsnprintf>
  return write(str);
   b6522:	4669      	mov	r1, sp
   b6524:	4628      	mov	r0, r5
   b6526:	f7ff ff93 	bl	b6450 <_ZN5Print5writeEPKc>
   b652a:	4604      	mov	r4, r0
   b652c:	46c5      	mov	sp, r8
   b652e:	e7e1      	b.n	b64f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6530 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6530:	6880      	ldr	r0, [r0, #8]
   b6532:	6803      	ldr	r3, [r0, #0]
   b6534:	68db      	ldr	r3, [r3, #12]
   b6536:	4718      	bx	r3

000b6538 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6538:	4770      	bx	lr

000b653a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b653a:	4608      	mov	r0, r1
   b653c:	b111      	cbz	r1, b6544 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b653e:	680b      	ldr	r3, [r1, #0]
   b6540:	685b      	ldr	r3, [r3, #4]
   b6542:	4718      	bx	r3
}
   b6544:	4770      	bx	lr

000b6546 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b6546:	4770      	bx	lr

000b6548 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6548:	4770      	bx	lr

000b654a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b654a:	4770      	bx	lr

000b654c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b654c:	4770      	bx	lr

000b654e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b654e:	b538      	push	{r3, r4, r5, lr}
   b6550:	4604      	mov	r4, r0
   b6552:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b6554:	6800      	ldr	r0, [r0, #0]
   b6556:	212e      	movs	r1, #46	; 0x2e
   b6558:	f001 ff03 	bl	b8362 <strchrnul>
    size = s - category;
   b655c:	6823      	ldr	r3, [r4, #0]
   b655e:	1ac3      	subs	r3, r0, r3
   b6560:	602b      	str	r3, [r5, #0]
    if (size) {
   b6562:	b123      	cbz	r3, b656e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b6564:	7803      	ldrb	r3, [r0, #0]
   b6566:	b103      	cbz	r3, b656a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6568:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b656a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b656c:	6020      	str	r0, [r4, #0]
}
   b656e:	4618      	mov	r0, r3
   b6570:	bd38      	pop	{r3, r4, r5, pc}

000b6572 <_ZN5spark16JSONStreamWriterD0Ev>:
   b6572:	b510      	push	{r4, lr}
   b6574:	210c      	movs	r1, #12
   b6576:	4604      	mov	r4, r0
   b6578:	f7fd fd8f 	bl	b409a <_ZdlPvj>
   b657c:	4620      	mov	r0, r4
   b657e:	bd10      	pop	{r4, pc}

000b6580 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6580:	b510      	push	{r4, lr}
   b6582:	2104      	movs	r1, #4
   b6584:	4604      	mov	r4, r0
   b6586:	f7fd fd88 	bl	b409a <_ZdlPvj>
   b658a:	4620      	mov	r0, r4
   b658c:	bd10      	pop	{r4, pc}

000b658e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b658e:	b510      	push	{r4, lr}
   b6590:	2104      	movs	r1, #4
   b6592:	4604      	mov	r4, r0
   b6594:	f7fd fd81 	bl	b409a <_ZdlPvj>
   b6598:	4620      	mov	r0, r4
   b659a:	bd10      	pop	{r4, pc}

000b659c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b659c:	f7fe ba2c 	b.w	b49f8 <os_mutex_recursive_lock>

000b65a0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b65a0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b65a2:	f001 fee8 	bl	b8376 <strcmp>
}
   b65a6:	fab0 f080 	clz	r0, r0
   b65aa:	0940      	lsrs	r0, r0, #5
   b65ac:	bd08      	pop	{r3, pc}

000b65ae <__tcf_1>:
   b65ae:	4770      	bx	lr

000b65b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b65b0:	b510      	push	{r4, lr}
   b65b2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b65b4:	f001 f8b6 	bl	b7724 <_Z16_fetch_usbserialv>
   b65b8:	4284      	cmp	r4, r0
   b65ba:	d010      	beq.n	b65de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b65bc:	f001 fcca 	bl	b7f54 <_Z22__fetch_global_Serial1v>
   b65c0:	4284      	cmp	r4, r0
   b65c2:	d105      	bne.n	b65d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b65c4:	f001 fcc6 	bl	b7f54 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b65c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b65cc:	f001 b929 	b.w	b7822 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b65d0:	b12c      	cbz	r4, b65de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b65d2:	6823      	ldr	r3, [r4, #0]
   b65d4:	4620      	mov	r0, r4
   b65d6:	685b      	ldr	r3, [r3, #4]
}
   b65d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b65dc:	4718      	bx	r3
   b65de:	bd10      	pop	{r4, pc}

000b65e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b65e0:	680b      	ldr	r3, [r1, #0]
   b65e2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b65e4:	684b      	ldr	r3, [r1, #4]
   b65e6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b65e8:	b113      	cbz	r3, b65f0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b65ea:	685a      	ldr	r2, [r3, #4]
   b65ec:	3201      	adds	r2, #1
   b65ee:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b65f0:	4770      	bx	lr

000b65f2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b65f2:	b513      	push	{r0, r1, r4, lr}
   b65f4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b65f6:	4608      	mov	r0, r1
   b65f8:	9101      	str	r1, [sp, #4]
   b65fa:	f001 fece 	bl	b839a <strlen>
   b65fe:	9901      	ldr	r1, [sp, #4]
   b6600:	4602      	mov	r2, r0
   b6602:	4620      	mov	r0, r4
}
   b6604:	b002      	add	sp, #8
   b6606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b660a:	f001 bc0f 	b.w	b7e2c <_ZN5spark10JSONWriter5valueEPKcj>

000b660e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b660e:	b513      	push	{r0, r1, r4, lr}
   b6610:	4604      	mov	r4, r0
    write(str, strlen(str));
   b6612:	4608      	mov	r0, r1
   b6614:	9101      	str	r1, [sp, #4]
   b6616:	f001 fec0 	bl	b839a <strlen>
   b661a:	6823      	ldr	r3, [r4, #0]
   b661c:	9901      	ldr	r1, [sp, #4]
   b661e:	68db      	ldr	r3, [r3, #12]
   b6620:	4602      	mov	r2, r0
   b6622:	4620      	mov	r0, r4
}
   b6624:	b002      	add	sp, #8
   b6626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b662a:	4718      	bx	r3

000b662c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b662c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b662e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6630:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6634:	68db      	ldr	r3, [r3, #12]
   b6636:	2201      	movs	r2, #1
   b6638:	f10d 0107 	add.w	r1, sp, #7
   b663c:	4798      	blx	r3
}
   b663e:	b003      	add	sp, #12
   b6640:	f85d fb04 	ldr.w	pc, [sp], #4

000b6644 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6644:	b40e      	push	{r1, r2, r3}
   b6646:	b503      	push	{r0, r1, lr}
   b6648:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b664a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b664c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b6650:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b6652:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b6654:	f7ff ff3b 	bl	b64ce <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b6658:	b002      	add	sp, #8
   b665a:	f85d eb04 	ldr.w	lr, [sp], #4
   b665e:	b003      	add	sp, #12
   b6660:	4770      	bx	lr

000b6662 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b6662:	680a      	ldr	r2, [r1, #0]
   b6664:	6002      	str	r2, [r0, #0]
   b6666:	684a      	ldr	r2, [r1, #4]
   b6668:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b666a:	2200      	movs	r2, #0
   b666c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6670:	b510      	push	{r4, lr}
   b6672:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6674:	688c      	ldr	r4, [r1, #8]
   b6676:	6084      	str	r4, [r0, #8]
   b6678:	68cc      	ldr	r4, [r1, #12]
   b667a:	60c4      	str	r4, [r0, #12]
   b667c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b667e:	608a      	str	r2, [r1, #8]
   b6680:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6682:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6684:	610a      	str	r2, [r1, #16]
   b6686:	bd10      	pop	{r4, pc}

000b6688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b668c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6690:	f04f 0a14 	mov.w	sl, #20
   b6694:	9300      	str	r3, [sp, #0]
   b6696:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b669a:	4b18      	ldr	r3, [pc, #96]	; (b66fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b669c:	10a4      	asrs	r4, r4, #2
   b669e:	4617      	mov	r7, r2
   b66a0:	435c      	muls	r4, r3
   b66a2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b66a4:	2c00      	cmp	r4, #0
   b66a6:	dd21      	ble.n	b66ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b66a8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b66aa:	fb0a f006 	mul.w	r0, sl, r6
   b66ae:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b66b2:	463a      	mov	r2, r7
   b66b4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b66b8:	5828      	ldr	r0, [r5, r0]
   b66ba:	9101      	str	r1, [sp, #4]
   b66bc:	455f      	cmp	r7, fp
   b66be:	bf28      	it	cs
   b66c0:	465a      	movcs	r2, fp
   b66c2:	f001 fe72 	bl	b83aa <strncmp>
                if (cmp == 0) {
   b66c6:	2800      	cmp	r0, #0
   b66c8:	9901      	ldr	r1, [sp, #4]
   b66ca:	f04f 0301 	mov.w	r3, #1
   b66ce:	d10b      	bne.n	b66e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b66d0:	455f      	cmp	r7, fp
   b66d2:	d103      	bne.n	b66dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b66d4:	9a00      	ldr	r2, [sp, #0]
   b66d6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b66d8:	4634      	mov	r4, r6
   b66da:	e7e3      	b.n	b66a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b66dc:	d9fc      	bls.n	b66d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b66de:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b66e0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b66e4:	3e01      	subs	r6, #1
   b66e6:	e7f7      	b.n	b66d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b66e8:	dbf9      	blt.n	b66de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b66ea:	e7f5      	b.n	b66d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b66ec:	eba5 0508 	sub.w	r5, r5, r8
}
   b66f0:	4802      	ldr	r0, [pc, #8]	; (b66fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b66f2:	10ad      	asrs	r5, r5, #2
   b66f4:	4368      	muls	r0, r5
   b66f6:	b003      	add	sp, #12
   b66f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b66fc:	cccccccd 	.word	0xcccccccd

000b6700 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6702:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6704:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6706:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6708:	b303      	cbz	r3, b674c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b670a:	b1f9      	cbz	r1, b674c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b670c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b670e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6712:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6714:	a903      	add	r1, sp, #12
   b6716:	a801      	add	r0, sp, #4
   b6718:	f7ff ff19 	bl	b654e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b671c:	4601      	mov	r1, r0
   b671e:	b1a8      	cbz	r0, b674c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6720:	f10d 030b 	add.w	r3, sp, #11
   b6724:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6726:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b672a:	4620      	mov	r0, r4
   b672c:	f7ff ffac 	bl	b6688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6730:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6734:	b153      	cbz	r3, b674c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6736:	6823      	ldr	r3, [r4, #0]
   b6738:	2414      	movs	r4, #20
   b673a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b673e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6740:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6744:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6746:	bfa8      	it	ge
   b6748:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b674a:	e7e3      	b.n	b6714 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b674c:	4628      	mov	r0, r5
   b674e:	b004      	add	sp, #16
   b6750:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6754:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6756:	4c09      	ldr	r4, [pc, #36]	; (b677c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6758:	7823      	ldrb	r3, [r4, #0]
   b675a:	f3bf 8f5b 	dmb	ish
   b675e:	07db      	lsls	r3, r3, #31
   b6760:	d409      	bmi.n	b6776 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6762:	4620      	mov	r0, r4
   b6764:	f7fd fca8 	bl	b40b8 <__cxa_guard_acquire>
   b6768:	b128      	cbz	r0, b6776 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b676a:	4620      	mov	r0, r4
   b676c:	f7fd fca9 	bl	b40c2 <__cxa_guard_release>
   b6770:	4803      	ldr	r0, [pc, #12]	; (b6780 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6772:	f001 fd6d 	bl	b8250 <atexit>
}
   b6776:	4803      	ldr	r0, [pc, #12]	; (b6784 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6778:	bd10      	pop	{r4, pc}
   b677a:	bf00      	nop
   b677c:	2003e6a4 	.word	0x2003e6a4
   b6780:	000b6547 	.word	0x000b6547
   b6784:	2003e598 	.word	0x2003e598

000b6788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6788:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b678a:	4c09      	ldr	r4, [pc, #36]	; (b67b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b678c:	7823      	ldrb	r3, [r4, #0]
   b678e:	f3bf 8f5b 	dmb	ish
   b6792:	07db      	lsls	r3, r3, #31
   b6794:	d409      	bmi.n	b67aa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6796:	4620      	mov	r0, r4
   b6798:	f7fd fc8e 	bl	b40b8 <__cxa_guard_acquire>
   b679c:	b128      	cbz	r0, b67aa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b679e:	4620      	mov	r0, r4
   b67a0:	f7fd fc8f 	bl	b40c2 <__cxa_guard_release>
   b67a4:	4803      	ldr	r0, [pc, #12]	; (b67b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b67a6:	f001 fd53 	bl	b8250 <atexit>
    return &factory;
}
   b67aa:	4803      	ldr	r0, [pc, #12]	; (b67b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b67ac:	bd10      	pop	{r4, pc}
   b67ae:	bf00      	nop
   b67b0:	2003e6a8 	.word	0x2003e6a8
   b67b4:	000b65af 	.word	0x000b65af
   b67b8:	2003e59c 	.word	0x2003e59c

000b67bc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b67bc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b67be:	2500      	movs	r5, #0
   b67c0:	4604      	mov	r4, r0
   b67c2:	e9c0 5500 	strd	r5, r5, [r0]
   b67c6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b67ca:	6085      	str	r5, [r0, #8]
   b67cc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b67ce:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b67d2:	f7fe f901 	bl	b49d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b67d6:	f7ff ffbd 	bl	b6754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b67da:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b67dc:	f7ff ffd4 	bl	b6788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b67e0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b67e2:	6220      	str	r0, [r4, #32]
}
   b67e4:	4620      	mov	r0, r4
   b67e6:	bd38      	pop	{r3, r4, r5, pc}

000b67e8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b67e8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b67ea:	4c0a      	ldr	r4, [pc, #40]	; (b6814 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b67ec:	7823      	ldrb	r3, [r4, #0]
   b67ee:	f3bf 8f5b 	dmb	ish
   b67f2:	07db      	lsls	r3, r3, #31
   b67f4:	d40c      	bmi.n	b6810 <_ZN5spark10LogManager8instanceEv+0x28>
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7fd fc5e 	bl	b40b8 <__cxa_guard_acquire>
   b67fc:	b140      	cbz	r0, b6810 <_ZN5spark10LogManager8instanceEv+0x28>
   b67fe:	4806      	ldr	r0, [pc, #24]	; (b6818 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6800:	f7ff ffdc 	bl	b67bc <_ZN5spark10LogManagerC1Ev>
   b6804:	4620      	mov	r0, r4
   b6806:	f7fd fc5c 	bl	b40c2 <__cxa_guard_release>
   b680a:	4804      	ldr	r0, [pc, #16]	; (b681c <_ZN5spark10LogManager8instanceEv+0x34>)
   b680c:	f001 fd20 	bl	b8250 <atexit>
    return &mgr;
}
   b6810:	4801      	ldr	r0, [pc, #4]	; (b6818 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6812:	bd10      	pop	{r4, pc}
   b6814:	2003e6a0 	.word	0x2003e6a0
   b6818:	2003e6b0 	.word	0x2003e6b0
   b681c:	000b6d3d 	.word	0x000b6d3d

000b6820 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6820:	4a02      	ldr	r2, [pc, #8]	; (b682c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6822:	4903      	ldr	r1, [pc, #12]	; (b6830 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6824:	4803      	ldr	r0, [pc, #12]	; (b6834 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6826:	2300      	movs	r3, #0
   b6828:	f7fe b9f6 	b.w	b4c18 <log_set_callbacks>
   b682c:	000b6b21 	.word	0x000b6b21
   b6830:	000b6aad 	.word	0x000b6aad
   b6834:	000b6a2d 	.word	0x000b6a2d

000b6838 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6838:	2300      	movs	r3, #0
   b683a:	461a      	mov	r2, r3
   b683c:	4619      	mov	r1, r3
   b683e:	4618      	mov	r0, r3
   b6840:	f7fe b9ea 	b.w	b4c18 <log_set_callbacks>

000b6844 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6844:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6846:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6848:	4604      	mov	r4, r0
   b684a:	4668      	mov	r0, sp
   b684c:	f7ff fec8 	bl	b65e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6850:	466a      	mov	r2, sp
   b6852:	4629      	mov	r1, r5
   b6854:	4620      	mov	r0, r4
   b6856:	f001 fa09 	bl	b7c6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b685a:	a801      	add	r0, sp, #4
   b685c:	f7ff f887 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6860:	4620      	mov	r0, r4
   b6862:	b003      	add	sp, #12
   b6864:	bd30      	pop	{r4, r5, pc}

000b6866 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6866:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6868:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b686a:	4604      	mov	r4, r0
   b686c:	4668      	mov	r0, sp
   b686e:	f7ff feb7 	bl	b65e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b6872:	466a      	mov	r2, sp
   b6874:	4629      	mov	r1, r5
   b6876:	4620      	mov	r0, r4
   b6878:	f001 f9d4 	bl	b7c24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b687c:	a801      	add	r0, sp, #4
   b687e:	f7ff f876 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6882:	4620      	mov	r0, r4
   b6884:	b003      	add	sp, #12
   b6886:	bd30      	pop	{r4, r5, pc}

000b6888 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6888:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b688a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b688c:	4604      	mov	r4, r0
   b688e:	4668      	mov	r0, sp
   b6890:	f7ff fea6 	bl	b65e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b6894:	466a      	mov	r2, sp
   b6896:	4629      	mov	r1, r5
   b6898:	4620      	mov	r0, r4
   b689a:	f001 f96c 	bl	b7b76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b689e:	a801      	add	r0, sp, #4
   b68a0:	f7ff f865 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68a4:	4620      	mov	r0, r4
   b68a6:	b003      	add	sp, #12
   b68a8:	bd30      	pop	{r4, r5, pc}
	...

000b68ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b68ac:	b570      	push	{r4, r5, r6, lr}
   b68ae:	b08a      	sub	sp, #40	; 0x28
   b68b0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b68b2:	4601      	mov	r1, r0
   b68b4:	a804      	add	r0, sp, #16
   b68b6:	f7ff ffc5 	bl	b6844 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b68ba:	4e14      	ldr	r6, [pc, #80]	; (b690c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b68bc:	a804      	add	r0, sp, #16
   b68be:	f001 f9ed 	bl	b7c9c <_ZN5spark18JSONObjectIterator4nextEv>
   b68c2:	b1e8      	cbz	r0, b6900 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b68c4:	a904      	add	r1, sp, #16
   b68c6:	4668      	mov	r0, sp
   b68c8:	f7ff ffcd 	bl	b6866 <_ZNK5spark18JSONObjectIterator4nameEv>
   b68cc:	9802      	ldr	r0, [sp, #8]
   b68ce:	4631      	mov	r1, r6
   b68d0:	f7ff fe66 	bl	b65a0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b68d4:	4604      	mov	r4, r0
   b68d6:	b110      	cbz	r0, b68de <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b68d8:	1e2c      	subs	r4, r5, #0
   b68da:	bf18      	it	ne
   b68dc:	2401      	movne	r4, #1
   b68de:	a801      	add	r0, sp, #4
   b68e0:	f7ff f845 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68e4:	2c00      	cmp	r4, #0
   b68e6:	d0e9      	beq.n	b68bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b68e8:	a904      	add	r1, sp, #16
   b68ea:	4668      	mov	r0, sp
   b68ec:	f7ff ffcc 	bl	b6888 <_ZNK5spark18JSONObjectIterator5valueEv>
   b68f0:	4668      	mov	r0, sp
   b68f2:	f001 f976 	bl	b7be2 <_ZNK5spark9JSONValue5toIntEv>
   b68f6:	6028      	str	r0, [r5, #0]
   b68f8:	a801      	add	r0, sp, #4
   b68fa:	f7ff f838 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68fe:	e7dd      	b.n	b68bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6900:	a805      	add	r0, sp, #20
   b6902:	f7ff f834 	bl	b596e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6906:	b00a      	add	sp, #40	; 0x28
   b6908:	bd70      	pop	{r4, r5, r6, pc}
   b690a:	bf00      	nop
   b690c:	000b89d2 	.word	0x000b89d2

000b6910 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6910:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6912:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6914:	4620      	mov	r0, r4
   b6916:	4913      	ldr	r1, [pc, #76]	; (b6964 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6918:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b691a:	f001 fd2c 	bl	b8376 <strcmp>
   b691e:	b950      	cbnz	r0, b6936 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6920:	f000 ff00 	bl	b7724 <_Z16_fetch_usbserialv>
   b6924:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6928:	f000 feec 	bl	b7704 <_ZN9USBSerial5beginEl>
}
   b692c:	b003      	add	sp, #12
   b692e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6932:	f000 bef7 	b.w	b7724 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6936:	490c      	ldr	r1, [pc, #48]	; (b6968 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6938:	4620      	mov	r0, r4
   b693a:	f001 fd1c 	bl	b8376 <strcmp>
   b693e:	b978      	cbnz	r0, b6960 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6940:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6944:	a901      	add	r1, sp, #4
   b6946:	4628      	mov	r0, r5
        int baud = 9600;
   b6948:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b694a:	f7ff ffaf 	bl	b68ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b694e:	f001 fb01 	bl	b7f54 <_Z22__fetch_global_Serial1v>
   b6952:	9901      	ldr	r1, [sp, #4]
   b6954:	f000 ff62 	bl	b781c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6958:	f001 fafc 	bl	b7f54 <_Z22__fetch_global_Serial1v>
}
   b695c:	b003      	add	sp, #12
   b695e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6960:	2000      	movs	r0, #0
   b6962:	e7fb      	b.n	b695c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b6964:	000b89d7 	.word	0x000b89d7
   b6968:	000b89de 	.word	0x000b89de

000b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b696c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b696e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b6972:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6974:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6976:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b697a:	42ae      	cmp	r6, r5
   b697c:	d005      	beq.n	b698a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b697e:	f105 0008 	add.w	r0, r5, #8
   b6982:	f7ff fff3 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6986:	3514      	adds	r5, #20
   b6988:	e7f7      	b.n	b697a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b698a:	6820      	ldr	r0, [r4, #0]
   b698c:	f7fe f9e0 	bl	b4d50 <free>
}
   b6990:	4620      	mov	r0, r4
   b6992:	bd70      	pop	{r4, r5, r6, pc}

000b6994 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b6994:	b510      	push	{r4, lr}
   b6996:	4604      	mov	r4, r0
   b6998:	300c      	adds	r0, #12
   b699a:	f7ff ffe7 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b699e:	4620      	mov	r0, r4
   b69a0:	f7fe ff45 	bl	b582e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b69a4:	4620      	mov	r0, r4
   b69a6:	bd10      	pop	{r4, pc}

000b69a8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b69a8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b69aa:	4b04      	ldr	r3, [pc, #16]	; (b69bc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b69ac:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b69ae:	f840 3b04 	str.w	r3, [r0], #4
   b69b2:	f7ff ffef 	bl	b6994 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b69b6:	4620      	mov	r0, r4
   b69b8:	bd10      	pop	{r4, pc}
   b69ba:	bf00      	nop
   b69bc:	000b87a0 	.word	0x000b87a0

000b69c0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b69c0:	b510      	push	{r4, lr}
   b69c2:	4604      	mov	r4, r0
   b69c4:	f7ff fff0 	bl	b69a8 <_ZN5spark16StreamLogHandlerD1Ev>
   b69c8:	4620      	mov	r0, r4
   b69ca:	2124      	movs	r1, #36	; 0x24
   b69cc:	f7fd fb65 	bl	b409a <_ZdlPvj>
   b69d0:	4620      	mov	r0, r4
   b69d2:	bd10      	pop	{r4, pc}

000b69d4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b69d4:	b510      	push	{r4, lr}
   b69d6:	4b03      	ldr	r3, [pc, #12]	; (b69e4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b69d8:	6003      	str	r3, [r0, #0]
   b69da:	4604      	mov	r4, r0
   b69dc:	f7ff ffe4 	bl	b69a8 <_ZN5spark16StreamLogHandlerD1Ev>
   b69e0:	4620      	mov	r0, r4
   b69e2:	bd10      	pop	{r4, pc}
   b69e4:	000b8a7c 	.word	0x000b8a7c

000b69e8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b69e8:	b510      	push	{r4, lr}
   b69ea:	4604      	mov	r4, r0
   b69ec:	f7ff fff2 	bl	b69d4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b69f0:	4620      	mov	r0, r4
   b69f2:	2124      	movs	r1, #36	; 0x24
   b69f4:	f7fd fb51 	bl	b409a <_ZdlPvj>
   b69f8:	4620      	mov	r0, r4
   b69fa:	bd10      	pop	{r4, pc}

000b69fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b69fc:	2200      	movs	r2, #0
   b69fe:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b6a02:	b510      	push	{r4, lr}
        capacity_(0) {
   b6a04:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6a06:	680c      	ldr	r4, [r1, #0]
   b6a08:	6004      	str	r4, [r0, #0]
   b6a0a:	684c      	ldr	r4, [r1, #4]
   b6a0c:	6044      	str	r4, [r0, #4]
   b6a0e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a10:	600a      	str	r2, [r1, #0]
   b6a12:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a14:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a16:	608a      	str	r2, [r1, #8]
}
   b6a18:	bd10      	pop	{r4, pc}

000b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6a1a:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6a1c:	6803      	ldr	r3, [r0, #0]
   b6a1e:	4604      	mov	r4, r0
   b6a20:	6818      	ldr	r0, [r3, #0]
   b6a22:	f7fd fff1 	bl	b4a08 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6a26:	4620      	mov	r0, r4
   b6a28:	bd10      	pop	{r4, pc}
	...

000b6a2c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a30:	b087      	sub	sp, #28
   b6a32:	4680      	mov	r8, r0
   b6a34:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6a36:	4b1c      	ldr	r3, [pc, #112]	; (b6aa8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6a38:	685b      	ldr	r3, [r3, #4]
   b6a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6a3e:	4689      	mov	r9, r1
   b6a40:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b6a42:	b96b      	cbnz	r3, b6a60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6a44:	f7ff fed0 	bl	b67e8 <_ZN5spark10LogManager8instanceEv>
   b6a48:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6a4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b6a4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a50:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b6a52:	f7ff fda3 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6a56:	7b23      	ldrb	r3, [r4, #12]
   b6a58:	b12b      	cbz	r3, b6a66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6a5a:	a805      	add	r0, sp, #20
   b6a5c:	f7ff ffdd 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b6a60:	b007      	add	sp, #28
   b6a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6a66:	2301      	movs	r3, #1
   b6a68:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6a6a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b6a6e:	fa5f f989 	uxtb.w	r9, r9
   b6a72:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6a76:	45aa      	cmp	sl, r5
   b6a78:	d012      	beq.n	b6aa0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b6a7a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b6a7e:	4631      	mov	r1, r6
   b6a80:	1d38      	adds	r0, r7, #4
   b6a82:	f7ff fe3d 	bl	b6700 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6a86:	4581      	cmp	r9, r0
   b6a88:	d3f5      	bcc.n	b6a76 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6a8a:	683b      	ldr	r3, [r7, #0]
   b6a8c:	9a03      	ldr	r2, [sp, #12]
   b6a8e:	9200      	str	r2, [sp, #0]
   b6a90:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b6a94:	464a      	mov	r2, r9
   b6a96:	4633      	mov	r3, r6
   b6a98:	4641      	mov	r1, r8
   b6a9a:	4638      	mov	r0, r7
   b6a9c:	47d8      	blx	fp
   b6a9e:	e7ea      	b.n	b6a76 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6aa0:	2300      	movs	r3, #0
   b6aa2:	7323      	strb	r3, [r4, #12]
   b6aa4:	e7d9      	b.n	b6a5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b6aa6:	bf00      	nop
   b6aa8:	e000ed00 	.word	0xe000ed00

000b6aac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ab0:	469b      	mov	fp, r3
   b6ab2:	4b1a      	ldr	r3, [pc, #104]	; (b6b1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b6ab4:	685b      	ldr	r3, [r3, #4]
   b6ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6aba:	4680      	mov	r8, r0
   b6abc:	4689      	mov	r9, r1
   b6abe:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b6ac0:	b96b      	cbnz	r3, b6ade <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b6ac2:	f7ff fe91 	bl	b67e8 <_ZN5spark10LogManager8instanceEv>
   b6ac6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6ac8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6acc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6ace:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6ad0:	f7ff fd64 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6ad4:	7b23      	ldrb	r3, [r4, #12]
   b6ad6:	b12b      	cbz	r3, b6ae4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b6ad8:	a801      	add	r0, sp, #4
   b6ada:	f7ff ff9e 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6ade:	b003      	add	sp, #12
   b6ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6ae4:	2301      	movs	r3, #1
   b6ae6:	7323      	strb	r3, [r4, #12]
   b6ae8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6aec:	b2f6      	uxtb	r6, r6
   b6aee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6af2:	4555      	cmp	r5, sl
   b6af4:	d00e      	beq.n	b6b14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6af6:	f855 7b04 	ldr.w	r7, [r5], #4
   b6afa:	4659      	mov	r1, fp
   b6afc:	1d38      	adds	r0, r7, #4
   b6afe:	f7ff fdff 	bl	b6700 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6b02:	4286      	cmp	r6, r0
   b6b04:	d3f5      	bcc.n	b6af2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6b06:	683b      	ldr	r3, [r7, #0]
   b6b08:	464a      	mov	r2, r9
   b6b0a:	68db      	ldr	r3, [r3, #12]
   b6b0c:	4641      	mov	r1, r8
   b6b0e:	4638      	mov	r0, r7
   b6b10:	4798      	blx	r3
   b6b12:	e7ee      	b.n	b6af2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6b14:	2300      	movs	r3, #0
   b6b16:	7323      	strb	r3, [r4, #12]
   b6b18:	e7de      	b.n	b6ad8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6b1a:	bf00      	nop
   b6b1c:	e000ed00 	.word	0xe000ed00

000b6b20 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6b24:	4b16      	ldr	r3, [pc, #88]	; (b6b80 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6b26:	685b      	ldr	r3, [r3, #4]
   b6b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6b2c:	4605      	mov	r5, r0
   b6b2e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b6b30:	bb1b      	cbnz	r3, b6b7a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6b32:	f7ff fe59 	bl	b67e8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6b36:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6b3a:	4604      	mov	r4, r0
   b6b3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6b3e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6b40:	f7ff fd2c 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
   b6b44:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6b48:	2446      	movs	r4, #70	; 0x46
   b6b4a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6b4e:	45b0      	cmp	r8, r6
   b6b50:	d109      	bne.n	b6b66 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b6b52:	a801      	add	r0, sp, #4
   b6b54:	f7ff ff61 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6b58:	42a5      	cmp	r5, r4
   b6b5a:	bfb4      	ite	lt
   b6b5c:	2000      	movlt	r0, #0
   b6b5e:	2001      	movge	r0, #1
}
   b6b60:	b002      	add	sp, #8
   b6b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6b66:	f856 0b04 	ldr.w	r0, [r6], #4
   b6b6a:	4639      	mov	r1, r7
   b6b6c:	3004      	adds	r0, #4
   b6b6e:	f7ff fdc7 	bl	b6700 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b6b72:	4284      	cmp	r4, r0
   b6b74:	bfa8      	it	ge
   b6b76:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6b78:	e7e9      	b.n	b6b4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b6b7a:	2000      	movs	r0, #0
   b6b7c:	e7f0      	b.n	b6b60 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b6b7e:	bf00      	nop
   b6b80:	e000ed00 	.word	0xe000ed00

000b6b84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b86:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6b8a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6b8c:	4604      	mov	r4, r0
   b6b8e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b90:	db0d      	blt.n	b6bae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b6b92:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b6b94:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6b96:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6b98:	dd04      	ble.n	b6ba4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b6b9a:	00b9      	lsls	r1, r7, #2
   b6b9c:	f7fe f8e0 	bl	b4d60 <realloc>
            if (!d) {
   b6ba0:	b918      	cbnz	r0, b6baa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6ba4:	f7fe f8d4 	bl	b4d50 <free>
        T* d = nullptr;
   b6ba8:	2000      	movs	r0, #0
        data_ = d;
   b6baa:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6bac:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6bae:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6bb0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6bb2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b6bb6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6bb8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b6bbc:	1d08      	adds	r0, r1, #4
   b6bbe:	f001 fb73 	bl	b82a8 <memmove>
    new(p) T(std::move(value));
   b6bc2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b6bc6:	6863      	ldr	r3, [r4, #4]
   b6bc8:	3301      	adds	r3, #1
   b6bca:	6063      	str	r3, [r4, #4]
    return true;
   b6bcc:	2001      	movs	r0, #1
   b6bce:	e7e8      	b.n	b6ba2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6bd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b6bd2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6bd6:	4604      	mov	r4, r0
   b6bd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6bda:	9301      	str	r3, [sp, #4]
   b6bdc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6bde:	f7ff fcdd 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b6be2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b6be6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b6bea:	4293      	cmp	r3, r2
   b6bec:	4619      	mov	r1, r3
   b6bee:	d00b      	beq.n	b6c08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6bf0:	6809      	ldr	r1, [r1, #0]
   b6bf2:	42a9      	cmp	r1, r5
   b6bf4:	f103 0304 	add.w	r3, r3, #4
   b6bf8:	d1f7      	bne.n	b6bea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6bfa:	a801      	add	r0, sp, #4
   b6bfc:	f7ff ff0d 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6c00:	2500      	movs	r5, #0
}
   b6c02:	4628      	mov	r0, r5
   b6c04:	b003      	add	sp, #12
   b6c06:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6c08:	4629      	mov	r1, r5
   b6c0a:	4620      	mov	r0, r4
   b6c0c:	f7ff ffba 	bl	b6b84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6c10:	4605      	mov	r5, r0
   b6c12:	2800      	cmp	r0, #0
   b6c14:	d0f1      	beq.n	b6bfa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6c16:	6863      	ldr	r3, [r4, #4]
   b6c18:	2b01      	cmp	r3, #1
   b6c1a:	d101      	bne.n	b6c20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6c1c:	f7ff fe00 	bl	b6820 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6c20:	a801      	add	r0, sp, #4
   b6c22:	f7ff fefa 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6c26:	e7ec      	b.n	b6c02 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6c28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6c28:	b570      	push	{r4, r5, r6, lr}
   b6c2a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6c2c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6c30:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6c32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6c36:	4282      	cmp	r2, r0
   b6c38:	d00f      	beq.n	b6c5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6c3a:	4601      	mov	r1, r0
            if (*p == value) {
   b6c3c:	681d      	ldr	r5, [r3, #0]
   b6c3e:	f851 6b04 	ldr.w	r6, [r1], #4
   b6c42:	42ae      	cmp	r6, r5
   b6c44:	d107      	bne.n	b6c56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6c46:	1a52      	subs	r2, r2, r1
   b6c48:	f001 fb2e 	bl	b82a8 <memmove>
    --size_;
   b6c4c:	6863      	ldr	r3, [r4, #4]
   b6c4e:	3b01      	subs	r3, #1
   b6c50:	6063      	str	r3, [r4, #4]
    return true;
   b6c52:	2001      	movs	r0, #1
}
   b6c54:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6c56:	4608      	mov	r0, r1
   b6c58:	e7ed      	b.n	b6c36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6c5a:	2000      	movs	r0, #0
   b6c5c:	e7fa      	b.n	b6c54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b6c5e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6c5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b6c60:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6c64:	4604      	mov	r4, r0
   b6c66:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6c68:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6c6a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6c6c:	f7ff fc96 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b6c70:	a901      	add	r1, sp, #4
   b6c72:	4620      	mov	r0, r4
   b6c74:	f7ff ffd8 	bl	b6c28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6c78:	b118      	cbz	r0, b6c82 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b6c7a:	6863      	ldr	r3, [r4, #4]
   b6c7c:	b90b      	cbnz	r3, b6c82 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b6c7e:	f7ff fddb 	bl	b6838 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6c82:	a803      	add	r0, sp, #12
   b6c84:	f7ff fec9 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6c88:	b004      	add	sp, #16
   b6c8a:	bd10      	pop	{r4, pc}

000b6c8c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6c8c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b6c8e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b6c92:	2318      	movs	r3, #24
   b6c94:	4604      	mov	r4, r0
   b6c96:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b6c9a:	42ae      	cmp	r6, r5
   b6c9c:	d015      	beq.n	b6cca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b6c9e:	f105 0110 	add.w	r1, r5, #16
   b6ca2:	4620      	mov	r0, r4
   b6ca4:	f7ff ffc0 	bl	b6c28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b6ca8:	6863      	ldr	r3, [r4, #4]
   b6caa:	b90b      	cbnz	r3, b6cb0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6cac:	f7ff fdc4 	bl	b6838 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6cb0:	69e0      	ldr	r0, [r4, #28]
   b6cb2:	6929      	ldr	r1, [r5, #16]
   b6cb4:	6803      	ldr	r3, [r0, #0]
   b6cb6:	68db      	ldr	r3, [r3, #12]
   b6cb8:	4798      	blx	r3
        if (h.stream) {
   b6cba:	6969      	ldr	r1, [r5, #20]
   b6cbc:	b119      	cbz	r1, b6cc6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b6cbe:	6a20      	ldr	r0, [r4, #32]
   b6cc0:	6803      	ldr	r3, [r0, #0]
   b6cc2:	68db      	ldr	r3, [r3, #12]
   b6cc4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b6cc6:	3518      	adds	r5, #24
   b6cc8:	e7e7      	b.n	b6c9a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b6cca:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6cce:	2618      	movs	r6, #24
   b6cd0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6cd4:	42ae      	cmp	r6, r5
   b6cd6:	d004      	beq.n	b6ce2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b6cd8:	4628      	mov	r0, r5
   b6cda:	f7fe f8cb 	bl	b4e74 <_ZN6StringD1Ev>
   b6cde:	3518      	adds	r5, #24
   b6ce0:	e7f8      	b.n	b6cd4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b6ce2:	2300      	movs	r3, #0
   b6ce4:	6163      	str	r3, [r4, #20]
}
   b6ce6:	bd70      	pop	{r4, r5, r6, pc}

000b6ce8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b6ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6cea:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6cec:	f7ff fda4 	bl	b6838 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6cf0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6cf6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6cf8:	f7ff fc50 	bl	b659c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6cfc:	4620      	mov	r0, r4
   b6cfe:	f7ff ffc5 	bl	b6c8c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6d02:	a801      	add	r0, sp, #4
   b6d04:	f7ff fe89 	bl	b6a1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6d08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6d0a:	b108      	cbz	r0, b6d10 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6d0c:	f7fd fe6c 	bl	b49e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6d10:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6d14:	2618      	movs	r6, #24
   b6d16:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6d1a:	42ae      	cmp	r6, r5
   b6d1c:	d004      	beq.n	b6d28 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6d1e:	4628      	mov	r0, r5
   b6d20:	f7fe f8a8 	bl	b4e74 <_ZN6StringD1Ev>
   b6d24:	3518      	adds	r5, #24
   b6d26:	e7f8      	b.n	b6d1a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6d28:	6920      	ldr	r0, [r4, #16]
   b6d2a:	f7fe f811 	bl	b4d50 <free>
   b6d2e:	6820      	ldr	r0, [r4, #0]
   b6d30:	f7fe f80e 	bl	b4d50 <free>
}
   b6d34:	4620      	mov	r0, r4
   b6d36:	b002      	add	sp, #8
   b6d38:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6d3c <__tcf_2>:
    static LogManager mgr;
   b6d3c:	4801      	ldr	r0, [pc, #4]	; (b6d44 <__tcf_2+0x8>)
   b6d3e:	f7ff bfd3 	b.w	b6ce8 <_ZN5spark10LogManagerD1Ev>
   b6d42:	bf00      	nop
   b6d44:	2003e6b0 	.word	0x2003e6b0

000b6d48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6d48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d4c:	4604      	mov	r4, r0
   b6d4e:	460d      	mov	r5, r1
   b6d50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6d52:	d915      	bls.n	b6d80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6d54:	4290      	cmp	r0, r2
   b6d56:	d214      	bcs.n	b6d82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6d58:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6d5c:	1a75      	subs	r5, r6, r1
   b6d5e:	f1a1 0714 	sub.w	r7, r1, #20
   b6d62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6d64:	42b7      	cmp	r7, r6
   b6d66:	d01a      	beq.n	b6d9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6d68:	b11c      	cbz	r4, b6d72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6d6a:	4631      	mov	r1, r6
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	f7ff fc78 	bl	b6662 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b6d72:	f106 0008 	add.w	r0, r6, #8
   b6d76:	f7ff fdf9 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b6d7a:	3e14      	subs	r6, #20
   b6d7c:	3c14      	subs	r4, #20
   b6d7e:	e7f1      	b.n	b6d64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b6d80:	d00d      	beq.n	b6d9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b6d82:	42b5      	cmp	r5, r6
   b6d84:	d00b      	beq.n	b6d9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6d86:	b11c      	cbz	r4, b6d90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6d88:	4629      	mov	r1, r5
   b6d8a:	4620      	mov	r0, r4
   b6d8c:	f7ff fc69 	bl	b6662 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b6d90:	f105 0008 	add.w	r0, r5, #8
   b6d94:	f7ff fdea 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b6d98:	3514      	adds	r5, #20
   b6d9a:	3414      	adds	r4, #20
   b6d9c:	e7f1      	b.n	b6d82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6da0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6da0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6da4:	4604      	mov	r4, r0
   b6da6:	460d      	mov	r5, r1
   b6da8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6daa:	d914      	bls.n	b6dd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6dac:	4290      	cmp	r0, r2
   b6dae:	d213      	bcs.n	b6dd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6db0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6db4:	1a75      	subs	r5, r6, r1
   b6db6:	f1a1 0710 	sub.w	r7, r1, #16
   b6dba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6dbc:	42b7      	cmp	r7, r6
   b6dbe:	d018      	beq.n	b6df2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6dc0:	b11c      	cbz	r4, b6dca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6dc2:	4631      	mov	r1, r6
   b6dc4:	4620      	mov	r0, r4
   b6dc6:	f7fe f8dd 	bl	b4f84 <_ZN6StringC1EOS_>
                end->~T();
   b6dca:	4630      	mov	r0, r6
   b6dcc:	f7fe f852 	bl	b4e74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6dd0:	3e10      	subs	r6, #16
   b6dd2:	3c10      	subs	r4, #16
   b6dd4:	e7f2      	b.n	b6dbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6dd6:	d00c      	beq.n	b6df2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b6dd8:	42b5      	cmp	r5, r6
   b6dda:	d00a      	beq.n	b6df2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6ddc:	b11c      	cbz	r4, b6de6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6dde:	4629      	mov	r1, r5
   b6de0:	4620      	mov	r0, r4
   b6de2:	f7fe f8cf 	bl	b4f84 <_ZN6StringC1EOS_>
                p->~T();
   b6de6:	4628      	mov	r0, r5
   b6de8:	f7fe f844 	bl	b4e74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6dec:	3510      	adds	r5, #16
   b6dee:	3410      	adds	r4, #16
   b6df0:	e7f2      	b.n	b6dd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6df4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6df6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6df8:	4605      	mov	r5, r0
        if (n > 0) {
   b6dfa:	dd11      	ble.n	b6e20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6dfc:	0130      	lsls	r0, r6, #4
   b6dfe:	f7fd ff9f 	bl	b4d40 <malloc>
            if (!d) {
   b6e02:	4604      	mov	r4, r0
   b6e04:	b158      	cbz	r0, b6e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6e06:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6e0a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6e0e:	f7ff ffc7 	bl	b6da0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6e12:	6828      	ldr	r0, [r5, #0]
   b6e14:	f7fd ff9c 	bl	b4d50 <free>
        data_ = d;
   b6e18:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6e1a:	60ae      	str	r6, [r5, #8]
        return true;
   b6e1c:	2001      	movs	r0, #1
    }
   b6e1e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6e20:	2400      	movs	r4, #0
   b6e22:	e7f6      	b.n	b6e12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e28:	4690      	mov	r8, r2
   b6e2a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6e2c:	2300      	movs	r3, #0
   b6e2e:	9103      	str	r1, [sp, #12]
    return size_;
   b6e30:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6e34:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6e36:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6e38:	4299      	cmp	r1, r3
        capacity_(0) {
   b6e3a:	e9c0 3300 	strd	r3, r3, [r0]
   b6e3e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6e46:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6e4a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6e4c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6e4e:	dc23      	bgt.n	b6e98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6e50:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6e54:	2314      	movs	r3, #20
   b6e56:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6e5a:	42af      	cmp	r7, r5
   b6e5c:	d03b      	beq.n	b6ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6e5e:	4629      	mov	r1, r5
   b6e60:	a80b      	add	r0, sp, #44	; 0x2c
   b6e62:	f7fe f88f 	bl	b4f84 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6e66:	a90b      	add	r1, sp, #44	; 0x2c
   b6e68:	a80f      	add	r0, sp, #60	; 0x3c
   b6e6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6e6c:	f7fe f88a 	bl	b4f84 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e70:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6e74:	4299      	cmp	r1, r3
   b6e76:	da1b      	bge.n	b6eb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6e78:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6e7c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6e80:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6e84:	4631      	mov	r1, r6
   b6e86:	f106 0010 	add.w	r0, r6, #16
   b6e8a:	f7ff ff89 	bl	b6da0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6e8e:	b9ee      	cbnz	r6, b6ecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6e92:	3301      	adds	r3, #1
   b6e94:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b6e96:	e011      	b.n	b6ebc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b6e98:	a808      	add	r0, sp, #32
   b6e9a:	f7ff ffab 	bl	b6df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6e9e:	2800      	cmp	r0, #0
   b6ea0:	d1d6      	bne.n	b6e50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6ea2:	a808      	add	r0, sp, #32
   b6ea4:	f7fe fcc3 	bl	b582e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	b015      	add	sp, #84	; 0x54
   b6eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6eb0:	3101      	adds	r1, #1
   b6eb2:	a808      	add	r0, sp, #32
   b6eb4:	f7ff ff9e 	bl	b6df4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6eb8:	2800      	cmp	r0, #0
   b6eba:	d1dd      	bne.n	b6e78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6ebc:	a80f      	add	r0, sp, #60	; 0x3c
   b6ebe:	f7fd ffd9 	bl	b4e74 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6ec2:	a80b      	add	r0, sp, #44	; 0x2c
   b6ec4:	f7fd ffd6 	bl	b4e74 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b6ec8:	3514      	adds	r5, #20
   b6eca:	e7c6      	b.n	b6e5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6ecc:	a90f      	add	r1, sp, #60	; 0x3c
   b6ece:	4630      	mov	r0, r6
   b6ed0:	f7fe f858 	bl	b4f84 <_ZN6StringC1EOS_>
   b6ed4:	e7dc      	b.n	b6e90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b6ed6:	2600      	movs	r6, #0
   b6ed8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6edc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6ede:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6ee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b6ee6:	429e      	cmp	r6, r3
   b6ee8:	da7c      	bge.n	b6fe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6eea:	0133      	lsls	r3, r6, #4
   b6eec:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6eee:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6ef0:	b90b      	cbnz	r3, b6ef6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6ef2:	3601      	adds	r6, #1
   b6ef4:	e7f5      	b.n	b6ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6ef6:	2300      	movs	r3, #0
   b6ef8:	9307      	str	r3, [sp, #28]
   b6efa:	fb09 f306 	mul.w	r3, r9, r6
   b6efe:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6f00:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6f02:	a907      	add	r1, sp, #28
   b6f04:	a806      	add	r0, sp, #24
   b6f06:	f7ff fb22 	bl	b654e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6f0a:	4682      	mov	sl, r0
   b6f0c:	2800      	cmp	r0, #0
   b6f0e:	d0f0      	beq.n	b6ef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6f10:	f04f 0300 	mov.w	r3, #0
   b6f14:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6f18:	4601      	mov	r1, r0
   b6f1a:	9a07      	ldr	r2, [sp, #28]
   b6f1c:	f10d 0317 	add.w	r3, sp, #23
   b6f20:	4628      	mov	r0, r5
   b6f22:	f7ff fbb1 	bl	b6688 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6f26:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6f2a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6f2c:	2f00      	cmp	r7, #0
   b6f2e:	d14a      	bne.n	b6fc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6f30:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6f34:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6f38:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6f40:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6f44:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6f48:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f4a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6f4e:	4293      	cmp	r3, r2
   b6f50:	db17      	blt.n	b6f82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6f52:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6f56:	f1ba 0f00 	cmp.w	sl, #0
   b6f5a:	dd30      	ble.n	b6fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6f5c:	fb09 f00a 	mul.w	r0, r9, sl
   b6f60:	f7fd feee 	bl	b4d40 <malloc>
            if (!d) {
   b6f64:	4683      	mov	fp, r0
   b6f66:	b360      	cbz	r0, b6fc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6f68:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6f6c:	fb09 1202 	mla	r2, r9, r2, r1
   b6f70:	f7ff feea 	bl	b6d48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6f74:	6828      	ldr	r0, [r5, #0]
   b6f76:	f7fd feeb 	bl	b4d50 <free>
        data_ = d;
   b6f7a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6f7e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6f82:	682b      	ldr	r3, [r5, #0]
   b6f84:	9a01      	ldr	r2, [sp, #4]
   b6f86:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6f8a:	686a      	ldr	r2, [r5, #4]
   b6f8c:	4651      	mov	r1, sl
   b6f8e:	fb09 3202 	mla	r2, r9, r2, r3
   b6f92:	f10a 0014 	add.w	r0, sl, #20
   b6f96:	f7ff fed7 	bl	b6d48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b6f9a:	f1ba 0f00 	cmp.w	sl, #0
   b6f9e:	d003      	beq.n	b6fa8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6fa0:	a90f      	add	r1, sp, #60	; 0x3c
   b6fa2:	4650      	mov	r0, sl
   b6fa4:	f7ff fb5d 	bl	b6662 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b6fa8:	686b      	ldr	r3, [r5, #4]
   b6faa:	3301      	adds	r3, #1
   b6fac:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6fae:	a811      	add	r0, sp, #68	; 0x44
   b6fb0:	f7ff fcdc 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6fb4:	b13f      	cbz	r7, b6fc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b6fb6:	a80b      	add	r0, sp, #44	; 0x2c
   b6fb8:	f7ff fcd8 	bl	b696c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6fbc:	e771      	b.n	b6ea2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6fbe:	46bb      	mov	fp, r7
   b6fc0:	e7d8      	b.n	b6f74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6fc2:	2701      	movs	r7, #1
   b6fc4:	e7f3      	b.n	b6fae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b6fc6:	9b01      	ldr	r3, [sp, #4]
   b6fc8:	682d      	ldr	r5, [r5, #0]
   b6fca:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6fce:	9b06      	ldr	r3, [sp, #24]
   b6fd0:	781b      	ldrb	r3, [r3, #0]
   b6fd2:	b92b      	cbnz	r3, b6fe0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6fd4:	f8d8 3000 	ldr.w	r3, [r8]
   b6fd8:	9a02      	ldr	r2, [sp, #8]
   b6fda:	4413      	add	r3, r2
   b6fdc:	7c1b      	ldrb	r3, [r3, #16]
   b6fde:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6fe0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6fe2:	e78e      	b.n	b6f02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6fe6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6fea:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fec:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fee:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6ff2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ff4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6ff6:	60a2      	str	r2, [r4, #8]
   b6ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6ffa:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ffc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6ffe:	60e2      	str	r2, [r4, #12]
   b7000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7002:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7004:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7006:	6122      	str	r2, [r4, #16]
   b7008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b700a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b700c:	9b03      	ldr	r3, [sp, #12]
   b700e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7010:	6162      	str	r2, [r4, #20]
   b7012:	7623      	strb	r3, [r4, #24]
   b7014:	e7cf      	b.n	b6fb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7018 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7018:	b5f0      	push	{r4, r5, r6, r7, lr}
   b701a:	4604      	mov	r4, r0
   b701c:	b087      	sub	sp, #28
   b701e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7020:	4626      	mov	r6, r4
        stream_(&stream) {
   b7022:	4619      	mov	r1, r3
   b7024:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7026:	4617      	mov	r7, r2
        stream_(&stream) {
   b7028:	f7fd fb44 	bl	b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b702c:	4b0b      	ldr	r3, [pc, #44]	; (b705c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b702e:	f846 3b04 	str.w	r3, [r6], #4
   b7032:	4669      	mov	r1, sp
   b7034:	a803      	add	r0, sp, #12
   b7036:	f7fd fb3d 	bl	b46b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b703a:	aa03      	add	r2, sp, #12
   b703c:	4639      	mov	r1, r7
   b703e:	4630      	mov	r0, r6
   b7040:	f7ff fef0 	bl	b6e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7044:	a803      	add	r0, sp, #12
   b7046:	f7fd fad1 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b704a:	4668      	mov	r0, sp
   b704c:	f7fd face 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7050:	4b03      	ldr	r3, [pc, #12]	; (b7060 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b7052:	6023      	str	r3, [r4, #0]
}
   b7054:	4620      	mov	r0, r4
        stream_(&stream) {
   b7056:	6225      	str	r5, [r4, #32]
}
   b7058:	b007      	add	sp, #28
   b705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b705c:	000b87a0 	.word	0x000b87a0
   b7060:	000b8a64 	.word	0x000b8a64

000b7064 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7064:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7066:	460f      	mov	r7, r1
   b7068:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b706a:	491d      	ldr	r1, [pc, #116]	; (b70e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b706c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b706e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b7070:	4616      	mov	r6, r2
   b7072:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7074:	f001 f97f 	bl	b8376 <strcmp>
   b7078:	b9c0      	cbnz	r0, b70ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b707a:	b1a4      	cbz	r4, b70a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b707c:	4629      	mov	r1, r5
   b707e:	a801      	add	r0, sp, #4
   b7080:	f7ff fcbc 	bl	b69fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7084:	4917      	ldr	r1, [pc, #92]	; (b70e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7086:	2024      	movs	r0, #36	; 0x24
   b7088:	f000 ffc8 	bl	b801c <_ZnwjRKSt9nothrow_t>
   b708c:	4605      	mov	r5, r0
   b708e:	b130      	cbz	r0, b709e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b7090:	ab01      	add	r3, sp, #4
   b7092:	4632      	mov	r2, r6
   b7094:	4621      	mov	r1, r4
   b7096:	f7ff ffbf 	bl	b7018 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b709a:	4b13      	ldr	r3, [pc, #76]	; (b70e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b709c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b709e:	a801      	add	r0, sp, #4
   b70a0:	f7fd faa4 	bl	b45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b70a4:	462c      	mov	r4, r5
}
   b70a6:	4620      	mov	r0, r4
   b70a8:	b005      	add	sp, #20
   b70aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b70ac:	490f      	ldr	r1, [pc, #60]	; (b70ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b70ae:	4638      	mov	r0, r7
   b70b0:	f001 f961 	bl	b8376 <strcmp>
   b70b4:	b990      	cbnz	r0, b70dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b70b6:	2c00      	cmp	r4, #0
   b70b8:	d0f5      	beq.n	b70a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b70ba:	4629      	mov	r1, r5
   b70bc:	a801      	add	r0, sp, #4
   b70be:	f7ff fc9d 	bl	b69fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b70c2:	4908      	ldr	r1, [pc, #32]	; (b70e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b70c4:	2024      	movs	r0, #36	; 0x24
   b70c6:	f000 ffa9 	bl	b801c <_ZnwjRKSt9nothrow_t>
   b70ca:	4605      	mov	r5, r0
   b70cc:	2800      	cmp	r0, #0
   b70ce:	d0e6      	beq.n	b709e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b70d0:	ab01      	add	r3, sp, #4
   b70d2:	4632      	mov	r2, r6
   b70d4:	4621      	mov	r1, r4
   b70d6:	f7ff ff9f 	bl	b7018 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b70da:	e7e0      	b.n	b709e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b70dc:	2400      	movs	r4, #0
   b70de:	e7e2      	b.n	b70a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b70e0:	000b89e6 	.word	0x000b89e6
   b70e4:	000b8bf5 	.word	0x000b8bf5
   b70e8:	000b8a7c 	.word	0x000b8a7c
   b70ec:	000b89ea 	.word	0x000b89ea

000b70f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b70f0:	4b01      	ldr	r3, [pc, #4]	; (b70f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b70f2:	4a02      	ldr	r2, [pc, #8]	; (b70fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b70f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b70f6:	4770      	bx	lr
   b70f8:	2003e6ac 	.word	0x2003e6ac
   b70fc:	000b89fb 	.word	0x000b89fb

000b7100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7104:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b7106:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b710a:	4604      	mov	r4, r0
   b710c:	460e      	mov	r6, r1
   b710e:	4617      	mov	r7, r2
   b7110:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b7112:	f000 fb07 	bl	b7724 <_Z16_fetch_usbserialv>
   b7116:	4581      	cmp	r9, r0
   b7118:	d04c      	beq.n	b71b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b711a:	792b      	ldrb	r3, [r5, #4]
   b711c:	0719      	lsls	r1, r3, #28
   b711e:	d504      	bpl.n	b712a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b7120:	696a      	ldr	r2, [r5, #20]
   b7122:	4954      	ldr	r1, [pc, #336]	; (b7274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b7124:	4620      	mov	r0, r4
   b7126:	f7ff fa8d 	bl	b6644 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b712a:	f1b8 0f00 	cmp.w	r8, #0
   b712e:	d00d      	beq.n	b714c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b7130:	215b      	movs	r1, #91	; 0x5b
   b7132:	4620      	mov	r0, r4
   b7134:	f7ff fa7a 	bl	b662c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b7138:	4641      	mov	r1, r8
   b713a:	4620      	mov	r0, r4
   b713c:	f7ff fa67 	bl	b660e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b7140:	6823      	ldr	r3, [r4, #0]
   b7142:	494d      	ldr	r1, [pc, #308]	; (b7278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b7144:	68db      	ldr	r3, [r3, #12]
   b7146:	2202      	movs	r2, #2
   b7148:	4620      	mov	r0, r4
   b714a:	4798      	blx	r3
    if (attr.has_file) {
   b714c:	792b      	ldrb	r3, [r5, #4]
   b714e:	07da      	lsls	r2, r3, #31
   b7150:	d523      	bpl.n	b719a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b7152:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b7156:	212f      	movs	r1, #47	; 0x2f
   b7158:	4640      	mov	r0, r8
   b715a:	f001 f959 	bl	b8410 <strrchr>
    if (s1) {
   b715e:	b108      	cbz	r0, b7164 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b7160:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b7164:	4641      	mov	r1, r8
   b7166:	4620      	mov	r0, r4
   b7168:	f7ff fa51 	bl	b660e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b716c:	792b      	ldrb	r3, [r5, #4]
   b716e:	079b      	lsls	r3, r3, #30
   b7170:	d508      	bpl.n	b7184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b7172:	213a      	movs	r1, #58	; 0x3a
   b7174:	4620      	mov	r0, r4
   b7176:	f7ff fa59 	bl	b662c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b717a:	68ea      	ldr	r2, [r5, #12]
   b717c:	493f      	ldr	r1, [pc, #252]	; (b727c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b717e:	4620      	mov	r0, r4
   b7180:	f7ff fa60 	bl	b6644 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b7184:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b7186:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b7188:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b718c:	68db      	ldr	r3, [r3, #12]
   b718e:	bf14      	ite	ne
   b7190:	493b      	ldrne	r1, [pc, #236]	; (b7280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b7192:	493c      	ldreq	r1, [pc, #240]	; (b7284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b7194:	2202      	movs	r2, #2
            write(": ", 2);
   b7196:	4620      	mov	r0, r4
   b7198:	4798      	blx	r3
    if (attr.has_function) {
   b719a:	792b      	ldrb	r3, [r5, #4]
   b719c:	0758      	lsls	r0, r3, #29
   b719e:	d51d      	bpl.n	b71dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b71a0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b71a2:	460b      	mov	r3, r1
   b71a4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b71a6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b71aa:	b160      	cbz	r0, b71c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b71ac:	2820      	cmp	r0, #32
   b71ae:	d108      	bne.n	b71c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b71b0:	4619      	mov	r1, r3
   b71b2:	e7f7      	b.n	b71a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b71b4:	4834      	ldr	r0, [pc, #208]	; (b7288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b71b6:	f000 fbf6 	bl	b79a6 <_ZN5spark12NetworkClass9listeningEv>
   b71ba:	2800      	cmp	r0, #0
   b71bc:	d0ad      	beq.n	b711a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b71be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b71c2:	2828      	cmp	r0, #40	; 0x28
   b71c4:	d1ee      	bne.n	b71a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b71c6:	6823      	ldr	r3, [r4, #0]
   b71c8:	1a52      	subs	r2, r2, r1
   b71ca:	68db      	ldr	r3, [r3, #12]
   b71cc:	4620      	mov	r0, r4
   b71ce:	4798      	blx	r3
        write("(): ", 4);
   b71d0:	6823      	ldr	r3, [r4, #0]
   b71d2:	492e      	ldr	r1, [pc, #184]	; (b728c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b71d4:	68db      	ldr	r3, [r3, #12]
   b71d6:	2204      	movs	r2, #4
   b71d8:	4620      	mov	r0, r4
   b71da:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b71dc:	2100      	movs	r1, #0
   b71de:	4638      	mov	r0, r7
   b71e0:	f7fd fd12 	bl	b4c08 <log_level_name>
   b71e4:	4601      	mov	r1, r0
    write(s);
   b71e6:	4620      	mov	r0, r4
   b71e8:	f7ff fa11 	bl	b660e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b71ec:	6823      	ldr	r3, [r4, #0]
   b71ee:	4925      	ldr	r1, [pc, #148]	; (b7284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b71f0:	68db      	ldr	r3, [r3, #12]
   b71f2:	2202      	movs	r2, #2
   b71f4:	4620      	mov	r0, r4
   b71f6:	4798      	blx	r3
    if (msg) {
   b71f8:	b11e      	cbz	r6, b7202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b71fa:	4631      	mov	r1, r6
   b71fc:	4620      	mov	r0, r4
   b71fe:	f7ff fa06 	bl	b660e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b7202:	792b      	ldrb	r3, [r5, #4]
   b7204:	f013 0f30 	tst.w	r3, #48	; 0x30
   b7208:	d02c      	beq.n	b7264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b720a:	6823      	ldr	r3, [r4, #0]
   b720c:	4920      	ldr	r1, [pc, #128]	; (b7290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b720e:	68db      	ldr	r3, [r3, #12]
   b7210:	2202      	movs	r2, #2
   b7212:	4620      	mov	r0, r4
   b7214:	4798      	blx	r3
        if (attr.has_code) {
   b7216:	792b      	ldrb	r3, [r5, #4]
   b7218:	06d9      	lsls	r1, r3, #27
   b721a:	d50a      	bpl.n	b7232 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b721c:	6823      	ldr	r3, [r4, #0]
   b721e:	491d      	ldr	r1, [pc, #116]	; (b7294 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b7220:	68db      	ldr	r3, [r3, #12]
   b7222:	2207      	movs	r2, #7
   b7224:	4620      	mov	r0, r4
   b7226:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7228:	69aa      	ldr	r2, [r5, #24]
   b722a:	491b      	ldr	r1, [pc, #108]	; (b7298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b722c:	4620      	mov	r0, r4
   b722e:	f7ff fa09 	bl	b6644 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b7232:	792b      	ldrb	r3, [r5, #4]
   b7234:	069a      	lsls	r2, r3, #26
   b7236:	d511      	bpl.n	b725c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7238:	06db      	lsls	r3, r3, #27
   b723a:	d505      	bpl.n	b7248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b723c:	6823      	ldr	r3, [r4, #0]
   b723e:	4910      	ldr	r1, [pc, #64]	; (b7280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b7240:	68db      	ldr	r3, [r3, #12]
   b7242:	2202      	movs	r2, #2
   b7244:	4620      	mov	r0, r4
   b7246:	4798      	blx	r3
            write("details = ", 10);
   b7248:	6823      	ldr	r3, [r4, #0]
   b724a:	4914      	ldr	r1, [pc, #80]	; (b729c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b724c:	68db      	ldr	r3, [r3, #12]
   b724e:	4620      	mov	r0, r4
   b7250:	220a      	movs	r2, #10
   b7252:	4798      	blx	r3
            write(attr.details);
   b7254:	69e9      	ldr	r1, [r5, #28]
   b7256:	4620      	mov	r0, r4
   b7258:	f7ff f9d9 	bl	b660e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b725c:	215d      	movs	r1, #93	; 0x5d
   b725e:	4620      	mov	r0, r4
   b7260:	f7ff f9e4 	bl	b662c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7264:	6823      	ldr	r3, [r4, #0]
   b7266:	490e      	ldr	r1, [pc, #56]	; (b72a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7268:	68db      	ldr	r3, [r3, #12]
   b726a:	4620      	mov	r0, r4
   b726c:	2202      	movs	r2, #2
}
   b726e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b7272:	4718      	bx	r3
   b7274:	000b89ff 	.word	0x000b89ff
   b7278:	000b8a06 	.word	0x000b8a06
   b727c:	000b8a09 	.word	0x000b8a09
   b7280:	000b8645 	.word	0x000b8645
   b7284:	000b8a0e 	.word	0x000b8a0e
   b7288:	2003e714 	.word	0x2003e714
   b728c:	000b8a0c 	.word	0x000b8a0c
   b7290:	000b8a11 	.word	0x000b8a11
   b7294:	000b8a14 	.word	0x000b8a14
   b7298:	000b8a1c 	.word	0x000b8a1c
   b729c:	000b8a1f 	.word	0x000b8a1f
   b72a0:	000b8a2a 	.word	0x000b8a2a

000b72a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b72a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72a8:	b085      	sub	sp, #20
    return stream_;
   b72aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b72ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b72b0:	4605      	mov	r5, r0
   b72b2:	460f      	mov	r7, r1
   b72b4:	4690      	mov	r8, r2
   b72b6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b72b8:	f000 fa34 	bl	b7724 <_Z16_fetch_usbserialv>
   b72bc:	4581      	cmp	r9, r0
   b72be:	d105      	bne.n	b72cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b72c0:	4849      	ldr	r0, [pc, #292]	; (b73e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b72c2:	f000 fb70 	bl	b79a6 <_ZN5spark12NetworkClass9listeningEv>
   b72c6:	2800      	cmp	r0, #0
   b72c8:	f040 808a 	bne.w	b73e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b72cc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b72ce:	4a47      	ldr	r2, [pc, #284]	; (b73ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b72d0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b72d2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b72d6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b72d8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b72da:	f88d 9008 	strb.w	r9, [sp, #8]
   b72de:	f000 fd06 	bl	b7cee <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b72e2:	4649      	mov	r1, r9
   b72e4:	4640      	mov	r0, r8
   b72e6:	f7fd fc8f 	bl	b4c08 <log_level_name>
    json.name("l", 1).value(s);
   b72ea:	4941      	ldr	r1, [pc, #260]	; (b73f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b72ec:	4680      	mov	r8, r0
   b72ee:	2201      	movs	r2, #1
   b72f0:	a801      	add	r0, sp, #4
   b72f2:	f000 fd8b 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b72f6:	4641      	mov	r1, r8
   b72f8:	f7ff f97b 	bl	b65f2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b72fc:	b13f      	cbz	r7, b730e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b72fe:	493d      	ldr	r1, [pc, #244]	; (b73f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7300:	2201      	movs	r2, #1
   b7302:	a801      	add	r0, sp, #4
   b7304:	f000 fd82 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b7308:	4639      	mov	r1, r7
   b730a:	f7ff f972 	bl	b65f2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b730e:	b13e      	cbz	r6, b7320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7310:	4939      	ldr	r1, [pc, #228]	; (b73f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b7312:	2201      	movs	r2, #1
   b7314:	a801      	add	r0, sp, #4
   b7316:	f000 fd79 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b731a:	4631      	mov	r1, r6
   b731c:	f7ff f969 	bl	b65f2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7320:	7923      	ldrb	r3, [r4, #4]
   b7322:	07df      	lsls	r7, r3, #31
   b7324:	d50e      	bpl.n	b7344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b7326:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b7328:	212f      	movs	r1, #47	; 0x2f
   b732a:	4630      	mov	r0, r6
   b732c:	f001 f870 	bl	b8410 <strrchr>
    if (s1) {
   b7330:	b100      	cbz	r0, b7334 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7332:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7334:	4931      	ldr	r1, [pc, #196]	; (b73fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b7336:	2201      	movs	r2, #1
   b7338:	a801      	add	r0, sp, #4
   b733a:	f000 fd67 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b733e:	4631      	mov	r1, r6
   b7340:	f7ff f957 	bl	b65f2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7344:	7923      	ldrb	r3, [r4, #4]
   b7346:	079e      	lsls	r6, r3, #30
   b7348:	d507      	bpl.n	b735a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b734a:	492d      	ldr	r1, [pc, #180]	; (b7400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b734c:	2202      	movs	r2, #2
   b734e:	a801      	add	r0, sp, #4
   b7350:	f000 fd5c 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b7354:	68e1      	ldr	r1, [r4, #12]
   b7356:	f000 fcd7 	bl	b7d08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b735a:	7923      	ldrb	r3, [r4, #4]
   b735c:	0758      	lsls	r0, r3, #29
   b735e:	d514      	bpl.n	b738a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7360:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7362:	4633      	mov	r3, r6
   b7364:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b7366:	f813 2b01 	ldrb.w	r2, [r3], #1
   b736a:	b12a      	cbz	r2, b7378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b736c:	2a20      	cmp	r2, #32
   b736e:	d101      	bne.n	b7374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7370:	461e      	mov	r6, r3
   b7372:	e7f7      	b.n	b7364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7374:	2a28      	cmp	r2, #40	; 0x28
   b7376:	d1f5      	bne.n	b7364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b7378:	4922      	ldr	r1, [pc, #136]	; (b7404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b737a:	2202      	movs	r2, #2
   b737c:	a801      	add	r0, sp, #4
   b737e:	f000 fd45 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b7382:	1bba      	subs	r2, r7, r6
   b7384:	4631      	mov	r1, r6
   b7386:	f000 fd51 	bl	b7e2c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b738a:	7923      	ldrb	r3, [r4, #4]
   b738c:	0719      	lsls	r1, r3, #28
   b738e:	d507      	bpl.n	b73a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b7390:	491d      	ldr	r1, [pc, #116]	; (b7408 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b7392:	2201      	movs	r2, #1
   b7394:	a801      	add	r0, sp, #4
   b7396:	f000 fd39 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b739a:	6961      	ldr	r1, [r4, #20]
   b739c:	f000 fcc6 	bl	b7d2c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b73a0:	7923      	ldrb	r3, [r4, #4]
   b73a2:	06da      	lsls	r2, r3, #27
   b73a4:	d508      	bpl.n	b73b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b73a6:	2204      	movs	r2, #4
   b73a8:	4918      	ldr	r1, [pc, #96]	; (b740c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b73aa:	eb0d 0002 	add.w	r0, sp, r2
   b73ae:	f000 fd2d 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b73b2:	69a1      	ldr	r1, [r4, #24]
   b73b4:	f000 fca8 	bl	b7d08 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b73b8:	7923      	ldrb	r3, [r4, #4]
   b73ba:	069b      	lsls	r3, r3, #26
   b73bc:	d507      	bpl.n	b73ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b73be:	4914      	ldr	r1, [pc, #80]	; (b7410 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b73c0:	2206      	movs	r2, #6
   b73c2:	a801      	add	r0, sp, #4
   b73c4:	f000 fd22 	bl	b7e0c <_ZN5spark10JSONWriter4nameEPKcj>
   b73c8:	69e1      	ldr	r1, [r4, #28]
   b73ca:	f7ff f912 	bl	b65f2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b73ce:	a801      	add	r0, sp, #4
   b73d0:	f000 fc77 	bl	b7cc2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b73d4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b73d6:	490f      	ldr	r1, [pc, #60]	; (b7414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b73d8:	6803      	ldr	r3, [r0, #0]
   b73da:	2202      	movs	r2, #2
   b73dc:	68db      	ldr	r3, [r3, #12]
   b73de:	4798      	blx	r3
}
   b73e0:	b005      	add	sp, #20
   b73e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b73e6:	bf00      	nop
   b73e8:	2003e714 	.word	0x2003e714
   b73ec:	000b8a4c 	.word	0x000b8a4c
   b73f0:	000b89dc 	.word	0x000b89dc
   b73f4:	000b8a2d 	.word	0x000b8a2d
   b73f8:	000b8d7b 	.word	0x000b8d7b
   b73fc:	000b8733 	.word	0x000b8733
   b7400:	000b8a2f 	.word	0x000b8a2f
   b7404:	000b8a32 	.word	0x000b8a32
   b7408:	000b8a35 	.word	0x000b8a35
   b740c:	000b8a37 	.word	0x000b8a37
   b7410:	000b8a3c 	.word	0x000b8a3c
   b7414:	000b8a2a 	.word	0x000b8a2a

000b7418 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7418:	4b02      	ldr	r3, [pc, #8]	; (b7424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b741a:	681a      	ldr	r2, [r3, #0]
   b741c:	4b02      	ldr	r3, [pc, #8]	; (b7428 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b741e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7420:	4770      	bx	lr
   b7422:	bf00      	nop
   b7424:	2003e5a0 	.word	0x2003e5a0
   b7428:	2003e6d8 	.word	0x2003e6d8

000b742c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b742c:	4b01      	ldr	r3, [pc, #4]	; (b7434 <_GLOBAL__sub_I_RGB+0x8>)
   b742e:	2200      	movs	r2, #0
   b7430:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7432:	4770      	bx	lr
   b7434:	2003e6dc 	.word	0x2003e6dc

000b7438 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7438:	4b01      	ldr	r3, [pc, #4]	; (b7440 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b743a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b743c:	4770      	bx	lr
   b743e:	bf00      	nop
   b7440:	2003e5a4 	.word	0x2003e5a4

000b7444 <serialEventRun>:
{
   b7444:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7446:	4b0b      	ldr	r3, [pc, #44]	; (b7474 <serialEventRun+0x30>)
   b7448:	b143      	cbz	r3, b745c <serialEventRun+0x18>
   b744a:	f000 f96b 	bl	b7724 <_Z16_fetch_usbserialv>
   b744e:	6803      	ldr	r3, [r0, #0]
   b7450:	691b      	ldr	r3, [r3, #16]
   b7452:	4798      	blx	r3
   b7454:	2800      	cmp	r0, #0
   b7456:	dd01      	ble.n	b745c <serialEventRun+0x18>
        serialEvent();
   b7458:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b745c:	4b06      	ldr	r3, [pc, #24]	; (b7478 <serialEventRun+0x34>)
   b745e:	b143      	cbz	r3, b7472 <serialEventRun+0x2e>
   b7460:	f000 fd78 	bl	b7f54 <_Z22__fetch_global_Serial1v>
   b7464:	6803      	ldr	r3, [r0, #0]
   b7466:	691b      	ldr	r3, [r3, #16]
   b7468:	4798      	blx	r3
   b746a:	2800      	cmp	r0, #0
   b746c:	dd01      	ble.n	b7472 <serialEventRun+0x2e>
        serialEvent1();
   b746e:	f3af 8000 	nop.w
}
   b7472:	bd08      	pop	{r3, pc}
	...

000b747c <_post_loop>:
{
   b747c:	b508      	push	{r3, lr}
	serialEventRun();
   b747e:	f7ff ffe1 	bl	b7444 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7482:	f7fd fa27 	bl	b48d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7486:	4b01      	ldr	r3, [pc, #4]	; (b748c <_post_loop+0x10>)
   b7488:	6018      	str	r0, [r3, #0]
}
   b748a:	bd08      	pop	{r3, pc}
   b748c:	2003e740 	.word	0x2003e740

000b7490 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7490:	4805      	ldr	r0, [pc, #20]	; (b74a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7492:	4a06      	ldr	r2, [pc, #24]	; (b74ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7494:	4906      	ldr	r1, [pc, #24]	; (b74b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7496:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7498:	1a12      	subs	r2, r2, r0
   b749a:	f000 fef7 	bl	b828c <memcpy>
    __backup_sram_signature = signature;
   b749e:	4b05      	ldr	r3, [pc, #20]	; (b74b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b74a0:	4a05      	ldr	r2, [pc, #20]	; (b74b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b74a2:	601a      	str	r2, [r3, #0]
}
   b74a4:	bd08      	pop	{r3, pc}
   b74a6:	bf00      	nop
   b74a8:	2003f400 	.word	0x2003f400
   b74ac:	2003f404 	.word	0x2003f404
   b74b0:	000b8ed4 	.word	0x000b8ed4
   b74b4:	2003f400 	.word	0x2003f400
   b74b8:	9a271c1e 	.word	0x9a271c1e

000b74bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b74bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b74be:	2300      	movs	r3, #0
   b74c0:	9300      	str	r3, [sp, #0]
   b74c2:	461a      	mov	r2, r3
   b74c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b74c8:	f7fd fbc8 	bl	b4c5c <system_ctrl_set_result>
}
   b74cc:	b003      	add	sp, #12
   b74ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b74d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b74d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b74d6:	8843      	ldrh	r3, [r0, #2]
   b74d8:	2b0a      	cmp	r3, #10
   b74da:	d008      	beq.n	b74ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b74dc:	2b50      	cmp	r3, #80	; 0x50
   b74de:	d10b      	bne.n	b74f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b74e0:	4b09      	ldr	r3, [pc, #36]	; (b7508 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b74e2:	681b      	ldr	r3, [r3, #0]
   b74e4:	b14b      	cbz	r3, b74fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b74e6:	b003      	add	sp, #12
   b74e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b74ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b74ee:	f7ff ffe5 	bl	b74bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b74f2:	b003      	add	sp, #12
   b74f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b74f8:	2300      	movs	r3, #0
   b74fa:	9300      	str	r3, [sp, #0]
   b74fc:	461a      	mov	r2, r3
   b74fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7502:	f7fd fbab 	bl	b4c5c <system_ctrl_set_result>
}
   b7506:	e7f4      	b.n	b74f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7508:	2003e6f0 	.word	0x2003e6f0

000b750c <module_user_init_hook>:
{
   b750c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b750e:	4812      	ldr	r0, [pc, #72]	; (b7558 <module_user_init_hook+0x4c>)
   b7510:	2100      	movs	r1, #0
   b7512:	f7fd fc4d 	bl	b4db0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7516:	4b11      	ldr	r3, [pc, #68]	; (b755c <module_user_init_hook+0x50>)
   b7518:	681a      	ldr	r2, [r3, #0]
   b751a:	4b11      	ldr	r3, [pc, #68]	; (b7560 <module_user_init_hook+0x54>)
   b751c:	429a      	cmp	r2, r3
   b751e:	4b11      	ldr	r3, [pc, #68]	; (b7564 <module_user_init_hook+0x58>)
   b7520:	bf0c      	ite	eq
   b7522:	2201      	moveq	r2, #1
   b7524:	2200      	movne	r2, #0
   b7526:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7528:	d001      	beq.n	b752e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b752a:	f7ff ffb1 	bl	b7490 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b752e:	f7fd f9c1 	bl	b48b4 <HAL_RNG_GetRandomNumber>
   b7532:	4604      	mov	r4, r0
    srand(seed);
   b7534:	f000 feda 	bl	b82ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7538:	4b0b      	ldr	r3, [pc, #44]	; (b7568 <module_user_init_hook+0x5c>)
   b753a:	b113      	cbz	r3, b7542 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b753c:	4620      	mov	r0, r4
   b753e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7542:	2100      	movs	r1, #0
   b7544:	4808      	ldr	r0, [pc, #32]	; (b7568 <module_user_init_hook+0x5c>)
   b7546:	f7fd fbf3 	bl	b4d30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b754e:	4807      	ldr	r0, [pc, #28]	; (b756c <module_user_init_hook+0x60>)
   b7550:	2100      	movs	r1, #0
   b7552:	f7fd bb79 	b.w	b4c48 <system_ctrl_set_app_request_handler>
   b7556:	bf00      	nop
   b7558:	000b7439 	.word	0x000b7439
   b755c:	2003f400 	.word	0x2003f400
   b7560:	9a271c1e 	.word	0x9a271c1e
   b7564:	2003e6ec 	.word	0x2003e6ec
   b7568:	00000000 	.word	0x00000000
   b756c:	000b74d5 	.word	0x000b74d5

000b7570 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7570:	4770      	bx	lr

000b7572 <_ZN9IPAddressD0Ev>:
   b7572:	b510      	push	{r4, lr}
   b7574:	2118      	movs	r1, #24
   b7576:	4604      	mov	r4, r0
   b7578:	f7fc fd8f 	bl	b409a <_ZdlPvj>
   b757c:	4620      	mov	r0, r4
   b757e:	bd10      	pop	{r4, pc}

000b7580 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7580:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7582:	7d03      	ldrb	r3, [r0, #20]
   b7584:	2b06      	cmp	r3, #6
{
   b7586:	b08d      	sub	sp, #52	; 0x34
   b7588:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b758a:	f100 0704 	add.w	r7, r0, #4
   b758e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7592:	d012      	beq.n	b75ba <_ZNK9IPAddress7printToER5Print+0x3a>
   b7594:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7598:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b759c:	220a      	movs	r2, #10
   b759e:	4630      	mov	r0, r6
   b75a0:	f7fe ff77 	bl	b6492 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b75a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b75a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b75a8:	d019      	beq.n	b75de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b75aa:	2c00      	cmp	r4, #0
   b75ac:	d0f4      	beq.n	b7598 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b75ae:	212e      	movs	r1, #46	; 0x2e
   b75b0:	4630      	mov	r0, r6
   b75b2:	f7fe ff5f 	bl	b6474 <_ZN5Print5printEc>
   b75b6:	4404      	add	r4, r0
   b75b8:	e7ee      	b.n	b7598 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b75ba:	232f      	movs	r3, #47	; 0x2f
   b75bc:	466a      	mov	r2, sp
   b75be:	4639      	mov	r1, r7
   b75c0:	200a      	movs	r0, #10
		buf[0] = 0;
   b75c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b75c6:	f7fd fa27 	bl	b4a18 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b75ca:	4668      	mov	r0, sp
   b75cc:	f000 fee5 	bl	b839a <strlen>
   b75d0:	6833      	ldr	r3, [r6, #0]
   b75d2:	4602      	mov	r2, r0
   b75d4:	68db      	ldr	r3, [r3, #12]
   b75d6:	4669      	mov	r1, sp
   b75d8:	4630      	mov	r0, r6
   b75da:	4798      	blx	r3
   b75dc:	4604      	mov	r4, r0
    }
    return n;
}
   b75de:	4620      	mov	r0, r4
   b75e0:	b00d      	add	sp, #52	; 0x34
   b75e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b75e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b75e4:	b510      	push	{r4, lr}
   b75e6:	4b05      	ldr	r3, [pc, #20]	; (b75fc <_ZN9IPAddressC1Ev+0x18>)
   b75e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b75ea:	2211      	movs	r2, #17
   b75ec:	f840 3b04 	str.w	r3, [r0], #4
   b75f0:	2100      	movs	r1, #0
   b75f2:	f000 fe73 	bl	b82dc <memset>
}
   b75f6:	4620      	mov	r0, r4
   b75f8:	bd10      	pop	{r4, pc}
   b75fa:	bf00      	nop
   b75fc:	000b8ae0 	.word	0x000b8ae0

000b7600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7600:	4603      	mov	r3, r0
   b7602:	4a07      	ldr	r2, [pc, #28]	; (b7620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7604:	b510      	push	{r4, lr}
   b7606:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b760a:	f101 0210 	add.w	r2, r1, #16
   b760e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7612:	f843 4b04 	str.w	r4, [r3], #4
   b7616:	4291      	cmp	r1, r2
   b7618:	d1f9      	bne.n	b760e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b761a:	780a      	ldrb	r2, [r1, #0]
   b761c:	701a      	strb	r2, [r3, #0]
}
   b761e:	bd10      	pop	{r4, pc}
   b7620:	000b8ae0 	.word	0x000b8ae0

000b7624 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7624:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7626:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b762a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b762e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7632:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7636:	2304      	movs	r3, #4
   b7638:	6041      	str	r1, [r0, #4]
   b763a:	7503      	strb	r3, [r0, #20]
}
   b763c:	bd10      	pop	{r4, pc}
	...

000b7640 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7640:	b507      	push	{r0, r1, r2, lr}
   b7642:	4b06      	ldr	r3, [pc, #24]	; (b765c <_ZN9IPAddressC1EPKh+0x1c>)
   b7644:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7646:	78cb      	ldrb	r3, [r1, #3]
   b7648:	9300      	str	r3, [sp, #0]
   b764a:	788b      	ldrb	r3, [r1, #2]
   b764c:	784a      	ldrb	r2, [r1, #1]
   b764e:	7809      	ldrb	r1, [r1, #0]
   b7650:	f7ff ffe8 	bl	b7624 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7654:	b003      	add	sp, #12
   b7656:	f85d fb04 	ldr.w	pc, [sp], #4
   b765a:	bf00      	nop
   b765c:	000b8ae0 	.word	0x000b8ae0

000b7660 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7660:	7441      	strb	r1, [r0, #17]
}
   b7662:	4770      	bx	lr

000b7664 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7664:	4770      	bx	lr

000b7666 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7666:	4770      	bx	lr

000b7668 <_ZN9USBSerial4readEv>:
{
   b7668:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b766a:	2100      	movs	r1, #0
   b766c:	7c00      	ldrb	r0, [r0, #16]
   b766e:	f7fd fa9b 	bl	b4ba8 <HAL_USB_USART_Receive_Data>
}
   b7672:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7676:	bd08      	pop	{r3, pc}

000b7678 <_ZN9USBSerial4peekEv>:
{
   b7678:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b767a:	2101      	movs	r1, #1
   b767c:	7c00      	ldrb	r0, [r0, #16]
   b767e:	f7fd fa93 	bl	b4ba8 <HAL_USB_USART_Receive_Data>
}
   b7682:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7686:	bd08      	pop	{r3, pc}

000b7688 <_ZN9USBSerial17availableForWriteEv>:
{
   b7688:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b768a:	7c00      	ldrb	r0, [r0, #16]
   b768c:	f7fd fa84 	bl	b4b98 <HAL_USB_USART_Available_Data_For_Write>
}
   b7690:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7694:	bd08      	pop	{r3, pc}

000b7696 <_ZN9USBSerial9availableEv>:
{
   b7696:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7698:	7c00      	ldrb	r0, [r0, #16]
   b769a:	f7fd fa75 	bl	b4b88 <HAL_USB_USART_Available_Data>
}
   b769e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76a2:	bd08      	pop	{r3, pc}

000b76a4 <_ZN9USBSerial5writeEh>:
{
   b76a4:	b513      	push	{r0, r1, r4, lr}
   b76a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b76a8:	7c00      	ldrb	r0, [r0, #16]
{
   b76aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b76ac:	f7fd fa74 	bl	b4b98 <HAL_USB_USART_Available_Data_For_Write>
   b76b0:	2800      	cmp	r0, #0
   b76b2:	9901      	ldr	r1, [sp, #4]
   b76b4:	dc01      	bgt.n	b76ba <_ZN9USBSerial5writeEh+0x16>
   b76b6:	7c60      	ldrb	r0, [r4, #17]
   b76b8:	b120      	cbz	r0, b76c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b76ba:	7c20      	ldrb	r0, [r4, #16]
   b76bc:	f7fd fa7c 	bl	b4bb8 <HAL_USB_USART_Send_Data>
   b76c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b76c4:	b002      	add	sp, #8
   b76c6:	bd10      	pop	{r4, pc}

000b76c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b76c8:	7c00      	ldrb	r0, [r0, #16]
   b76ca:	f7fd ba7d 	b.w	b4bc8 <HAL_USB_USART_Flush_Data>

000b76ce <_ZN9USBSerialD0Ev>:
   b76ce:	b510      	push	{r4, lr}
   b76d0:	2114      	movs	r1, #20
   b76d2:	4604      	mov	r4, r0
   b76d4:	f7fc fce1 	bl	b409a <_ZdlPvj>
   b76d8:	4620      	mov	r0, r4
   b76da:	bd10      	pop	{r4, pc}

000b76dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b76dc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b76de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76e2:	4604      	mov	r4, r0
   b76e4:	4608      	mov	r0, r1
   b76e6:	2100      	movs	r1, #0
   b76e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b76ec:	4b04      	ldr	r3, [pc, #16]	; (b7700 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b76ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b76f0:	2301      	movs	r3, #1
  _serial = serial;
   b76f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b76f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b76f6:	4611      	mov	r1, r2
   b76f8:	f7fd fa2e 	bl	b4b58 <HAL_USB_USART_Init>
}
   b76fc:	4620      	mov	r0, r4
   b76fe:	bd10      	pop	{r4, pc}
   b7700:	000b8af4 	.word	0x000b8af4

000b7704 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7704:	7c00      	ldrb	r0, [r0, #16]
   b7706:	2200      	movs	r2, #0
   b7708:	f7fd ba2e 	b.w	b4b68 <HAL_USB_USART_Begin>

000b770c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b770c:	7c00      	ldrb	r0, [r0, #16]
   b770e:	f7fd ba33 	b.w	b4b78 <HAL_USB_USART_End>

000b7712 <_Z19acquireSerialBufferv>:
{
   b7712:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7714:	2214      	movs	r2, #20
{
   b7716:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7718:	2100      	movs	r1, #0
   b771a:	f000 fddf 	bl	b82dc <memset>
}
   b771e:	4620      	mov	r0, r4
   b7720:	bd10      	pop	{r4, pc}
	...

000b7724 <_Z16_fetch_usbserialv>:
{
   b7724:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7726:	4c0f      	ldr	r4, [pc, #60]	; (b7764 <_Z16_fetch_usbserialv+0x40>)
{
   b7728:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b772a:	a803      	add	r0, sp, #12
   b772c:	f7ff fff1 	bl	b7712 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7730:	7821      	ldrb	r1, [r4, #0]
   b7732:	f3bf 8f5b 	dmb	ish
   b7736:	f011 0101 	ands.w	r1, r1, #1
   b773a:	d10f      	bne.n	b775c <_Z16_fetch_usbserialv+0x38>
   b773c:	4620      	mov	r0, r4
   b773e:	9101      	str	r1, [sp, #4]
   b7740:	f7fc fcba 	bl	b40b8 <__cxa_guard_acquire>
   b7744:	9901      	ldr	r1, [sp, #4]
   b7746:	b148      	cbz	r0, b775c <_Z16_fetch_usbserialv+0x38>
   b7748:	aa03      	add	r2, sp, #12
   b774a:	4807      	ldr	r0, [pc, #28]	; (b7768 <_Z16_fetch_usbserialv+0x44>)
   b774c:	f7ff ffc6 	bl	b76dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7750:	4620      	mov	r0, r4
   b7752:	f7fc fcb6 	bl	b40c2 <__cxa_guard_release>
   b7756:	4805      	ldr	r0, [pc, #20]	; (b776c <_Z16_fetch_usbserialv+0x48>)
   b7758:	f000 fd7a 	bl	b8250 <atexit>
	return _usbserial;
}
   b775c:	4802      	ldr	r0, [pc, #8]	; (b7768 <_Z16_fetch_usbserialv+0x44>)
   b775e:	b008      	add	sp, #32
   b7760:	bd10      	pop	{r4, pc}
   b7762:	bf00      	nop
   b7764:	2003e6f4 	.word	0x2003e6f4
   b7768:	2003e6f8 	.word	0x2003e6f8
   b776c:	000b7665 	.word	0x000b7665

000b7770 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7770:	4770      	bx	lr

000b7772 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7772:	7441      	strb	r1, [r0, #17]
}
   b7774:	4770      	bx	lr

000b7776 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7776:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7778:	7c00      	ldrb	r0, [r0, #16]
   b777a:	f7fd f98d 	bl	b4a98 <hal_usart_available_data_for_write>
}
   b777e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7782:	bd08      	pop	{r3, pc}

000b7784 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7784:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7786:	7c00      	ldrb	r0, [r0, #16]
   b7788:	f7fd f95e 	bl	b4a48 <hal_usart_available>
}
   b778c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7790:	bd08      	pop	{r3, pc}

000b7792 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7792:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7794:	7c00      	ldrb	r0, [r0, #16]
   b7796:	f7fd f967 	bl	b4a68 <hal_usart_peek>
}
   b779a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b779e:	bd08      	pop	{r3, pc}

000b77a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b77a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b77a2:	7c00      	ldrb	r0, [r0, #16]
   b77a4:	f7fd f958 	bl	b4a58 <hal_usart_read>
}
   b77a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77ac:	bd08      	pop	{r3, pc}

000b77ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b77ae:	7c00      	ldrb	r0, [r0, #16]
   b77b0:	f7fd b962 	b.w	b4a78 <hal_usart_flush>

000b77b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b77b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77b6:	7c45      	ldrb	r5, [r0, #17]
{
   b77b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77ba:	b12d      	cbz	r5, b77c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b77bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b77be:	b003      	add	sp, #12
   b77c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b77c4:	f7fd b938 	b.w	b4a38 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b77c8:	7c00      	ldrb	r0, [r0, #16]
   b77ca:	9101      	str	r1, [sp, #4]
   b77cc:	f7fd f964 	bl	b4a98 <hal_usart_available_data_for_write>
   b77d0:	2800      	cmp	r0, #0
   b77d2:	9901      	ldr	r1, [sp, #4]
   b77d4:	dcf2      	bgt.n	b77bc <_ZN11USARTSerial5writeEh+0x8>
}
   b77d6:	4628      	mov	r0, r5
   b77d8:	b003      	add	sp, #12
   b77da:	bd30      	pop	{r4, r5, pc}

000b77dc <_ZN11USARTSerialD0Ev>:
   b77dc:	b510      	push	{r4, lr}
   b77de:	2114      	movs	r1, #20
   b77e0:	4604      	mov	r4, r0
   b77e2:	f7fc fc5a 	bl	b409a <_ZdlPvj>
   b77e6:	4620      	mov	r0, r4
   b77e8:	bd10      	pop	{r4, pc}
	...

000b77ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b77ec:	b510      	push	{r4, lr}
   b77ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77f2:	4604      	mov	r4, r0
   b77f4:	4608      	mov	r0, r1
   b77f6:	4611      	mov	r1, r2
   b77f8:	2200      	movs	r2, #0
   b77fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b77fe:	4b04      	ldr	r3, [pc, #16]	; (b7810 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7800:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7802:	2301      	movs	r3, #1
  _serial = serial;
   b7804:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7806:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7808:	f7fd f956 	bl	b4ab8 <hal_usart_init_ex>
}
   b780c:	4620      	mov	r0, r4
   b780e:	bd10      	pop	{r4, pc}
   b7810:	000b8b24 	.word	0x000b8b24

000b7814 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7814:	7c00      	ldrb	r0, [r0, #16]
   b7816:	2300      	movs	r3, #0
   b7818:	f7fd b946 	b.w	b4aa8 <hal_usart_begin_config>

000b781c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b781c:	2200      	movs	r2, #0
   b781e:	f7ff bff9 	b.w	b7814 <_ZN11USARTSerial5beginEmm>

000b7822 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7822:	7c00      	ldrb	r0, [r0, #16]
   b7824:	f7fd b900 	b.w	b4a28 <hal_usart_end>

000b7828 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7828:	4770      	bx	lr

000b782a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b782c:	4606      	mov	r6, r0
   b782e:	4615      	mov	r5, r2
   b7830:	460c      	mov	r4, r1
   b7832:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7834:	42bc      	cmp	r4, r7
   b7836:	d006      	beq.n	b7846 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7838:	6833      	ldr	r3, [r6, #0]
   b783a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b783e:	689b      	ldr	r3, [r3, #8]
   b7840:	4630      	mov	r0, r6
   b7842:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7844:	e7f6      	b.n	b7834 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7846:	4628      	mov	r0, r5
   b7848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b784a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b784a:	7c00      	ldrb	r0, [r0, #16]
   b784c:	2200      	movs	r2, #0
   b784e:	f7fd b93b 	b.w	b4ac8 <hal_i2c_write>

000b7852 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7852:	7c00      	ldrb	r0, [r0, #16]
   b7854:	2100      	movs	r1, #0
   b7856:	f7fd b93f 	b.w	b4ad8 <hal_i2c_available>

000b785a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b785a:	7c00      	ldrb	r0, [r0, #16]
   b785c:	2100      	movs	r1, #0
   b785e:	f7fd b943 	b.w	b4ae8 <hal_i2c_read>

000b7862 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7862:	7c00      	ldrb	r0, [r0, #16]
   b7864:	2100      	movs	r1, #0
   b7866:	f7fd b947 	b.w	b4af8 <hal_i2c_peek>

000b786a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b786a:	7c00      	ldrb	r0, [r0, #16]
   b786c:	2100      	movs	r1, #0
   b786e:	f7fd b94b 	b.w	b4b08 <hal_i2c_flush>

000b7872 <_ZN7TwoWireD0Ev>:
   b7872:	b510      	push	{r4, lr}
   b7874:	2114      	movs	r1, #20
   b7876:	4604      	mov	r4, r0
   b7878:	f7fc fc0f 	bl	b409a <_ZdlPvj>
   b787c:	4620      	mov	r0, r4
   b787e:	bd10      	pop	{r4, pc}

000b7880 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7880:	b538      	push	{r3, r4, r5, lr}
   b7882:	4604      	mov	r4, r0
   b7884:	4615      	mov	r5, r2
   b7886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b788a:	2200      	movs	r2, #0
   b788c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7890:	4b09      	ldr	r3, [pc, #36]	; (b78b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7892:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7894:	4608      	mov	r0, r1
   b7896:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7898:	4629      	mov	r1, r5
   b789a:	f7fd f945 	bl	b4b28 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b789e:	30bf      	adds	r0, #191	; 0xbf
   b78a0:	d108      	bne.n	b78b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b78a2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b78a4:	07db      	lsls	r3, r3, #31
   b78a6:	d505      	bpl.n	b78b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b78a8:	6868      	ldr	r0, [r5, #4]
   b78aa:	f7fd fa51 	bl	b4d50 <free>
    free(conf.tx_buffer);
   b78ae:	68e8      	ldr	r0, [r5, #12]
   b78b0:	f7fd fa4e 	bl	b4d50 <free>
}
   b78b4:	4620      	mov	r0, r4
   b78b6:	bd38      	pop	{r3, r4, r5, pc}
   b78b8:	000b8b54 	.word	0x000b8b54

000b78bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b78bc:	2200      	movs	r2, #0
   b78be:	6840      	ldr	r0, [r0, #4]
   b78c0:	4611      	mov	r1, r2
   b78c2:	f7fd b9ed 	b.w	b4ca0 <network_ready>

000b78c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b78c6:	2200      	movs	r2, #0
   b78c8:	6840      	ldr	r0, [r0, #4]
   b78ca:	4611      	mov	r1, r2
   b78cc:	f7fd ba08 	b.w	b4ce0 <network_listening>

000b78d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b78d0:	2200      	movs	r2, #0
   b78d2:	6840      	ldr	r0, [r0, #4]
   b78d4:	4611      	mov	r1, r2
   b78d6:	f7fd ba13 	b.w	b4d00 <network_get_listen_timeout>

000b78da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b78da:	6840      	ldr	r0, [r0, #4]
   b78dc:	2200      	movs	r2, #0
   b78de:	f7fd ba07 	b.w	b4cf0 <network_set_listen_timeout>

000b78e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b78e2:	6840      	ldr	r0, [r0, #4]
   b78e4:	2200      	movs	r2, #0
   b78e6:	f081 0101 	eor.w	r1, r1, #1
   b78ea:	f7fd b9f1 	b.w	b4cd0 <network_listen>

000b78ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b78ee:	2300      	movs	r3, #0
   b78f0:	6840      	ldr	r0, [r0, #4]
   b78f2:	461a      	mov	r2, r3
   b78f4:	4619      	mov	r1, r3
   b78f6:	f7fd b9e3 	b.w	b4cc0 <network_off>

000b78fa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b78fa:	2300      	movs	r3, #0
   b78fc:	6840      	ldr	r0, [r0, #4]
   b78fe:	461a      	mov	r2, r3
   b7900:	4619      	mov	r1, r3
   b7902:	f7fd b9d5 	b.w	b4cb0 <network_on>

000b7906 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7906:	2200      	movs	r2, #0
   b7908:	6840      	ldr	r0, [r0, #4]
   b790a:	4611      	mov	r1, r2
   b790c:	f7fd b9b8 	b.w	b4c80 <network_connecting>

000b7910 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7910:	6840      	ldr	r0, [r0, #4]
   b7912:	2200      	movs	r2, #0
   b7914:	2102      	movs	r1, #2
   b7916:	f7fd b9bb 	b.w	b4c90 <network_disconnect>

000b791a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b791a:	2300      	movs	r3, #0
   b791c:	6840      	ldr	r0, [r0, #4]
   b791e:	461a      	mov	r2, r3
   b7920:	f7fd b9a6 	b.w	b4c70 <network_connect>

000b7924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7924:	4b02      	ldr	r3, [pc, #8]	; (b7930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7926:	2204      	movs	r2, #4
   b7928:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b792a:	4a02      	ldr	r2, [pc, #8]	; (b7934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b792c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b792e:	4770      	bx	lr
   b7930:	2003e70c 	.word	0x2003e70c
   b7934:	000b8b7c 	.word	0x000b8b7c

000b7938 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7938:	2300      	movs	r3, #0
   b793a:	6840      	ldr	r0, [r0, #4]
   b793c:	461a      	mov	r2, r3
   b793e:	f7fd b997 	b.w	b4c70 <network_connect>

000b7942 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7942:	6840      	ldr	r0, [r0, #4]
   b7944:	2200      	movs	r2, #0
   b7946:	2102      	movs	r1, #2
   b7948:	f7fd b9a2 	b.w	b4c90 <network_disconnect>

000b794c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b794c:	2200      	movs	r2, #0
   b794e:	6840      	ldr	r0, [r0, #4]
   b7950:	4611      	mov	r1, r2
   b7952:	f7fd b995 	b.w	b4c80 <network_connecting>

000b7956 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7956:	2200      	movs	r2, #0
   b7958:	6840      	ldr	r0, [r0, #4]
   b795a:	4611      	mov	r1, r2
   b795c:	f7fd b9a0 	b.w	b4ca0 <network_ready>

000b7960 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7960:	2300      	movs	r3, #0
   b7962:	6840      	ldr	r0, [r0, #4]
   b7964:	461a      	mov	r2, r3
   b7966:	4619      	mov	r1, r3
   b7968:	f7fd b9a2 	b.w	b4cb0 <network_on>

000b796c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b796c:	2300      	movs	r3, #0
   b796e:	6840      	ldr	r0, [r0, #4]
   b7970:	461a      	mov	r2, r3
   b7972:	4619      	mov	r1, r3
   b7974:	f7fd b9a4 	b.w	b4cc0 <network_off>

000b7978 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7978:	6840      	ldr	r0, [r0, #4]
   b797a:	2100      	movs	r1, #0
   b797c:	f7fd b9c8 	b.w	b4d10 <network_is_on>

000b7980 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7980:	6840      	ldr	r0, [r0, #4]
   b7982:	2100      	movs	r1, #0
   b7984:	f7fd b9cc 	b.w	b4d20 <network_is_off>

000b7988 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7988:	6840      	ldr	r0, [r0, #4]
   b798a:	2200      	movs	r2, #0
   b798c:	f081 0101 	eor.w	r1, r1, #1
   b7990:	f7fd b99e 	b.w	b4cd0 <network_listen>

000b7994 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7994:	6840      	ldr	r0, [r0, #4]
   b7996:	2200      	movs	r2, #0
   b7998:	f7fd b9aa 	b.w	b4cf0 <network_set_listen_timeout>

000b799c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b799c:	2200      	movs	r2, #0
   b799e:	6840      	ldr	r0, [r0, #4]
   b79a0:	4611      	mov	r1, r2
   b79a2:	f7fd b9ad 	b.w	b4d00 <network_get_listen_timeout>

000b79a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b79a6:	2200      	movs	r2, #0
   b79a8:	6840      	ldr	r0, [r0, #4]
   b79aa:	4611      	mov	r1, r2
   b79ac:	f7fd b998 	b.w	b4ce0 <network_listening>

000b79b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b79b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79b4:	b095      	sub	sp, #84	; 0x54
   b79b6:	4614      	mov	r4, r2
   b79b8:	460d      	mov	r5, r1
   b79ba:	4607      	mov	r7, r0
    IPAddress addr;
   b79bc:	f7ff fe12 	bl	b75e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b79c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b79c2:	221c      	movs	r2, #28
   b79c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b79c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b79c8:	f000 fc88 	bl	b82dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b79cc:	2340      	movs	r3, #64	; 0x40
   b79ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b79d0:	4620      	mov	r0, r4
   b79d2:	466b      	mov	r3, sp
   b79d4:	aa0c      	add	r2, sp, #48	; 0x30
   b79d6:	2100      	movs	r1, #0
   b79d8:	f7fc ff4c 	bl	b4874 <netdb_getaddrinfo>
    if (!r) {
   b79dc:	4604      	mov	r4, r0
   b79de:	2800      	cmp	r0, #0
   b79e0:	d14b      	bne.n	b7a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79e2:	4602      	mov	r2, r0
   b79e4:	2101      	movs	r1, #1
   b79e6:	6868      	ldr	r0, [r5, #4]
   b79e8:	f7fd f95a 	bl	b4ca0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79f0:	4622      	mov	r2, r4
   b79f2:	6868      	ldr	r0, [r5, #4]
   b79f4:	f7fd f954 	bl	b4ca0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79fa:	4681      	mov	r9, r0
        bool ok = false;
   b79fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79fe:	2e00      	cmp	r6, #0
   b7a00:	d03b      	beq.n	b7a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7a02:	2900      	cmp	r1, #0
   b7a04:	d139      	bne.n	b7a7a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7a06:	6873      	ldr	r3, [r6, #4]
   b7a08:	2b02      	cmp	r3, #2
   b7a0a:	d003      	beq.n	b7a14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7a0c:	2b0a      	cmp	r3, #10
   b7a0e:	d011      	beq.n	b7a34 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7a10:	69f6      	ldr	r6, [r6, #28]
   b7a12:	e7f4      	b.n	b79fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7a14:	f1b8 0f00 	cmp.w	r8, #0
   b7a18:	d0fa      	beq.n	b7a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7a1a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7a1c:	a806      	add	r0, sp, #24
   b7a1e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7a20:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7a22:	f7ff fe0d 	bl	b7640 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a28:	1d3c      	adds	r4, r7, #4
   b7a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a2c:	682b      	ldr	r3, [r5, #0]
   b7a2e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a30:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7a32:	e7ed      	b.n	b7a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7a34:	f1b9 0f00 	cmp.w	r9, #0
   b7a38:	d0ea      	beq.n	b7a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7a3a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7a3c:	2210      	movs	r2, #16
   b7a3e:	a801      	add	r0, sp, #4
   b7a40:	f000 fc4c 	bl	b82dc <memset>
                    a.v = 6;
   b7a44:	2306      	movs	r3, #6
   b7a46:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a4a:	ad01      	add	r5, sp, #4
   b7a4c:	f104 0308 	add.w	r3, r4, #8
   b7a50:	3418      	adds	r4, #24
   b7a52:	6818      	ldr	r0, [r3, #0]
   b7a54:	6859      	ldr	r1, [r3, #4]
   b7a56:	462a      	mov	r2, r5
   b7a58:	c203      	stmia	r2!, {r0, r1}
   b7a5a:	3308      	adds	r3, #8
   b7a5c:	42a3      	cmp	r3, r4
   b7a5e:	4615      	mov	r5, r2
   b7a60:	d1f7      	bne.n	b7a52 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7a62:	a901      	add	r1, sp, #4
   b7a64:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7a66:	ad07      	add	r5, sp, #28
   b7a68:	f7ff fdca 	bl	b7600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a6e:	1d3c      	adds	r4, r7, #4
   b7a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a72:	682b      	ldr	r3, [r5, #0]
   b7a74:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a76:	4649      	mov	r1, r9
   b7a78:	e7ca      	b.n	b7a10 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7a7a:	9800      	ldr	r0, [sp, #0]
   b7a7c:	f7fc fef2 	bl	b4864 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7a80:	4638      	mov	r0, r7
   b7a82:	b015      	add	sp, #84	; 0x54
   b7a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7a88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7a88:	4b02      	ldr	r3, [pc, #8]	; (b7a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7a8a:	4a03      	ldr	r2, [pc, #12]	; (b7a98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7a8c:	601a      	str	r2, [r3, #0]
   b7a8e:	2200      	movs	r2, #0
   b7a90:	605a      	str	r2, [r3, #4]

} // spark
   b7a92:	4770      	bx	lr
   b7a94:	2003e714 	.word	0x2003e714
   b7a98:	000b8bb8 	.word	0x000b8bb8

000b7a9c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7a9c:	f100 0310 	add.w	r3, r0, #16
   b7aa0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7aa2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7aa6:	2901      	cmp	r1, #1
   b7aa8:	4618      	mov	r0, r3
   b7aaa:	d108      	bne.n	b7abe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7aac:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7ab0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7ab4:	3a01      	subs	r2, #1
   b7ab6:	f103 0310 	add.w	r3, r3, #16
   b7aba:	d1f2      	bne.n	b7aa2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7abc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7abe:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7ac0:	bf04      	itt	eq
   b7ac2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7ac6:	1852      	addeq	r2, r2, r1
   b7ac8:	e7f4      	b.n	b7ab4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7aca <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7aca:	b40e      	push	{r1, r2, r3}
   b7acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ace:	b088      	sub	sp, #32
   b7ad0:	af00      	add	r7, sp, #0
   b7ad2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7ad6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7ad8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7adc:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7ade:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7ae0:	462b      	mov	r3, r5
   b7ae2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7ae4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7ae6:	f7fd f943 	bl	b4d70 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7aea:	280f      	cmp	r0, #15
   b7aec:	687a      	ldr	r2, [r7, #4]
   b7aee:	d91a      	bls.n	b7b26 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7af0:	f100 0308 	add.w	r3, r0, #8
   b7af4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7af8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7afa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7afe:	1c41      	adds	r1, r0, #1
   b7b00:	462b      	mov	r3, r5
   b7b02:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7b04:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7b06:	f7fd f933 	bl	b4d70 <vsnprintf>
        if (n > 0) {
   b7b0a:	1e02      	subs	r2, r0, #0
   b7b0c:	dd04      	ble.n	b7b18 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7b0e:	6823      	ldr	r3, [r4, #0]
   b7b10:	4669      	mov	r1, sp
   b7b12:	689b      	ldr	r3, [r3, #8]
   b7b14:	4620      	mov	r0, r4
   b7b16:	4798      	blx	r3
   b7b18:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7b1a:	3720      	adds	r7, #32
   b7b1c:	46bd      	mov	sp, r7
   b7b1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7b22:	b003      	add	sp, #12
   b7b24:	4770      	bx	lr
    } else if (n > 0) {
   b7b26:	2800      	cmp	r0, #0
   b7b28:	d0f7      	beq.n	b7b1a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7b2a:	6823      	ldr	r3, [r4, #0]
   b7b2c:	4602      	mov	r2, r0
   b7b2e:	689b      	ldr	r3, [r3, #8]
   b7b30:	f107 0110 	add.w	r1, r7, #16
   b7b34:	4620      	mov	r0, r4
   b7b36:	4798      	blx	r3
}
   b7b38:	e7ef      	b.n	b7b1a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7b3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7b3a:	b538      	push	{r3, r4, r5, lr}
   b7b3c:	680b      	ldr	r3, [r1, #0]
   b7b3e:	6003      	str	r3, [r0, #0]
   b7b40:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7b42:	6843      	ldr	r3, [r0, #4]
   b7b44:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7b46:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7b48:	d008      	beq.n	b7b5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7b4a:	b115      	cbz	r5, b7b52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7b4c:	686b      	ldr	r3, [r5, #4]
   b7b4e:	3301      	adds	r3, #1
   b7b50:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7b52:	6860      	ldr	r0, [r4, #4]
   b7b54:	b108      	cbz	r0, b7b5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7b56:	f7fd fb61 	bl	b521c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7b5a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7b5c:	bd38      	pop	{r3, r4, r5, pc}

000b7b5e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b7b5e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7b60:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7b62:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7b66:	689b      	ldr	r3, [r3, #8]
   b7b68:	2201      	movs	r2, #1
   b7b6a:	f10d 0107 	add.w	r1, sp, #7
   b7b6e:	4798      	blx	r3
}
   b7b70:	b003      	add	sp, #12
   b7b72:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7b76:	460b      	mov	r3, r1
   b7b78:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7b7a:	2200      	movs	r2, #0
   b7b7c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7b7e:	e9c0 2200 	strd	r2, r2, [r0]
   b7b82:	4604      	mov	r4, r0
        t_ = t;
   b7b84:	6083      	str	r3, [r0, #8]
    if (t) {
   b7b86:	b90b      	cbnz	r3, b7b8c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7b88:	4620      	mov	r0, r4
   b7b8a:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7b8c:	f7ff ffd5 	bl	b7b3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7b90:	e7fa      	b.n	b7b88 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7b92 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7b92:	6883      	ldr	r3, [r0, #8]
   b7b94:	b1eb      	cbz	r3, b7bd2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7b96:	781a      	ldrb	r2, [r3, #0]
   b7b98:	2a03      	cmp	r2, #3
   b7b9a:	d81a      	bhi.n	b7bd2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b7b9c:	e8df f002 	tbb	[pc, r2]
   b7ba0:	1b021704 	.word	0x1b021704
   b7ba4:	2005      	movs	r0, #5
   b7ba6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7ba8:	6802      	ldr	r2, [r0, #0]
   b7baa:	685b      	ldr	r3, [r3, #4]
   b7bac:	6852      	ldr	r2, [r2, #4]
   b7bae:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7bb0:	282d      	cmp	r0, #45	; 0x2d
   b7bb2:	d012      	beq.n	b7bda <_ZNK5spark9JSONValue4typeEv+0x48>
   b7bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7bb8:	2b09      	cmp	r3, #9
   b7bba:	d90e      	bls.n	b7bda <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7bbc:	2874      	cmp	r0, #116	; 0x74
   b7bbe:	d00e      	beq.n	b7bde <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7bc0:	2866      	cmp	r0, #102	; 0x66
   b7bc2:	d00c      	beq.n	b7bde <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7bc4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7bc8:	4258      	negs	r0, r3
   b7bca:	4158      	adcs	r0, r3
   b7bcc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7bce:	2006      	movs	r0, #6
   b7bd0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7bd2:	2000      	movs	r0, #0
   b7bd4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7bd6:	2004      	movs	r0, #4
   b7bd8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7bda:	2003      	movs	r0, #3
   b7bdc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7bde:	2002      	movs	r0, #2
}
   b7be0:	4770      	bx	lr

000b7be2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7be2:	b510      	push	{r4, lr}
   b7be4:	4604      	mov	r4, r0
    switch (type()) {
   b7be6:	f7ff ffd4 	bl	b7b92 <_ZNK5spark9JSONValue4typeEv>
   b7bea:	2802      	cmp	r0, #2
   b7bec:	d00e      	beq.n	b7c0c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7bee:	1ec3      	subs	r3, r0, #3
   b7bf0:	b2db      	uxtb	r3, r3
   b7bf2:	2b01      	cmp	r3, #1
   b7bf4:	d814      	bhi.n	b7c20 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7bf6:	6822      	ldr	r2, [r4, #0]
   b7bf8:	68a3      	ldr	r3, [r4, #8]
   b7bfa:	6850      	ldr	r0, [r2, #4]
   b7bfc:	685b      	ldr	r3, [r3, #4]
}
   b7bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7c02:	220a      	movs	r2, #10
   b7c04:	2100      	movs	r1, #0
   b7c06:	4418      	add	r0, r3
   b7c08:	f000 bc98 	b.w	b853c <strtol>
        const char* const s = d_->json + t_->start;
   b7c0c:	6822      	ldr	r2, [r4, #0]
   b7c0e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7c10:	6852      	ldr	r2, [r2, #4]
   b7c12:	685b      	ldr	r3, [r3, #4]
   b7c14:	5cd0      	ldrb	r0, [r2, r3]
   b7c16:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7c1a:	4258      	negs	r0, r3
   b7c1c:	4158      	adcs	r0, r3
}
   b7c1e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7c20:	2000      	movs	r0, #0
   b7c22:	e7fc      	b.n	b7c1e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7c24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7c24:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7c26:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7c28:	e9c0 3300 	strd	r3, r3, [r0]
   b7c2c:	4604      	mov	r4, r0
        n_(0) {
   b7c2e:	480e      	ldr	r0, [pc, #56]	; (b7c68 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7c30:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7c34:	b1a9      	cbz	r1, b7c62 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7c36:	780b      	ldrb	r3, [r1, #0]
   b7c38:	2b03      	cmp	r3, #3
   b7c3a:	d006      	beq.n	b7c4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7c3c:	b98b      	cbnz	r3, b7c62 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7c3e:	6813      	ldr	r3, [r2, #0]
   b7c40:	6858      	ldr	r0, [r3, #4]
   b7c42:	684b      	ldr	r3, [r1, #4]
   b7c44:	5cc3      	ldrb	r3, [r0, r3]
   b7c46:	2b6e      	cmp	r3, #110	; 0x6e
   b7c48:	d007      	beq.n	b7c5a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7c4a:	6813      	ldr	r3, [r2, #0]
   b7c4c:	684d      	ldr	r5, [r1, #4]
   b7c4e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7c50:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7c52:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7c54:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7c56:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7c58:	60e3      	str	r3, [r4, #12]
   b7c5a:	4611      	mov	r1, r2
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	f7ff ff6c 	bl	b7b3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7c62:	4620      	mov	r0, r4
   b7c64:	bd38      	pop	{r3, r4, r5, pc}
   b7c66:	bf00      	nop
   b7c68:	000b8a2c 	.word	0x000b8a2c

000b7c6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7c6c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7c6e:	2500      	movs	r5, #0
   b7c70:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7c72:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7c76:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7c7a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7c7e:	4604      	mov	r4, r0
   b7c80:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7c82:	b14b      	cbz	r3, b7c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7c84:	781a      	ldrb	r2, [r3, #0]
   b7c86:	2a01      	cmp	r2, #1
   b7c88:	d106      	bne.n	b7c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7c8a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7c8e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7c90:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7c92:	6143      	str	r3, [r0, #20]
   b7c94:	f7ff ff51 	bl	b7b3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7c98:	4620      	mov	r0, r4
   b7c9a:	bd38      	pop	{r3, r4, r5, pc}

000b7c9c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7c9c:	b510      	push	{r4, lr}
    if (!n_) {
   b7c9e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7ca0:	4604      	mov	r4, r0
    if (!n_) {
   b7ca2:	b163      	cbz	r3, b7cbe <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7ca4:	6880      	ldr	r0, [r0, #8]
   b7ca6:	60e0      	str	r0, [r4, #12]
    --n_;
   b7ca8:	3b01      	subs	r3, #1
    ++t_;
   b7caa:	3010      	adds	r0, #16
   b7cac:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7cae:	6120      	str	r0, [r4, #16]
    --n_;
   b7cb0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7cb2:	b113      	cbz	r3, b7cba <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7cb4:	f7ff fef2 	bl	b7a9c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7cb8:	60a0      	str	r0, [r4, #8]
    return true;
   b7cba:	2001      	movs	r0, #1
   b7cbc:	e000      	b.n	b7cc0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7cbe:	4618      	mov	r0, r3
}
   b7cc0:	bd10      	pop	{r4, pc}

000b7cc2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7cc2:	b510      	push	{r4, lr}
    write('}');
   b7cc4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7cc6:	4604      	mov	r4, r0
    write('}');
   b7cc8:	f7ff ff49 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7ccc:	2301      	movs	r3, #1
   b7cce:	7123      	strb	r3, [r4, #4]
}
   b7cd0:	4620      	mov	r0, r4
   b7cd2:	bd10      	pop	{r4, pc}

000b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7cd4:	b508      	push	{r3, lr}
    switch (state_) {
   b7cd6:	7903      	ldrb	r3, [r0, #4]
   b7cd8:	2b01      	cmp	r3, #1
   b7cda:	d002      	beq.n	b7ce2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7cdc:	2b02      	cmp	r3, #2
   b7cde:	d004      	beq.n	b7cea <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7ce0:	bd08      	pop	{r3, pc}
        write(',');
   b7ce2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7ce4:	f7ff ff3b 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
}
   b7ce8:	e7fa      	b.n	b7ce0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b7cea:	213a      	movs	r1, #58	; 0x3a
   b7cec:	e7fa      	b.n	b7ce4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7cee <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7cee:	b510      	push	{r4, lr}
   b7cf0:	4604      	mov	r4, r0
    writeSeparator();
   b7cf2:	f7ff ffef 	bl	b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	217b      	movs	r1, #123	; 0x7b
   b7cfa:	f7ff ff30 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7cfe:	2300      	movs	r3, #0
   b7d00:	7123      	strb	r3, [r4, #4]
}
   b7d02:	4620      	mov	r0, r4
   b7d04:	bd10      	pop	{r4, pc}
	...

000b7d08 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b7d08:	b513      	push	{r0, r1, r4, lr}
   b7d0a:	4604      	mov	r4, r0
   b7d0c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7d0e:	f7ff ffe1 	bl	b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7d12:	6823      	ldr	r3, [r4, #0]
   b7d14:	9a01      	ldr	r2, [sp, #4]
   b7d16:	68db      	ldr	r3, [r3, #12]
   b7d18:	4903      	ldr	r1, [pc, #12]	; (b7d28 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b7d1a:	4620      	mov	r0, r4
   b7d1c:	4798      	blx	r3
    state_ = NEXT;
   b7d1e:	2301      	movs	r3, #1
}
   b7d20:	4620      	mov	r0, r4
    state_ = NEXT;
   b7d22:	7123      	strb	r3, [r4, #4]
}
   b7d24:	b002      	add	sp, #8
   b7d26:	bd10      	pop	{r4, pc}
   b7d28:	000b8a09 	.word	0x000b8a09

000b7d2c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b7d2c:	b513      	push	{r0, r1, r4, lr}
   b7d2e:	4604      	mov	r4, r0
   b7d30:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7d32:	f7ff ffcf 	bl	b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b7d36:	6823      	ldr	r3, [r4, #0]
   b7d38:	9a01      	ldr	r2, [sp, #4]
   b7d3a:	68db      	ldr	r3, [r3, #12]
   b7d3c:	4903      	ldr	r1, [pc, #12]	; (b7d4c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b7d3e:	4620      	mov	r0, r4
   b7d40:	4798      	blx	r3
    state_ = NEXT;
   b7d42:	2301      	movs	r3, #1
}
   b7d44:	4620      	mov	r0, r4
    state_ = NEXT;
   b7d46:	7123      	strb	r3, [r4, #4]
}
   b7d48:	b002      	add	sp, #8
   b7d4a:	bd10      	pop	{r4, pc}
   b7d4c:	000b8bec 	.word	0x000b8bec

000b7d50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d54:	460d      	mov	r5, r1
    write('"');
   b7d56:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7d58:	4690      	mov	r8, r2
   b7d5a:	4604      	mov	r4, r0
    write('"');
   b7d5c:	f7ff feff 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7d60:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7d64:	44a8      	add	r8, r5
    const char *s = str;
   b7d66:	462f      	mov	r7, r5
    while (s != end) {
   b7d68:	4547      	cmp	r7, r8
   b7d6a:	46ba      	mov	sl, r7
   b7d6c:	d03d      	beq.n	b7dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7d6e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7d72:	2e22      	cmp	r6, #34	; 0x22
   b7d74:	d006      	beq.n	b7d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7d76:	2e5c      	cmp	r6, #92	; 0x5c
   b7d78:	d004      	beq.n	b7d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7d7a:	4630      	mov	r0, r6
   b7d7c:	f000 fa6e 	bl	b825c <isprint>
   b7d80:	2800      	cmp	r0, #0
   b7d82:	d1f1      	bne.n	b7d68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7d84:	6823      	ldr	r3, [r4, #0]
   b7d86:	ebaa 0205 	sub.w	r2, sl, r5
   b7d8a:	689b      	ldr	r3, [r3, #8]
   b7d8c:	4629      	mov	r1, r5
   b7d8e:	4620      	mov	r0, r4
   b7d90:	4798      	blx	r3
            write('\\');
   b7d92:	215c      	movs	r1, #92	; 0x5c
   b7d94:	4620      	mov	r0, r4
   b7d96:	f7ff fee2 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7d9a:	2e0d      	cmp	r6, #13
   b7d9c:	d80a      	bhi.n	b7db4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7d9e:	2e07      	cmp	r6, #7
   b7da0:	d91c      	bls.n	b7ddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7da2:	f1a6 0308 	sub.w	r3, r6, #8
   b7da6:	2b05      	cmp	r3, #5
   b7da8:	d818      	bhi.n	b7ddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7daa:	e8df f003 	tbb	[pc, r3]
   b7dae:	0f0d      	.short	0x0f0d
   b7db0:	15131711 	.word	0x15131711
   b7db4:	2e22      	cmp	r6, #34	; 0x22
   b7db6:	d001      	beq.n	b7dbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7db8:	2e5c      	cmp	r6, #92	; 0x5c
   b7dba:	d10f      	bne.n	b7ddc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7dbc:	4631      	mov	r1, r6
                write('b');
   b7dbe:	4620      	mov	r0, r4
   b7dc0:	f7ff fecd 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7dc4:	463d      	mov	r5, r7
    while (s != end) {
   b7dc6:	e7cf      	b.n	b7d68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7dc8:	2162      	movs	r1, #98	; 0x62
   b7dca:	e7f8      	b.n	b7dbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7dcc:	2174      	movs	r1, #116	; 0x74
   b7dce:	e7f6      	b.n	b7dbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7dd0:	216e      	movs	r1, #110	; 0x6e
   b7dd2:	e7f4      	b.n	b7dbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7dd4:	2166      	movs	r1, #102	; 0x66
   b7dd6:	e7f2      	b.n	b7dbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7dd8:	2172      	movs	r1, #114	; 0x72
   b7dda:	e7f0      	b.n	b7dbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7ddc:	6823      	ldr	r3, [r4, #0]
   b7dde:	4632      	mov	r2, r6
   b7de0:	68db      	ldr	r3, [r3, #12]
   b7de2:	4649      	mov	r1, r9
   b7de4:	4620      	mov	r0, r4
   b7de6:	4798      	blx	r3
                break;
   b7de8:	e7ec      	b.n	b7dc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b7dea:	42bd      	cmp	r5, r7
   b7dec:	d005      	beq.n	b7dfa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7dee:	6823      	ldr	r3, [r4, #0]
   b7df0:	1b7a      	subs	r2, r7, r5
   b7df2:	689b      	ldr	r3, [r3, #8]
   b7df4:	4629      	mov	r1, r5
   b7df6:	4620      	mov	r0, r4
   b7df8:	4798      	blx	r3
    }
    write('"');
   b7dfa:	2122      	movs	r1, #34	; 0x22
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	f7ff feae 	bl	b7b5e <_ZN5spark10JSONWriter5writeEc>
}
   b7e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e06:	bf00      	nop
   b7e08:	000b8bef 	.word	0x000b8bef

000b7e0c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7e0c:	b513      	push	{r0, r1, r4, lr}
   b7e0e:	4604      	mov	r4, r0
   b7e10:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7e14:	f7ff ff5e 	bl	b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7e18:	4620      	mov	r0, r4
   b7e1a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7e1e:	f7ff ff97 	bl	b7d50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7e22:	2302      	movs	r3, #2
}
   b7e24:	4620      	mov	r0, r4
    state_ = VALUE;
   b7e26:	7123      	strb	r3, [r4, #4]
}
   b7e28:	b002      	add	sp, #8
   b7e2a:	bd10      	pop	{r4, pc}

000b7e2c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7e2c:	b513      	push	{r0, r1, r4, lr}
   b7e2e:	4604      	mov	r4, r0
   b7e30:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7e34:	f7ff ff4e 	bl	b7cd4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7e38:	4620      	mov	r0, r4
   b7e3a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7e3e:	f7ff ff87 	bl	b7d50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7e42:	2301      	movs	r3, #1
}
   b7e44:	4620      	mov	r0, r4
    state_ = NEXT;
   b7e46:	7123      	strb	r3, [r4, #4]
}
   b7e48:	b002      	add	sp, #8
   b7e4a:	bd10      	pop	{r4, pc}

000b7e4c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7e4c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7e4e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7e50:	d902      	bls.n	b7e58 <pinAvailable+0xc>
    return false;
   b7e52:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7e54:	b002      	add	sp, #8
   b7e56:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7e58:	f1a0 030b 	sub.w	r3, r0, #11
   b7e5c:	2b02      	cmp	r3, #2
   b7e5e:	d81a      	bhi.n	b7e96 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7e60:	4c17      	ldr	r4, [pc, #92]	; (b7ec0 <pinAvailable+0x74>)
   b7e62:	7821      	ldrb	r1, [r4, #0]
   b7e64:	f3bf 8f5b 	dmb	ish
   b7e68:	f011 0101 	ands.w	r1, r1, #1
   b7e6c:	d10b      	bne.n	b7e86 <pinAvailable+0x3a>
   b7e6e:	4620      	mov	r0, r4
   b7e70:	9101      	str	r1, [sp, #4]
   b7e72:	f7fc f921 	bl	b40b8 <__cxa_guard_acquire>
   b7e76:	9901      	ldr	r1, [sp, #4]
   b7e78:	b128      	cbz	r0, b7e86 <pinAvailable+0x3a>
   b7e7a:	4812      	ldr	r0, [pc, #72]	; (b7ec4 <pinAvailable+0x78>)
   b7e7c:	f7fc ffde 	bl	b4e3c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7e80:	4620      	mov	r0, r4
   b7e82:	f7fc f91e 	bl	b40c2 <__cxa_guard_release>
   b7e86:	4b0f      	ldr	r3, [pc, #60]	; (b7ec4 <pinAvailable+0x78>)
   b7e88:	7818      	ldrb	r0, [r3, #0]
   b7e8a:	f7fc fe5d 	bl	b4b48 <hal_spi_is_enabled>
   b7e8e:	2800      	cmp	r0, #0
   b7e90:	d1df      	bne.n	b7e52 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7e92:	2001      	movs	r0, #1
   b7e94:	e7de      	b.n	b7e54 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7e96:	2801      	cmp	r0, #1
   b7e98:	d809      	bhi.n	b7eae <pinAvailable+0x62>
   b7e9a:	f000 f89b 	bl	b7fd4 <_Z19__fetch_global_Wirev>
   b7e9e:	2100      	movs	r1, #0
   b7ea0:	7c00      	ldrb	r0, [r0, #16]
   b7ea2:	f7fc fe39 	bl	b4b18 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7ea6:	f080 0001 	eor.w	r0, r0, #1
   b7eaa:	b2c0      	uxtb	r0, r0
   b7eac:	e7d2      	b.n	b7e54 <pinAvailable+0x8>
   b7eae:	3809      	subs	r0, #9
   b7eb0:	2801      	cmp	r0, #1
   b7eb2:	d8ee      	bhi.n	b7e92 <pinAvailable+0x46>
   b7eb4:	f000 f84e 	bl	b7f54 <_Z22__fetch_global_Serial1v>
   b7eb8:	7c00      	ldrb	r0, [r0, #16]
   b7eba:	f7fc fde5 	bl	b4a88 <hal_usart_is_enabled>
   b7ebe:	e7f2      	b.n	b7ea6 <pinAvailable+0x5a>
   b7ec0:	2003e71c 	.word	0x2003e71c
   b7ec4:	2003e720 	.word	0x2003e720

000b7ec8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ec8:	2823      	cmp	r0, #35	; 0x23
{
   b7eca:	b538      	push	{r3, r4, r5, lr}
   b7ecc:	4604      	mov	r4, r0
   b7ece:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ed0:	d80a      	bhi.n	b7ee8 <pinMode+0x20>
   b7ed2:	29ff      	cmp	r1, #255	; 0xff
   b7ed4:	d008      	beq.n	b7ee8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7ed6:	f7ff ffb9 	bl	b7e4c <pinAvailable>
   b7eda:	b128      	cbz	r0, b7ee8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7edc:	4629      	mov	r1, r5
   b7ede:	4620      	mov	r0, r4
}
   b7ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7ee4:	f7fc bcce 	b.w	b4884 <HAL_Pin_Mode>
}
   b7ee8:	bd38      	pop	{r3, r4, r5, pc}

000b7eea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7eea:	b538      	push	{r3, r4, r5, lr}
   b7eec:	4604      	mov	r4, r0
   b7eee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7ef0:	f7fc fcd0 	bl	b4894 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7ef4:	28ff      	cmp	r0, #255	; 0xff
   b7ef6:	d010      	beq.n	b7f1a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7ef8:	2806      	cmp	r0, #6
   b7efa:	d804      	bhi.n	b7f06 <digitalWrite+0x1c>
   b7efc:	234d      	movs	r3, #77	; 0x4d
   b7efe:	fa23 f000 	lsr.w	r0, r3, r0
   b7f02:	07c3      	lsls	r3, r0, #31
   b7f04:	d409      	bmi.n	b7f1a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7f06:	4620      	mov	r0, r4
   b7f08:	f7ff ffa0 	bl	b7e4c <pinAvailable>
   b7f0c:	b128      	cbz	r0, b7f1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7f0e:	4629      	mov	r1, r5
   b7f10:	4620      	mov	r0, r4
}
   b7f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7f16:	f7fc bcc5 	b.w	b48a4 <HAL_GPIO_Write>
}
   b7f1a:	bd38      	pop	{r3, r4, r5, pc}

000b7f1c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f1c:	4770      	bx	lr
	...

000b7f20 <_Z20acquireSerial1Bufferv>:
{
   b7f20:	b538      	push	{r3, r4, r5, lr}
   b7f22:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f24:	2514      	movs	r5, #20
   b7f26:	462a      	mov	r2, r5
   b7f28:	2100      	movs	r1, #0
   b7f2a:	f000 f9d7 	bl	b82dc <memset>
   b7f2e:	8025      	strh	r5, [r4, #0]
   b7f30:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f32:	4907      	ldr	r1, [pc, #28]	; (b7f50 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f34:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f36:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f38:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f3a:	f000 f871 	bl	b8020 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f3e:	4904      	ldr	r1, [pc, #16]	; (b7f50 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f40:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f42:	4628      	mov	r0, r5
   b7f44:	f000 f86c 	bl	b8020 <_ZnajRKSt9nothrow_t>
    };
   b7f48:	60e0      	str	r0, [r4, #12]
}
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	bd38      	pop	{r3, r4, r5, pc}
   b7f4e:	bf00      	nop
   b7f50:	000b8bf5 	.word	0x000b8bf5

000b7f54 <_Z22__fetch_global_Serial1v>:
{
   b7f54:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f56:	4d0e      	ldr	r5, [pc, #56]	; (b7f90 <_Z22__fetch_global_Serial1v+0x3c>)
   b7f58:	7829      	ldrb	r1, [r5, #0]
   b7f5a:	f3bf 8f5b 	dmb	ish
   b7f5e:	f011 0401 	ands.w	r4, r1, #1
{
   b7f62:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f64:	d111      	bne.n	b7f8a <_Z22__fetch_global_Serial1v+0x36>
   b7f66:	4628      	mov	r0, r5
   b7f68:	f7fc f8a6 	bl	b40b8 <__cxa_guard_acquire>
   b7f6c:	b168      	cbz	r0, b7f8a <_Z22__fetch_global_Serial1v+0x36>
   b7f6e:	a801      	add	r0, sp, #4
   b7f70:	f7ff ffd6 	bl	b7f20 <_Z20acquireSerial1Bufferv>
   b7f74:	aa01      	add	r2, sp, #4
   b7f76:	4621      	mov	r1, r4
   b7f78:	4806      	ldr	r0, [pc, #24]	; (b7f94 <_Z22__fetch_global_Serial1v+0x40>)
   b7f7a:	f7ff fc37 	bl	b77ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f7e:	4628      	mov	r0, r5
   b7f80:	f7fc f89f 	bl	b40c2 <__cxa_guard_release>
   b7f84:	4804      	ldr	r0, [pc, #16]	; (b7f98 <_Z22__fetch_global_Serial1v+0x44>)
   b7f86:	f000 f963 	bl	b8250 <atexit>
    return serial1;
}
   b7f8a:	4802      	ldr	r0, [pc, #8]	; (b7f94 <_Z22__fetch_global_Serial1v+0x40>)
   b7f8c:	b007      	add	sp, #28
   b7f8e:	bd30      	pop	{r4, r5, pc}
   b7f90:	2003e728 	.word	0x2003e728
   b7f94:	2003e72c 	.word	0x2003e72c
   b7f98:	000b7f1d 	.word	0x000b7f1d

000b7f9c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7f9c:	4770      	bx	lr
	...

000b7fa0 <_Z17acquireWireBufferv>:
{
   b7fa0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7fa2:	4b0a      	ldr	r3, [pc, #40]	; (b7fcc <_Z17acquireWireBufferv+0x2c>)
   b7fa4:	6003      	str	r3, [r0, #0]
   b7fa6:	2301      	movs	r3, #1
{
   b7fa8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7faa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fac:	4908      	ldr	r1, [pc, #32]	; (b7fd0 <_Z17acquireWireBufferv+0x30>)
   b7fae:	2020      	movs	r0, #32
   b7fb0:	f000 f836 	bl	b8020 <_ZnajRKSt9nothrow_t>
	};
   b7fb4:	2520      	movs	r5, #32
   b7fb6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fb8:	4905      	ldr	r1, [pc, #20]	; (b7fd0 <_Z17acquireWireBufferv+0x30>)
	};
   b7fba:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7fbc:	4628      	mov	r0, r5
   b7fbe:	f000 f82f 	bl	b8020 <_ZnajRKSt9nothrow_t>
	};
   b7fc2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	bd38      	pop	{r3, r4, r5, pc}
   b7fca:	bf00      	nop
   b7fcc:	00010018 	.word	0x00010018
   b7fd0:	000b8bf5 	.word	0x000b8bf5

000b7fd4 <_Z19__fetch_global_Wirev>:
{
   b7fd4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fd6:	4d0e      	ldr	r5, [pc, #56]	; (b8010 <_Z19__fetch_global_Wirev+0x3c>)
   b7fd8:	7829      	ldrb	r1, [r5, #0]
   b7fda:	f3bf 8f5b 	dmb	ish
   b7fde:	f011 0401 	ands.w	r4, r1, #1
{
   b7fe2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7fe4:	d111      	bne.n	b800a <_Z19__fetch_global_Wirev+0x36>
   b7fe6:	4628      	mov	r0, r5
   b7fe8:	f7fc f866 	bl	b40b8 <__cxa_guard_acquire>
   b7fec:	b168      	cbz	r0, b800a <_Z19__fetch_global_Wirev+0x36>
   b7fee:	4668      	mov	r0, sp
   b7ff0:	f7ff ffd6 	bl	b7fa0 <_Z17acquireWireBufferv>
   b7ff4:	466a      	mov	r2, sp
   b7ff6:	4621      	mov	r1, r4
   b7ff8:	4806      	ldr	r0, [pc, #24]	; (b8014 <_Z19__fetch_global_Wirev+0x40>)
   b7ffa:	f7ff fc41 	bl	b7880 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ffe:	4628      	mov	r0, r5
   b8000:	f7fc f85f 	bl	b40c2 <__cxa_guard_release>
   b8004:	4804      	ldr	r0, [pc, #16]	; (b8018 <_Z19__fetch_global_Wirev+0x44>)
   b8006:	f000 f923 	bl	b8250 <atexit>
	return wire;
}
   b800a:	4802      	ldr	r0, [pc, #8]	; (b8014 <_Z19__fetch_global_Wirev+0x40>)
   b800c:	b007      	add	sp, #28
   b800e:	bd30      	pop	{r4, r5, pc}
   b8010:	2003e744 	.word	0x2003e744
   b8014:	2003e748 	.word	0x2003e748
   b8018:	000b7f9d 	.word	0x000b7f9d

000b801c <_ZnwjRKSt9nothrow_t>:
   b801c:	f7fc b839 	b.w	b4092 <_Znwj>

000b8020 <_ZnajRKSt9nothrow_t>:
   b8020:	f7fc b839 	b.w	b4096 <_Znaj>

000b8024 <_ZSt25__throw_bad_function_callv>:
   b8024:	b508      	push	{r3, lr}
   b8026:	f7fc feab 	bl	b4d80 <abort>
	...

000b802c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b802c:	4901      	ldr	r1, [pc, #4]	; (b8034 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b802e:	f000 b8f9 	b.w	b8224 <_ZNKSt9type_infoeqERKS_>
   b8032:	bf00      	nop
   b8034:	000b8c10 	.word	0x000b8c10

000b8038 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8038:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b803a:	2400      	movs	r4, #0
   b803c:	2310      	movs	r3, #16
   b803e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8042:	6803      	ldr	r3, [r0, #0]
   b8044:	4615      	mov	r5, r2
   b8046:	699e      	ldr	r6, [r3, #24]
   b8048:	6812      	ldr	r2, [r2, #0]
   b804a:	466b      	mov	r3, sp
   b804c:	e9cd 4400 	strd	r4, r4, [sp]
   b8050:	47b0      	blx	r6
   b8052:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8056:	f003 0306 	and.w	r3, r3, #6
   b805a:	2b06      	cmp	r3, #6
   b805c:	bf03      	ittte	eq
   b805e:	9b00      	ldreq	r3, [sp, #0]
   b8060:	602b      	streq	r3, [r5, #0]
   b8062:	2001      	moveq	r0, #1
   b8064:	4620      	movne	r0, r4
   b8066:	b004      	add	sp, #16
   b8068:	bd70      	pop	{r4, r5, r6, pc}

000b806a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b806a:	9800      	ldr	r0, [sp, #0]
   b806c:	4290      	cmp	r0, r2
   b806e:	bf14      	ite	ne
   b8070:	2001      	movne	r0, #1
   b8072:	2006      	moveq	r0, #6
   b8074:	4770      	bx	lr
	...

000b8078 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8078:	b510      	push	{r4, lr}
   b807a:	4b03      	ldr	r3, [pc, #12]	; (b8088 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b807c:	6003      	str	r3, [r0, #0]
   b807e:	4604      	mov	r4, r0
   b8080:	f000 f8cd 	bl	b821e <_ZNSt9type_infoD1Ev>
   b8084:	4620      	mov	r0, r4
   b8086:	bd10      	pop	{r4, pc}
   b8088:	000b8c50 	.word	0x000b8c50

000b808c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b808c:	b510      	push	{r4, lr}
   b808e:	4604      	mov	r4, r0
   b8090:	f7ff fff2 	bl	b8078 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8094:	4620      	mov	r0, r4
   b8096:	2108      	movs	r1, #8
   b8098:	f7fb ffff 	bl	b409a <_ZdlPvj>
   b809c:	4620      	mov	r0, r4
   b809e:	bd10      	pop	{r4, pc}

000b80a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b80a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80a4:	461f      	mov	r7, r3
   b80a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b80aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b80ae:	4598      	cmp	r8, r3
   b80b0:	4606      	mov	r6, r0
   b80b2:	4615      	mov	r5, r2
   b80b4:	d107      	bne.n	b80c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b80b6:	9907      	ldr	r1, [sp, #28]
   b80b8:	f000 f8b4 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b80bc:	b118      	cbz	r0, b80c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b80be:	7165      	strb	r5, [r4, #5]
   b80c0:	2000      	movs	r0, #0
   b80c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b80c6:	4639      	mov	r1, r7
   b80c8:	4630      	mov	r0, r6
   b80ca:	f000 f8ab 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b80ce:	2800      	cmp	r0, #0
   b80d0:	d0f6      	beq.n	b80c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b80d2:	2301      	movs	r3, #1
   b80d4:	f8c4 8000 	str.w	r8, [r4]
   b80d8:	7125      	strb	r5, [r4, #4]
   b80da:	71a3      	strb	r3, [r4, #6]
   b80dc:	e7f0      	b.n	b80c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b80de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b80de:	b538      	push	{r3, r4, r5, lr}
   b80e0:	4615      	mov	r5, r2
   b80e2:	461c      	mov	r4, r3
   b80e4:	f000 f89e 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b80e8:	b120      	cbz	r0, b80f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b80ea:	2308      	movs	r3, #8
   b80ec:	60e3      	str	r3, [r4, #12]
   b80ee:	2306      	movs	r3, #6
   b80f0:	6025      	str	r5, [r4, #0]
   b80f2:	7123      	strb	r3, [r4, #4]
   b80f4:	bd38      	pop	{r3, r4, r5, pc}

000b80f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b80f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80f8:	4605      	mov	r5, r0
   b80fa:	460c      	mov	r4, r1
   b80fc:	9201      	str	r2, [sp, #4]
   b80fe:	461e      	mov	r6, r3
   b8100:	f000 f890 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b8104:	b950      	cbnz	r0, b811c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8106:	2e03      	cmp	r6, #3
   b8108:	d808      	bhi.n	b811c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b810a:	6823      	ldr	r3, [r4, #0]
   b810c:	9a01      	ldr	r2, [sp, #4]
   b810e:	695b      	ldr	r3, [r3, #20]
   b8110:	4629      	mov	r1, r5
   b8112:	4620      	mov	r0, r4
   b8114:	b002      	add	sp, #8
   b8116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b811a:	4718      	bx	r3
   b811c:	b002      	add	sp, #8
   b811e:	bd70      	pop	{r4, r5, r6, pc}

000b8120 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8120:	b510      	push	{r4, lr}
   b8122:	4b03      	ldr	r3, [pc, #12]	; (b8130 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8124:	6003      	str	r3, [r0, #0]
   b8126:	4604      	mov	r4, r0
   b8128:	f7ff ffa6 	bl	b8078 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b812c:	4620      	mov	r0, r4
   b812e:	bd10      	pop	{r4, pc}
   b8130:	000b8cb0 	.word	0x000b8cb0

000b8134 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8134:	b510      	push	{r4, lr}
   b8136:	4604      	mov	r4, r0
   b8138:	f7ff fff2 	bl	b8120 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b813c:	4620      	mov	r0, r4
   b813e:	210c      	movs	r1, #12
   b8140:	f7fb ffab 	bl	b409a <_ZdlPvj>
   b8144:	4620      	mov	r0, r4
   b8146:	bd10      	pop	{r4, pc}

000b8148 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b814a:	9f08      	ldr	r7, [sp, #32]
   b814c:	4297      	cmp	r7, r2
   b814e:	4605      	mov	r5, r0
   b8150:	460e      	mov	r6, r1
   b8152:	4614      	mov	r4, r2
   b8154:	d00a      	beq.n	b816c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8156:	68a8      	ldr	r0, [r5, #8]
   b8158:	6802      	ldr	r2, [r0, #0]
   b815a:	9708      	str	r7, [sp, #32]
   b815c:	6a15      	ldr	r5, [r2, #32]
   b815e:	4631      	mov	r1, r6
   b8160:	4622      	mov	r2, r4
   b8162:	46ac      	mov	ip, r5
   b8164:	b003      	add	sp, #12
   b8166:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b816a:	4760      	bx	ip
   b816c:	4619      	mov	r1, r3
   b816e:	9301      	str	r3, [sp, #4]
   b8170:	f000 f858 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b8174:	9b01      	ldr	r3, [sp, #4]
   b8176:	2800      	cmp	r0, #0
   b8178:	d0ed      	beq.n	b8156 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b817a:	2006      	movs	r0, #6
   b817c:	b003      	add	sp, #12
   b817e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8180 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8180:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8184:	460d      	mov	r5, r1
   b8186:	4619      	mov	r1, r3
   b8188:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b818c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8190:	4681      	mov	r9, r0
   b8192:	4617      	mov	r7, r2
   b8194:	4698      	mov	r8, r3
   b8196:	f000 f845 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b819a:	b190      	cbz	r0, b81c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b819c:	2d00      	cmp	r5, #0
   b819e:	6034      	str	r4, [r6, #0]
   b81a0:	7137      	strb	r7, [r6, #4]
   b81a2:	db09      	blt.n	b81b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b81a4:	1961      	adds	r1, r4, r5
   b81a6:	458a      	cmp	sl, r1
   b81a8:	bf0c      	ite	eq
   b81aa:	2106      	moveq	r1, #6
   b81ac:	2101      	movne	r1, #1
   b81ae:	71b1      	strb	r1, [r6, #6]
   b81b0:	2000      	movs	r0, #0
   b81b2:	b001      	add	sp, #4
   b81b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b81b8:	3502      	adds	r5, #2
   b81ba:	d1f9      	bne.n	b81b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81bc:	2301      	movs	r3, #1
   b81be:	71b3      	strb	r3, [r6, #6]
   b81c0:	e7f6      	b.n	b81b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81c2:	4554      	cmp	r4, sl
   b81c4:	d106      	bne.n	b81d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b81c6:	4659      	mov	r1, fp
   b81c8:	4648      	mov	r0, r9
   b81ca:	f000 f82b 	bl	b8224 <_ZNKSt9type_infoeqERKS_>
   b81ce:	b108      	cbz	r0, b81d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b81d0:	7177      	strb	r7, [r6, #5]
   b81d2:	e7ed      	b.n	b81b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b81d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b81d8:	6803      	ldr	r3, [r0, #0]
   b81da:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b81de:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b81e2:	69dc      	ldr	r4, [r3, #28]
   b81e4:	463a      	mov	r2, r7
   b81e6:	4643      	mov	r3, r8
   b81e8:	4629      	mov	r1, r5
   b81ea:	46a4      	mov	ip, r4
   b81ec:	b001      	add	sp, #4
   b81ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81f2:	4760      	bx	ip

000b81f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b81f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81f8:	4607      	mov	r7, r0
   b81fa:	460c      	mov	r4, r1
   b81fc:	4615      	mov	r5, r2
   b81fe:	461e      	mov	r6, r3
   b8200:	f7ff ff6d 	bl	b80de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8204:	b948      	cbnz	r0, b821a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8206:	68b8      	ldr	r0, [r7, #8]
   b8208:	6803      	ldr	r3, [r0, #0]
   b820a:	699f      	ldr	r7, [r3, #24]
   b820c:	462a      	mov	r2, r5
   b820e:	4633      	mov	r3, r6
   b8210:	4621      	mov	r1, r4
   b8212:	46bc      	mov	ip, r7
   b8214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8218:	4760      	bx	ip
   b821a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b821e <_ZNSt9type_infoD1Ev>:
   b821e:	4770      	bx	lr

000b8220 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8220:	2000      	movs	r0, #0
   b8222:	4770      	bx	lr

000b8224 <_ZNKSt9type_infoeqERKS_>:
   b8224:	4281      	cmp	r1, r0
   b8226:	b508      	push	{r3, lr}
   b8228:	d00e      	beq.n	b8248 <_ZNKSt9type_infoeqERKS_+0x24>
   b822a:	6840      	ldr	r0, [r0, #4]
   b822c:	7803      	ldrb	r3, [r0, #0]
   b822e:	2b2a      	cmp	r3, #42	; 0x2a
   b8230:	d00c      	beq.n	b824c <_ZNKSt9type_infoeqERKS_+0x28>
   b8232:	6849      	ldr	r1, [r1, #4]
   b8234:	780b      	ldrb	r3, [r1, #0]
   b8236:	2b2a      	cmp	r3, #42	; 0x2a
   b8238:	bf08      	it	eq
   b823a:	3101      	addeq	r1, #1
   b823c:	f000 f89b 	bl	b8376 <strcmp>
   b8240:	fab0 f080 	clz	r0, r0
   b8244:	0940      	lsrs	r0, r0, #5
   b8246:	bd08      	pop	{r3, pc}
   b8248:	2001      	movs	r0, #1
   b824a:	e7fc      	b.n	b8246 <_ZNKSt9type_infoeqERKS_+0x22>
   b824c:	2000      	movs	r0, #0
   b824e:	e7fa      	b.n	b8246 <_ZNKSt9type_infoeqERKS_+0x22>

000b8250 <atexit>:
   b8250:	2300      	movs	r3, #0
   b8252:	4601      	mov	r1, r0
   b8254:	461a      	mov	r2, r3
   b8256:	4618      	mov	r0, r3
   b8258:	f000 b97a 	b.w	b8550 <__register_exitproc>

000b825c <isprint>:
   b825c:	4b02      	ldr	r3, [pc, #8]	; (b8268 <isprint+0xc>)
   b825e:	4418      	add	r0, r3
   b8260:	7840      	ldrb	r0, [r0, #1]
   b8262:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8266:	4770      	bx	lr
   b8268:	000b8d7d 	.word	0x000b8d7d

000b826c <memcmp>:
   b826c:	b510      	push	{r4, lr}
   b826e:	3901      	subs	r1, #1
   b8270:	4402      	add	r2, r0
   b8272:	4290      	cmp	r0, r2
   b8274:	d101      	bne.n	b827a <memcmp+0xe>
   b8276:	2000      	movs	r0, #0
   b8278:	e005      	b.n	b8286 <memcmp+0x1a>
   b827a:	7803      	ldrb	r3, [r0, #0]
   b827c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8280:	42a3      	cmp	r3, r4
   b8282:	d001      	beq.n	b8288 <memcmp+0x1c>
   b8284:	1b18      	subs	r0, r3, r4
   b8286:	bd10      	pop	{r4, pc}
   b8288:	3001      	adds	r0, #1
   b828a:	e7f2      	b.n	b8272 <memcmp+0x6>

000b828c <memcpy>:
   b828c:	440a      	add	r2, r1
   b828e:	4291      	cmp	r1, r2
   b8290:	f100 33ff 	add.w	r3, r0, #4294967295
   b8294:	d100      	bne.n	b8298 <memcpy+0xc>
   b8296:	4770      	bx	lr
   b8298:	b510      	push	{r4, lr}
   b829a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b829e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82a2:	4291      	cmp	r1, r2
   b82a4:	d1f9      	bne.n	b829a <memcpy+0xe>
   b82a6:	bd10      	pop	{r4, pc}

000b82a8 <memmove>:
   b82a8:	4288      	cmp	r0, r1
   b82aa:	b510      	push	{r4, lr}
   b82ac:	eb01 0402 	add.w	r4, r1, r2
   b82b0:	d902      	bls.n	b82b8 <memmove+0x10>
   b82b2:	4284      	cmp	r4, r0
   b82b4:	4623      	mov	r3, r4
   b82b6:	d807      	bhi.n	b82c8 <memmove+0x20>
   b82b8:	1e43      	subs	r3, r0, #1
   b82ba:	42a1      	cmp	r1, r4
   b82bc:	d008      	beq.n	b82d0 <memmove+0x28>
   b82be:	f811 2b01 	ldrb.w	r2, [r1], #1
   b82c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b82c6:	e7f8      	b.n	b82ba <memmove+0x12>
   b82c8:	4402      	add	r2, r0
   b82ca:	4601      	mov	r1, r0
   b82cc:	428a      	cmp	r2, r1
   b82ce:	d100      	bne.n	b82d2 <memmove+0x2a>
   b82d0:	bd10      	pop	{r4, pc}
   b82d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b82d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b82da:	e7f7      	b.n	b82cc <memmove+0x24>

000b82dc <memset>:
   b82dc:	4402      	add	r2, r0
   b82de:	4603      	mov	r3, r0
   b82e0:	4293      	cmp	r3, r2
   b82e2:	d100      	bne.n	b82e6 <memset+0xa>
   b82e4:	4770      	bx	lr
   b82e6:	f803 1b01 	strb.w	r1, [r3], #1
   b82ea:	e7f9      	b.n	b82e0 <memset+0x4>

000b82ec <srand>:
   b82ec:	b538      	push	{r3, r4, r5, lr}
   b82ee:	4b10      	ldr	r3, [pc, #64]	; (b8330 <srand+0x44>)
   b82f0:	681d      	ldr	r5, [r3, #0]
   b82f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b82f4:	4604      	mov	r4, r0
   b82f6:	b9b3      	cbnz	r3, b8326 <srand+0x3a>
   b82f8:	2018      	movs	r0, #24
   b82fa:	f7fc fd21 	bl	b4d40 <malloc>
   b82fe:	4602      	mov	r2, r0
   b8300:	63a8      	str	r0, [r5, #56]	; 0x38
   b8302:	b920      	cbnz	r0, b830e <srand+0x22>
   b8304:	4b0b      	ldr	r3, [pc, #44]	; (b8334 <srand+0x48>)
   b8306:	480c      	ldr	r0, [pc, #48]	; (b8338 <srand+0x4c>)
   b8308:	2142      	movs	r1, #66	; 0x42
   b830a:	f7fc fd49 	bl	b4da0 <__assert_func>
   b830e:	490b      	ldr	r1, [pc, #44]	; (b833c <srand+0x50>)
   b8310:	4b0b      	ldr	r3, [pc, #44]	; (b8340 <srand+0x54>)
   b8312:	e9c0 1300 	strd	r1, r3, [r0]
   b8316:	4b0b      	ldr	r3, [pc, #44]	; (b8344 <srand+0x58>)
   b8318:	6083      	str	r3, [r0, #8]
   b831a:	230b      	movs	r3, #11
   b831c:	8183      	strh	r3, [r0, #12]
   b831e:	2100      	movs	r1, #0
   b8320:	2001      	movs	r0, #1
   b8322:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8326:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8328:	2200      	movs	r2, #0
   b832a:	611c      	str	r4, [r3, #16]
   b832c:	615a      	str	r2, [r3, #20]
   b832e:	bd38      	pop	{r3, r4, r5, pc}
   b8330:	2003e5a4 	.word	0x2003e5a4
   b8334:	000b8ce9 	.word	0x000b8ce9
   b8338:	000b8d00 	.word	0x000b8d00
   b833c:	abcd330e 	.word	0xabcd330e
   b8340:	e66d1234 	.word	0xe66d1234
   b8344:	0005deec 	.word	0x0005deec

000b8348 <strchr>:
   b8348:	b2c9      	uxtb	r1, r1
   b834a:	4603      	mov	r3, r0
   b834c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8350:	b11a      	cbz	r2, b835a <strchr+0x12>
   b8352:	428a      	cmp	r2, r1
   b8354:	d1f9      	bne.n	b834a <strchr+0x2>
   b8356:	4618      	mov	r0, r3
   b8358:	4770      	bx	lr
   b835a:	2900      	cmp	r1, #0
   b835c:	bf18      	it	ne
   b835e:	2300      	movne	r3, #0
   b8360:	e7f9      	b.n	b8356 <strchr+0xe>

000b8362 <strchrnul>:
   b8362:	b510      	push	{r4, lr}
   b8364:	4604      	mov	r4, r0
   b8366:	f7ff ffef 	bl	b8348 <strchr>
   b836a:	b918      	cbnz	r0, b8374 <strchrnul+0x12>
   b836c:	4620      	mov	r0, r4
   b836e:	f000 f814 	bl	b839a <strlen>
   b8372:	4420      	add	r0, r4
   b8374:	bd10      	pop	{r4, pc}

000b8376 <strcmp>:
   b8376:	f810 2b01 	ldrb.w	r2, [r0], #1
   b837a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b837e:	2a01      	cmp	r2, #1
   b8380:	bf28      	it	cs
   b8382:	429a      	cmpcs	r2, r3
   b8384:	d0f7      	beq.n	b8376 <strcmp>
   b8386:	1ad0      	subs	r0, r2, r3
   b8388:	4770      	bx	lr

000b838a <strcpy>:
   b838a:	4603      	mov	r3, r0
   b838c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8390:	f803 2b01 	strb.w	r2, [r3], #1
   b8394:	2a00      	cmp	r2, #0
   b8396:	d1f9      	bne.n	b838c <strcpy+0x2>
   b8398:	4770      	bx	lr

000b839a <strlen>:
   b839a:	4603      	mov	r3, r0
   b839c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b83a0:	2a00      	cmp	r2, #0
   b83a2:	d1fb      	bne.n	b839c <strlen+0x2>
   b83a4:	1a18      	subs	r0, r3, r0
   b83a6:	3801      	subs	r0, #1
   b83a8:	4770      	bx	lr

000b83aa <strncmp>:
   b83aa:	b510      	push	{r4, lr}
   b83ac:	b17a      	cbz	r2, b83ce <strncmp+0x24>
   b83ae:	4603      	mov	r3, r0
   b83b0:	3901      	subs	r1, #1
   b83b2:	1884      	adds	r4, r0, r2
   b83b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b83b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b83bc:	4290      	cmp	r0, r2
   b83be:	d101      	bne.n	b83c4 <strncmp+0x1a>
   b83c0:	42a3      	cmp	r3, r4
   b83c2:	d101      	bne.n	b83c8 <strncmp+0x1e>
   b83c4:	1a80      	subs	r0, r0, r2
   b83c6:	bd10      	pop	{r4, pc}
   b83c8:	2800      	cmp	r0, #0
   b83ca:	d1f3      	bne.n	b83b4 <strncmp+0xa>
   b83cc:	e7fa      	b.n	b83c4 <strncmp+0x1a>
   b83ce:	4610      	mov	r0, r2
   b83d0:	e7f9      	b.n	b83c6 <strncmp+0x1c>

000b83d2 <strncpy>:
   b83d2:	b510      	push	{r4, lr}
   b83d4:	3901      	subs	r1, #1
   b83d6:	4603      	mov	r3, r0
   b83d8:	b132      	cbz	r2, b83e8 <strncpy+0x16>
   b83da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b83de:	f803 4b01 	strb.w	r4, [r3], #1
   b83e2:	3a01      	subs	r2, #1
   b83e4:	2c00      	cmp	r4, #0
   b83e6:	d1f7      	bne.n	b83d8 <strncpy+0x6>
   b83e8:	441a      	add	r2, r3
   b83ea:	2100      	movs	r1, #0
   b83ec:	4293      	cmp	r3, r2
   b83ee:	d100      	bne.n	b83f2 <strncpy+0x20>
   b83f0:	bd10      	pop	{r4, pc}
   b83f2:	f803 1b01 	strb.w	r1, [r3], #1
   b83f6:	e7f9      	b.n	b83ec <strncpy+0x1a>

000b83f8 <strnlen>:
   b83f8:	b510      	push	{r4, lr}
   b83fa:	4602      	mov	r2, r0
   b83fc:	4401      	add	r1, r0
   b83fe:	428a      	cmp	r2, r1
   b8400:	4613      	mov	r3, r2
   b8402:	d003      	beq.n	b840c <strnlen+0x14>
   b8404:	781c      	ldrb	r4, [r3, #0]
   b8406:	3201      	adds	r2, #1
   b8408:	2c00      	cmp	r4, #0
   b840a:	d1f8      	bne.n	b83fe <strnlen+0x6>
   b840c:	1a18      	subs	r0, r3, r0
   b840e:	bd10      	pop	{r4, pc}

000b8410 <strrchr>:
   b8410:	b538      	push	{r3, r4, r5, lr}
   b8412:	4603      	mov	r3, r0
   b8414:	460c      	mov	r4, r1
   b8416:	b969      	cbnz	r1, b8434 <strrchr+0x24>
   b8418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b841c:	f7ff bf94 	b.w	b8348 <strchr>
   b8420:	1c43      	adds	r3, r0, #1
   b8422:	4605      	mov	r5, r0
   b8424:	4621      	mov	r1, r4
   b8426:	4618      	mov	r0, r3
   b8428:	f7ff ff8e 	bl	b8348 <strchr>
   b842c:	2800      	cmp	r0, #0
   b842e:	d1f7      	bne.n	b8420 <strrchr+0x10>
   b8430:	4628      	mov	r0, r5
   b8432:	bd38      	pop	{r3, r4, r5, pc}
   b8434:	2500      	movs	r5, #0
   b8436:	e7f5      	b.n	b8424 <strrchr+0x14>

000b8438 <_strtol_l.constprop.0>:
   b8438:	2b01      	cmp	r3, #1
   b843a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b843e:	d001      	beq.n	b8444 <_strtol_l.constprop.0+0xc>
   b8440:	2b24      	cmp	r3, #36	; 0x24
   b8442:	d906      	bls.n	b8452 <_strtol_l.constprop.0+0x1a>
   b8444:	f7fc fca4 	bl	b4d90 <__errno>
   b8448:	2316      	movs	r3, #22
   b844a:	6003      	str	r3, [r0, #0]
   b844c:	2000      	movs	r0, #0
   b844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8452:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8538 <_strtol_l.constprop.0+0x100>
   b8456:	460d      	mov	r5, r1
   b8458:	462e      	mov	r6, r5
   b845a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b845e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8462:	f017 0708 	ands.w	r7, r7, #8
   b8466:	d1f7      	bne.n	b8458 <_strtol_l.constprop.0+0x20>
   b8468:	2c2d      	cmp	r4, #45	; 0x2d
   b846a:	d132      	bne.n	b84d2 <_strtol_l.constprop.0+0x9a>
   b846c:	782c      	ldrb	r4, [r5, #0]
   b846e:	2701      	movs	r7, #1
   b8470:	1cb5      	adds	r5, r6, #2
   b8472:	2b00      	cmp	r3, #0
   b8474:	d05b      	beq.n	b852e <_strtol_l.constprop.0+0xf6>
   b8476:	2b10      	cmp	r3, #16
   b8478:	d109      	bne.n	b848e <_strtol_l.constprop.0+0x56>
   b847a:	2c30      	cmp	r4, #48	; 0x30
   b847c:	d107      	bne.n	b848e <_strtol_l.constprop.0+0x56>
   b847e:	782c      	ldrb	r4, [r5, #0]
   b8480:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8484:	2c58      	cmp	r4, #88	; 0x58
   b8486:	d14d      	bne.n	b8524 <_strtol_l.constprop.0+0xec>
   b8488:	786c      	ldrb	r4, [r5, #1]
   b848a:	2310      	movs	r3, #16
   b848c:	3502      	adds	r5, #2
   b848e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8492:	f108 38ff 	add.w	r8, r8, #4294967295
   b8496:	f04f 0c00 	mov.w	ip, #0
   b849a:	fbb8 f9f3 	udiv	r9, r8, r3
   b849e:	4666      	mov	r6, ip
   b84a0:	fb03 8a19 	mls	sl, r3, r9, r8
   b84a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b84a8:	f1be 0f09 	cmp.w	lr, #9
   b84ac:	d816      	bhi.n	b84dc <_strtol_l.constprop.0+0xa4>
   b84ae:	4674      	mov	r4, lr
   b84b0:	42a3      	cmp	r3, r4
   b84b2:	dd24      	ble.n	b84fe <_strtol_l.constprop.0+0xc6>
   b84b4:	f1bc 0f00 	cmp.w	ip, #0
   b84b8:	db1e      	blt.n	b84f8 <_strtol_l.constprop.0+0xc0>
   b84ba:	45b1      	cmp	r9, r6
   b84bc:	d31c      	bcc.n	b84f8 <_strtol_l.constprop.0+0xc0>
   b84be:	d101      	bne.n	b84c4 <_strtol_l.constprop.0+0x8c>
   b84c0:	45a2      	cmp	sl, r4
   b84c2:	db19      	blt.n	b84f8 <_strtol_l.constprop.0+0xc0>
   b84c4:	fb06 4603 	mla	r6, r6, r3, r4
   b84c8:	f04f 0c01 	mov.w	ip, #1
   b84cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b84d0:	e7e8      	b.n	b84a4 <_strtol_l.constprop.0+0x6c>
   b84d2:	2c2b      	cmp	r4, #43	; 0x2b
   b84d4:	bf04      	itt	eq
   b84d6:	782c      	ldrbeq	r4, [r5, #0]
   b84d8:	1cb5      	addeq	r5, r6, #2
   b84da:	e7ca      	b.n	b8472 <_strtol_l.constprop.0+0x3a>
   b84dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b84e0:	f1be 0f19 	cmp.w	lr, #25
   b84e4:	d801      	bhi.n	b84ea <_strtol_l.constprop.0+0xb2>
   b84e6:	3c37      	subs	r4, #55	; 0x37
   b84e8:	e7e2      	b.n	b84b0 <_strtol_l.constprop.0+0x78>
   b84ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b84ee:	f1be 0f19 	cmp.w	lr, #25
   b84f2:	d804      	bhi.n	b84fe <_strtol_l.constprop.0+0xc6>
   b84f4:	3c57      	subs	r4, #87	; 0x57
   b84f6:	e7db      	b.n	b84b0 <_strtol_l.constprop.0+0x78>
   b84f8:	f04f 3cff 	mov.w	ip, #4294967295
   b84fc:	e7e6      	b.n	b84cc <_strtol_l.constprop.0+0x94>
   b84fe:	f1bc 0f00 	cmp.w	ip, #0
   b8502:	da05      	bge.n	b8510 <_strtol_l.constprop.0+0xd8>
   b8504:	2322      	movs	r3, #34	; 0x22
   b8506:	6003      	str	r3, [r0, #0]
   b8508:	4646      	mov	r6, r8
   b850a:	b942      	cbnz	r2, b851e <_strtol_l.constprop.0+0xe6>
   b850c:	4630      	mov	r0, r6
   b850e:	e79e      	b.n	b844e <_strtol_l.constprop.0+0x16>
   b8510:	b107      	cbz	r7, b8514 <_strtol_l.constprop.0+0xdc>
   b8512:	4276      	negs	r6, r6
   b8514:	2a00      	cmp	r2, #0
   b8516:	d0f9      	beq.n	b850c <_strtol_l.constprop.0+0xd4>
   b8518:	f1bc 0f00 	cmp.w	ip, #0
   b851c:	d000      	beq.n	b8520 <_strtol_l.constprop.0+0xe8>
   b851e:	1e69      	subs	r1, r5, #1
   b8520:	6011      	str	r1, [r2, #0]
   b8522:	e7f3      	b.n	b850c <_strtol_l.constprop.0+0xd4>
   b8524:	2430      	movs	r4, #48	; 0x30
   b8526:	2b00      	cmp	r3, #0
   b8528:	d1b1      	bne.n	b848e <_strtol_l.constprop.0+0x56>
   b852a:	2308      	movs	r3, #8
   b852c:	e7af      	b.n	b848e <_strtol_l.constprop.0+0x56>
   b852e:	2c30      	cmp	r4, #48	; 0x30
   b8530:	d0a5      	beq.n	b847e <_strtol_l.constprop.0+0x46>
   b8532:	230a      	movs	r3, #10
   b8534:	e7ab      	b.n	b848e <_strtol_l.constprop.0+0x56>
   b8536:	bf00      	nop
   b8538:	000b8d7e 	.word	0x000b8d7e

000b853c <strtol>:
   b853c:	4613      	mov	r3, r2
   b853e:	460a      	mov	r2, r1
   b8540:	4601      	mov	r1, r0
   b8542:	4802      	ldr	r0, [pc, #8]	; (b854c <strtol+0x10>)
   b8544:	6800      	ldr	r0, [r0, #0]
   b8546:	f7ff bf77 	b.w	b8438 <_strtol_l.constprop.0>
   b854a:	bf00      	nop
   b854c:	2003e5a4 	.word	0x2003e5a4

000b8550 <__register_exitproc>:
   b8550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8554:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8610 <__register_exitproc+0xc0>
   b8558:	4606      	mov	r6, r0
   b855a:	f8d8 0000 	ldr.w	r0, [r8]
   b855e:	461f      	mov	r7, r3
   b8560:	460d      	mov	r5, r1
   b8562:	4691      	mov	r9, r2
   b8564:	f000 f856 	bl	b8614 <__retarget_lock_acquire_recursive>
   b8568:	4b25      	ldr	r3, [pc, #148]	; (b8600 <__register_exitproc+0xb0>)
   b856a:	681c      	ldr	r4, [r3, #0]
   b856c:	b934      	cbnz	r4, b857c <__register_exitproc+0x2c>
   b856e:	4c25      	ldr	r4, [pc, #148]	; (b8604 <__register_exitproc+0xb4>)
   b8570:	601c      	str	r4, [r3, #0]
   b8572:	4b25      	ldr	r3, [pc, #148]	; (b8608 <__register_exitproc+0xb8>)
   b8574:	b113      	cbz	r3, b857c <__register_exitproc+0x2c>
   b8576:	681b      	ldr	r3, [r3, #0]
   b8578:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b857c:	6863      	ldr	r3, [r4, #4]
   b857e:	2b1f      	cmp	r3, #31
   b8580:	dd07      	ble.n	b8592 <__register_exitproc+0x42>
   b8582:	f8d8 0000 	ldr.w	r0, [r8]
   b8586:	f000 f847 	bl	b8618 <__retarget_lock_release_recursive>
   b858a:	f04f 30ff 	mov.w	r0, #4294967295
   b858e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8592:	b34e      	cbz	r6, b85e8 <__register_exitproc+0x98>
   b8594:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8598:	b988      	cbnz	r0, b85be <__register_exitproc+0x6e>
   b859a:	4b1c      	ldr	r3, [pc, #112]	; (b860c <__register_exitproc+0xbc>)
   b859c:	b923      	cbnz	r3, b85a8 <__register_exitproc+0x58>
   b859e:	f8d8 0000 	ldr.w	r0, [r8]
   b85a2:	f000 f838 	bl	b8616 <__retarget_lock_release>
   b85a6:	e7f0      	b.n	b858a <__register_exitproc+0x3a>
   b85a8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b85ac:	f7fc fbc8 	bl	b4d40 <malloc>
   b85b0:	2800      	cmp	r0, #0
   b85b2:	d0f4      	beq.n	b859e <__register_exitproc+0x4e>
   b85b4:	2300      	movs	r3, #0
   b85b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b85ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b85be:	6863      	ldr	r3, [r4, #4]
   b85c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b85c4:	2201      	movs	r2, #1
   b85c6:	409a      	lsls	r2, r3
   b85c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b85cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b85d0:	4313      	orrs	r3, r2
   b85d2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b85d6:	2e02      	cmp	r6, #2
   b85d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b85dc:	bf02      	ittt	eq
   b85de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b85e2:	4313      	orreq	r3, r2
   b85e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b85e8:	6863      	ldr	r3, [r4, #4]
   b85ea:	f8d8 0000 	ldr.w	r0, [r8]
   b85ee:	1c5a      	adds	r2, r3, #1
   b85f0:	3302      	adds	r3, #2
   b85f2:	6062      	str	r2, [r4, #4]
   b85f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b85f8:	f000 f80e 	bl	b8618 <__retarget_lock_release_recursive>
   b85fc:	2000      	movs	r0, #0
   b85fe:	e7c6      	b.n	b858e <__register_exitproc+0x3e>
   b8600:	2003e7e8 	.word	0x2003e7e8
   b8604:	2003e75c 	.word	0x2003e75c
   b8608:	00000000 	.word	0x00000000
   b860c:	000b4d41 	.word	0x000b4d41
   b8610:	2003e608 	.word	0x2003e608

000b8614 <__retarget_lock_acquire_recursive>:
   b8614:	4770      	bx	lr

000b8616 <__retarget_lock_release>:
   b8616:	4770      	bx	lr

000b8618 <__retarget_lock_release_recursive>:
   b8618:	4770      	bx	lr

000b861a <link_code_end>:
	...

000b861c <dynalib_user>:
   b861c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b862c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b863c:	7620 7269 7574 6c61 2c00 0020 7055 6164      virtual., .Upda
   b864c:	6574 2064 7453 7461 7375 6120 646e 4320     ted Status and C
   b865c:	6c6f 726f 3a20 2520 0073 4552 0044 5247     olor : %s.RED.GR
   b866c:	4545 004e 4c42 4555 4c00 4445 4920 2053     EEN.BLUE.LED IS 
   b867c:	4e4f 4c00 4445 4920 2053 464f 0046 6552     ON.LED IS OFF.Re
   b868c:	6563 7669 6465 6320 6c6f 726f 203a 7325     ceived color: %s
   b869c:	6f00 446e 7461 5261 6365 6965 6576 2164     .onDataReceived!
   b86ac:	0021 6552 6563 7669 6465 6420 7461 2061     !.Received data 
   b86bc:	7266 6d6f 203a 3025 5832 253a 3230 3a58     from: %02X:%02X:
   b86cc:	3025 5832 253a 3230 3a58 3025 5832 253a     %02X:%02X:%02X:%
   b86dc:	3230 3a58 3600 3445 3030 3030 2d31 3542     02X:.6E400001-B5
   b86ec:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   b86fc:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   b870c:	3330 422d 4135 2d33 3346 3339 452d 4130     03-B5A3-F393-E0A
   b871c:	2d39 3545 4530 3432 4344 4143 4539 7400     9-E50E24DCCA9E.t
   b872c:	7275 4f6e 4f6e 6666 3600 3445 3030 3030     urnOnOff.6E40000
   b873c:	2d32 3542 3341 462d 3933 2d33 3045 3941     2-B5A3-F393-E0A9
   b874c:	452d 3035 3245 4434 4343 3941 0045 6573     -E50E24DCCA9E.se
   b875c:	656c 7463 6f43 6f6c 0072 4536 3034 3030     lectColor.6E4000
   b876c:	3430 422d 4135 2d33 3346 3339 452d 4130     04-B5A3-F393-E0A
   b877c:	2d39 3545 4530 3432 4344 4143 4539 6e00     9-E50E24DCCA9E.n
   b878c:	746f 6669 5379 6174 7574 0073               otifyStatus.

000b8798 <_ZTVN5spark10LogHandlerE>:
	...
   b87a8:	40a1 000b 40c9 000b                         .@...@..

000b87b0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b87b8:	40d5 000b 4109 000b 7101 000b 40cb 000b     .@...A...q...@..

000b87c8 <_ZTVN5spark13EthernetClassE>:
	...
   b87d0:	4e1f 000b 4e15 000b 4e0b 000b 4e01 000b     .N...N...N...N..
   b87e0:	4df5 000b 4de9 000b 7979 000b 7981 000b     .M...M..yy...y..
   b87f0:	4ddd 000b 4dd5 000b 4dcb 000b 4dc1 000b     .M...M...M...M..
   b8800:	79b1 000b 7341 6573 7472 6f69 466e 6961     .y..AssertionFai
   b8810:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   b8820:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   b8830:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   b8840:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   b8850:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   b8860:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   b8870:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   b8880:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   b8890:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   b88a0:	6465 7420 206f 7061 6570 646e 7020 6565     ed to append pee
   b88b0:	2072 6543 746e 6172 206c 6564 6976 6563     r Central device
   b88c0:	002e 6f43 6e6e 6365 6574 2064 7962 4320     ..Connected by C
   b88d0:	6e65 7274 6c61 6420 7665 6369 2e65 4400     entral device..D
   b88e0:	7369 6f63 6e6e 6365 6574 0064 7544 6c70     isconnected.Dupl
   b88f0:	6369 7461 6465 6320 6168 6172 7463 7265     icated character
   b8900:	7369 6974 2063 6163 6e6e 746f 6220 2065     istic cannot be 
   b8910:	6461 6564 2e64 4600 6961 656c 2064 6f74     added..Failed to
   b8920:	6120 7070 6e65 2064 6f6c 6163 206c 6863      append local ch
   b8930:	7261 6361 6574 6972 7473 6369 002e 0000     aracteristic....

000b8940 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8948:	50bd 000b 5121 000b 5207 000b 514b 000b     .P..!Q...R..KQ..
   b8958:	50c1 000b                                   .P..

000b895c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8964:	50b9 000b 512f 000b 50bb 000b 5151 000b     .P../Q...P..QQ..
   b8974:	50e1 000b                                   .P..

000b8978 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8980:	50b7 000b 513d 000b 59d5 000b 5157 000b     .P..=Q...Y..WQ..
   b8990:	5101 000b                                   .Q..

000b8994 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b89a0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b89b2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b89b2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b89c2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b89c2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b89d2:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b89e2:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b89f2:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b8a02:	7530 0020 205d 2500 0064 2928 203a 2000     0u .] .%d.(): . 
   b8a12:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   b8a22:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   b8a32:	6e66 7400 6300 646f 0065 6564 6174 6c69     fn.t.code.detail
	...

000b8a44 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8a4c:	654d 000b 6573 000b 6531 000b 7acb 000b     Me..se..1e...z..

000b8a5c <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8a64:	69a9 000b 69c1 000b 7101 000b 40cb 000b     .i...i...q...@..

000b8a74 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8a7c:	69d5 000b 69e9 000b 72a5 000b 6539 000b     .i...i...r..9e..

000b8a8c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8a94:	654b 000b 6581 000b 7065 000b 653b 000b     Ke...e..ep..;e..

000b8aa4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8aac:	6549 000b 658f 000b 6911 000b 65b1 000b     Ie...e...i...e..
   b8abc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b8acc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b8ad8 <_ZTV9IPAddress>:
	...
   b8ae0:	7581 000b 7571 000b 7573 000b               .u..qu..su..

000b8aec <_ZTV9USBSerial>:
	...
   b8af4:	7667 000b 76cf 000b 76a5 000b 6425 000b     gv...v...v..%d..
   b8b04:	7697 000b 7669 000b 7679 000b 76c9 000b     .v..iv..yv...v..
   b8b14:	7689 000b 7661 000b                         .v..av..

000b8b1c <_ZTV11USARTSerial>:
	...
   b8b24:	7771 000b 77dd 000b 77b5 000b 6425 000b     qw...w...w..%d..
   b8b34:	7785 000b 77a1 000b 7793 000b 77af 000b     .w...w...w...w..
   b8b44:	7773 000b 7777 000b                         sw..ww..

000b8b4c <_ZTV7TwoWire>:
	...
   b8b54:	7829 000b 7873 000b 784b 000b 782b 000b     )x..sx..Kx..+x..
   b8b64:	7853 000b 785b 000b 7863 000b 786b 000b     Sx..[x..cx..kx..

000b8b74 <_ZTVN5spark9WiFiClassE>:
	...
   b8b7c:	791b 000b 7911 000b 7907 000b 78bd 000b     .y...y...y...x..
   b8b8c:	78fb 000b 78ef 000b 7979 000b 7981 000b     .x...x..yy...y..
   b8b9c:	78e3 000b 78db 000b 78d1 000b 78c7 000b     .x...x...x...x..
   b8bac:	79b1 000b                                   .y..

000b8bb0 <_ZTVN5spark12NetworkClassE>:
	...
   b8bb8:	7939 000b 7943 000b 794d 000b 7957 000b     9y..Cy..My..Wy..
   b8bc8:	7961 000b 796d 000b 7979 000b 7981 000b     ay..my..yy...y..
   b8bd8:	7989 000b 7995 000b 799d 000b 79a7 000b     .y...y...y...y..
   b8be8:	79b1 000b 7525 7500 3025 7834                .y..%u.u%04x.

000b8bf5 <_ZSt7nothrow>:
	...

000b8bf6 <_ZTSSt19_Sp_make_shared_tag>:
   b8bf6:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8c06:	6572 5f64 6174 0067 0000                    red_tag...

000b8c10 <_ZTISt19_Sp_make_shared_tag>:
   b8c10:	8c50 000b 8bf6 000b                         P.......

000b8c18 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8c18:	8cb0 000b 8c24 000b 8cd4 000b               ....$.......

000b8c24 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8c24:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8c34:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8c44:	0045 0000                                   E...

000b8c48 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8c48:	0000 0000 8c18 000b 8079 000b 808d 000b     ........y.......
   b8c58:	8221 000b 8221 000b 80f7 000b 8039 000b     !...!.......9...
   b8c68:	80df 000b 80a1 000b 806b 000b               ........k...

000b8c74 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8c74:	8cb0 000b 8c80 000b 8c18 000b               ............

000b8c80 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8c80:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8c90:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8ca0:	666e 456f 0000 0000                         nfoE....

000b8ca8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8ca8:	0000 0000 8c74 000b 8121 000b 8135 000b     ....t...!...5...
   b8cb8:	8221 000b 8221 000b 80f7 000b 8039 000b     !...!.......9...
   b8cc8:	81f5 000b 8181 000b 8149 000b               ........I...

000b8cd4 <_ZTISt9type_info>:
   b8cd4:	8c50 000b 8cdc 000b                         P.......

000b8cdc <_ZTSSt9type_info>:
   b8cdc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8cec:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8cfc:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8d0c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8d1c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8d2c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8d3c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8d4c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8d5c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8d6c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8d7d <_ctype_>:
   b8d7d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8d8d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8d9d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8dad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8dbd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8dcd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8ddd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8ded:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8dfd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8e7e <link_const_variable_data_end>:
	...

000b8e80 <link_constructors_location>:
   b8e80:	000b4719 	.word	0x000b4719
   b8e84:	000b4e29 	.word	0x000b4e29
   b8e88:	000b4e51 	.word	0x000b4e51
   b8e8c:	000b6415 	.word	0x000b6415
   b8e90:	000b70f1 	.word	0x000b70f1
   b8e94:	000b7419 	.word	0x000b7419
   b8e98:	000b742d 	.word	0x000b742d
   b8e9c:	000b7925 	.word	0x000b7925
   b8ea0:	000b7a89 	.word	0x000b7a89

000b8ea4 <link_constructors_end>:
	...
